/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../runtime';
import { RequestInit } from 'node-fetch';
import LogObject from '../../../utils/logObject';

import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TaxIdentifierRequest,
    TaxIdentifierRequestFromJSON,
    TaxIdentifierRequestToJSON,
    TaxIdentifierResponse,
    TaxIdentifierResponseFromJSON,
    TaxIdentifierResponseToJSON,
    TaxIdentifierSchemaByCountry200Response,
    TaxIdentifierSchemaByCountry200ResponseFromJSON,
    TaxIdentifierSchemaByCountry200ResponseToJSON,
} from '../../../packages/EInvoicing/V1';

export interface TaxIdentifierSchemaByCountryInterface {
    avalaraVersion?: string;
    countryCode: string;
    xAvalaraClient?: string;
    xCorrelationID?: string;
    type?: TaxIdentifierSchemaByCountryTypeEnum;
}

export interface ValidateTaxIdentifierInterface {
    avalaraVersion?: string;
    taxIdentifierRequest: TaxIdentifierRequest;
    xAvalaraClient?: string;
    xCorrelationID?: string;
}

/**
 * 
 */
export class TaxIdentifiersApi extends runtime.ApiClient {
    public sdkVersion: string = '25.8.3';

    constructor(apiClient: runtime.ApiClient) {
        super(apiClient.configuration);
    }

    /**
     * This endpoint retrieves the request and response schema required to validate tax identifiers based on a specific country\'s requirements. This can include both standard fields and any additional parameters required by the respective country\'s tax authority.
     * Returns the tax identifier request & response schema for a specific country.
     */
    async taxIdentifierSchemaByCountryRaw(requestParameters: TaxIdentifierSchemaByCountryInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<TaxIdentifierSchemaByCountry200Response>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '1.4';
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling taxIdentifierSchemaByCountry.');
        }

        if (requestParameters.countryCode === null || requestParameters.countryCode === undefined) {
            throw new runtime.RequiredError('countryCode','Required parameter requestParameters.countryCode was null or undefined when calling taxIdentifierSchemaByCountry.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/einvoicing/tax-identifiers/schema`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.EInvoicing);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => TaxIdentifierSchemaByCountry200ResponseFromJSON(jsonValue)), logObject };
    }

    /**
     * This endpoint retrieves the request and response schema required to validate tax identifiers based on a specific country\'s requirements. This can include both standard fields and any additional parameters required by the respective country\'s tax authority.
     * Returns the tax identifier request & response schema for a specific country.
     */
    async taxIdentifierSchemaByCountry(requestParameters: TaxIdentifierSchemaByCountryInterface, initOverrides?: RequestInit): Promise<TaxIdentifierSchemaByCountry200Response> {
        const { response, logObject } = await this.taxIdentifierSchemaByCountryRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * This endpoint verifies whether a given tax identifier is valid and properly formatted according to the rules of the applicable country or tax system.
     * Validates a tax identifier.
     */
    async validateTaxIdentifierRaw(requestParameters: ValidateTaxIdentifierInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<TaxIdentifierResponse>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '1.4';
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling validateTaxIdentifier.');
        }

        if (requestParameters.taxIdentifierRequest === null || requestParameters.taxIdentifierRequest === undefined) {
            throw new runtime.RequiredError('taxIdentifierRequest','Required parameter requestParameters.taxIdentifierRequest was null or undefined when calling validateTaxIdentifier.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/einvoicing/tax-identifiers/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxIdentifierRequestToJSON(requestParameters.taxIdentifierRequest),
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.EInvoicing);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => TaxIdentifierResponseFromJSON(jsonValue)), logObject };
    }

    /**
     * This endpoint verifies whether a given tax identifier is valid and properly formatted according to the rules of the applicable country or tax system.
     * Validates a tax identifier.
     */
    async validateTaxIdentifier(requestParameters: ValidateTaxIdentifierInterface, initOverrides?: RequestInit): Promise<TaxIdentifierResponse> {
        const { response, logObject } = await this.validateTaxIdentifierRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

}

/**
    * @export
    * @enum {string}
    */
export enum TaxIdentifierSchemaByCountryTypeEnum {
    Request = 'request',
    Response = 'response'
}
