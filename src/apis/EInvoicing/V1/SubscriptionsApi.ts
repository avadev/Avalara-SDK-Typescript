/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../runtime';
import { RequestInit } from 'node-fetch';
import LogObject from '../../../utils/logObject';

import {
    SubscriptionDetail,
    SubscriptionDetailFromJSON,
    SubscriptionDetailToJSON,
    SubscriptionListResponse,
    SubscriptionListResponseFromJSON,
    SubscriptionListResponseToJSON,
    SubscriptionRegistration,
    SubscriptionRegistrationFromJSON,
    SubscriptionRegistrationToJSON,
    SuccessResponse,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    WebhooksErrorResponse,
    WebhooksErrorResponseFromJSON,
    WebhooksErrorResponseToJSON,
} from '../../../packages/EInvoicing/V1';

export interface CreateWebhookSubscriptionInterface {
    avalaraVersion?: string;
    subscriptionRegistration: SubscriptionRegistration;
    xCorrelationID?: string;
    xAvalaraClient?: string;
}

export interface DeleteWebhookSubscriptionInterface {
    subscriptionId: string;
    avalaraVersion?: string;
    xCorrelationID?: string;
    xAvalaraClient?: string;
}

export interface GetWebhookSubscriptionInterface {
    subscriptionId: string;
    avalaraVersion?: string;
    xCorrelationID?: string;
    xAvalaraClient?: string;
}

export interface ListWebhookSubscriptionsInterface {
    avalaraVersion?: string;
    xCorrelationID?: string;
    xAvalaraClient?: string;
    $top?: number;
    $skip?: number;
    count?: boolean;
    countOnly?: boolean;
}

/**
 * 
 */
export class SubscriptionsApi extends runtime.ApiClient {
    public sdkVersion: string = '25.10.1';

    constructor(apiClient: runtime.ApiClient) {
        super(apiClient.configuration);
    }

    /**
     * Create a subscription to events exposed by registered systems.
     * Create a subscription to events
     */
    async createWebhookSubscriptionRaw(requestParameters: CreateWebhookSubscriptionInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<SuccessResponse>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '1.4';
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling createWebhookSubscription.');
        }

        if (requestParameters.subscriptionRegistration === null || requestParameters.subscriptionRegistration === undefined) {
            throw new runtime.RequiredError('subscriptionRegistration','Required parameter requestParameters.subscriptionRegistration was null or undefined when calling createWebhookSubscription.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/einvoicing/webhooks/subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionRegistrationToJSON(requestParameters.subscriptionRegistration),
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.EInvoicing);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue)), logObject };
    }

    /**
     * Create a subscription to events exposed by registered systems.
     * Create a subscription to events
     */
    async createWebhookSubscription(requestParameters: CreateWebhookSubscriptionInterface, initOverrides?: RequestInit): Promise<SuccessResponse> {
        const { response, logObject } = await this.createWebhookSubscriptionRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Remove a subscription from the webhooks dispatch service. All events and subscriptions are also deleted.
     * Unsubscribe from events
     */
    async deleteWebhookSubscriptionRaw(requestParameters: DeleteWebhookSubscriptionInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<void>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '1.4';
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling deleteWebhookSubscription.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling deleteWebhookSubscription.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/einvoicing/webhooks/subscriptions/{subscription-id}`.replace(`{${"subscription-id"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.EInvoicing);
        logObject.populateResponseInfo(response);
        return { response: new runtime.VoidApiResponse(response), logObject };
    }

    /**
     * Remove a subscription from the webhooks dispatch service. All events and subscriptions are also deleted.
     * Unsubscribe from events
     */
    async deleteWebhookSubscription(requestParameters: DeleteWebhookSubscriptionInterface, initOverrides?: RequestInit): Promise<void> {
        const { logObject } = await this.deleteWebhookSubscriptionRaw(requestParameters, initOverrides);
        logObject.populateResponseBody(null);
        this.createLogEntry(logObject);
    }

    /**
     * Retrieve details of a specific subscription.
     * Get details of a subscription
     */
    async getWebhookSubscriptionRaw(requestParameters: GetWebhookSubscriptionInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<SubscriptionDetail>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '1.4';
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getWebhookSubscription.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling getWebhookSubscription.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/einvoicing/webhooks/subscriptions/{subscription-id}`.replace(`{${"subscription-id"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.EInvoicing);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionDetailFromJSON(jsonValue)), logObject };
    }

    /**
     * Retrieve details of a specific subscription.
     * Get details of a subscription
     */
    async getWebhookSubscription(requestParameters: GetWebhookSubscriptionInterface, initOverrides?: RequestInit): Promise<SubscriptionDetail> {
        const { response, logObject } = await this.getWebhookSubscriptionRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Retrieve a list of all subscriptions.
     * List all subscriptions
     */
    async listWebhookSubscriptionsRaw(requestParameters: ListWebhookSubscriptionsInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<SubscriptionListResponse>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '1.4';
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling listWebhookSubscriptions.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/einvoicing/webhooks/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.EInvoicing);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionListResponseFromJSON(jsonValue)), logObject };
    }

    /**
     * Retrieve a list of all subscriptions.
     * List all subscriptions
     */
    async listWebhookSubscriptions(requestParameters: ListWebhookSubscriptionsInterface, initOverrides?: RequestInit): Promise<SubscriptionListResponse> {
        const { response, logObject } = await this.listWebhookSubscriptionsRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

}
