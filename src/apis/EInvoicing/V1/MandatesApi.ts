/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../runtime';
import { RequestInit } from 'node-fetch';
import LogObject from '../../../utils/logObject';

import {
    ForbiddenError,
    ForbiddenErrorFromJSON,
    ForbiddenErrorToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    MandatesResponse,
    MandatesResponseFromJSON,
    MandatesResponseToJSON,
    NotFoundError,
    NotFoundErrorFromJSON,
    NotFoundErrorToJSON,
} from '../../../packages/EInvoicing/V1';

export interface GetMandatesRequest {
    avalaraVersion: string;
    xAvalaraClient?: string;
    $filter?: string;
    $top?: number;
    $skip?: number;
    $count?: boolean;
    $countOnly?: boolean;
}

/**
 * 
 */
export class MandatesApi extends runtime.ApiClient {
    public sdkVersion: string = '';

    constructor(apiClient: runtime.ApiClient) {
        super(apiClient.configuration);
    }

    /**
     * This endpoint offers a list of country mandates supported by the Avalara E-Invoicing API.
     * List country mandates that are supported by the Avalara E-Invoicing platform
     */
    async getMandatesRaw(requestParameters: GetMandatesRequest, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<MandatesResponse>, logObject: LogObject }> {
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling getMandates.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$count !== undefined) {
            queryParameters['$count'] = requestParameters.$count;
        }

        if (requestParameters.$countOnly !== undefined) {
            queryParameters['$countOnly'] = requestParameters.$countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['avalara-version'] = '1.0';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/einvoicing/mandates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => MandatesResponseFromJSON(jsonValue)), logObject };
    }

    /**
     * This endpoint offers a list of country mandates supported by the Avalara E-Invoicing API.
     * List country mandates that are supported by the Avalara E-Invoicing platform
     */
    async getMandates(requestParameters: GetMandatesRequest, initOverrides?: RequestInit): Promise<MandatesResponse> {
        const { response, logObject } = await this.getMandatesRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

}
