/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../runtime';
import { RequestInit } from 'node-fetch';
import LogObject from '../../../utils/logObject';

import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Form1099ListRequest,
    Form1099ListRequestFromJSON,
    Form1099ListRequestToJSON,
    Get1099Form200Response,
    Get1099Form200ResponseFromJSON,
    Get1099Form200ResponseToJSON,
    JobResponse,
    JobResponseFromJSON,
    JobResponseToJSON,
    PaginatedQueryResultModelForm1099Base,
    PaginatedQueryResultModelForm1099BaseFromJSON,
    PaginatedQueryResultModelForm1099BaseToJSON,
} from '../../../packages/A1099/V2';

export interface BulkUpsert1099FormsInterface {
    avalaraVersion?: string;
    dryRun?: boolean;
    xCorrelationId?: string;
    xAvalaraClient?: string;
    form1099ListRequest?: Form1099ListRequest;
}

export interface Create1099FormInterface {
    avalaraVersion?: string;
    xCorrelationId?: string;
    xAvalaraClient?: string;
    get1099Form200Response?: Get1099Form200Response;
}

export interface Delete1099FormInterface {
    id: string;
    avalaraVersion?: string;
    xCorrelationId?: string;
    xAvalaraClient?: string;
}

export interface Get1099FormInterface {
    id: string;
    avalaraVersion?: string;
    xCorrelationId?: string;
    xAvalaraClient?: string;
}

export interface Get1099FormPdfInterface {
    id: string;
    avalaraVersion?: string;
    markEdelivered?: boolean;
    xCorrelationId?: string;
    xAvalaraClient?: string;
}

export interface List1099FormsInterface {
    avalaraVersion?: string;
    $filter?: string;
    $top?: number;
    $skip?: number;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
    xCorrelationId?: string;
    xAvalaraClient?: string;
}

export interface Update1099FormInterface {
    id: string;
    avalaraVersion?: string;
    xCorrelationId?: string;
    xAvalaraClient?: string;
    get1099Form200Response?: Get1099Form200Response;
}

/**
 * 
 */
export class Forms1099Api extends runtime.ApiClient {
    public sdkVersion: string = '25.10.1';

    constructor(apiClient: runtime.ApiClient) {
        super(apiClient.configuration);
    }

    /**
     * This endpoint allows you to create or update multiple 1099/1095/W2/1042S forms.  Maximum of 5000 forms can be processed in a single bulk request.    **Date Scheduling Rules:**    If federalEfileDate, stateEfileDate, or recipientEdeliveryDate are between current date and beginning of blackout period, scheduled to that date.  If dates are in the past or blackout period, scheduled to next available date.  For blackout period information, see https://www.track1099.com/info/IRS_info.  StateEfileDate must be on or after federalEfileDate.  Set dates to null to leave unscheduled.
     * Create or update multiple 1099/1095/W2/1042S forms
     */
    async bulkUpsert1099FormsRaw(requestParameters: BulkUpsert1099FormsInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<JobResponse>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling bulkUpsert1099Forms.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/1099/forms/$bulk-upsert`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: Form1099ListRequestToJSON(requestParameters.form1099ListRequest),
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => JobResponseFromJSON(jsonValue)), logObject };
    }

    /**
     * This endpoint allows you to create or update multiple 1099/1095/W2/1042S forms.  Maximum of 5000 forms can be processed in a single bulk request.    **Date Scheduling Rules:**    If federalEfileDate, stateEfileDate, or recipientEdeliveryDate are between current date and beginning of blackout period, scheduled to that date.  If dates are in the past or blackout period, scheduled to next available date.  For blackout period information, see https://www.track1099.com/info/IRS_info.  StateEfileDate must be on or after federalEfileDate.  Set dates to null to leave unscheduled.
     * Create or update multiple 1099/1095/W2/1042S forms
     */
    async bulkUpsert1099Forms(requestParameters: BulkUpsert1099FormsInterface, initOverrides?: RequestInit): Promise<JobResponse> {
        const { response, logObject } = await this.bulkUpsert1099FormsRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Create a 1099/1095/W2/1042S form.    **Date Scheduling Rules:**    If federalEfileDate, stateEfileDate, or recipientEdeliveryDate are between current date and beginning of blackout period, scheduled to that date.  If dates are in the past or blackout period, scheduled to next available date.  For blackout period information, see https://www.track1099.com/info/IRS_info.  StateEfileDate must be on or after federalEfileDate.  Set dates to null to leave unscheduled.
     * Create a 1099/1095/W2/1042S form
     */
    async create1099FormRaw(requestParameters: Create1099FormInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<Get1099Form200Response>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling create1099Form.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/1099/forms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: Get1099Form200ResponseToJSON(requestParameters.get1099Form200Response),
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => Get1099Form200ResponseFromJSON(jsonValue)), logObject };
    }

    /**
     * Create a 1099/1095/W2/1042S form.    **Date Scheduling Rules:**    If federalEfileDate, stateEfileDate, or recipientEdeliveryDate are between current date and beginning of blackout period, scheduled to that date.  If dates are in the past or blackout period, scheduled to next available date.  For blackout period information, see https://www.track1099.com/info/IRS_info.  StateEfileDate must be on or after federalEfileDate.  Set dates to null to leave unscheduled.
     * Create a 1099/1095/W2/1042S form
     */
    async create1099Form(requestParameters: Create1099FormInterface, initOverrides?: RequestInit): Promise<Get1099Form200Response> {
        const { response, logObject } = await this.create1099FormRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Delete a 1099/1095/W2/1042S form.
     * Delete a 1099/1095/W2/1042S form
     */
    async delete1099FormRaw(requestParameters: Delete1099FormInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<void>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling delete1099Form.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling delete1099Form.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/1099/forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.VoidApiResponse(response), logObject };
    }

    /**
     * Delete a 1099/1095/W2/1042S form.
     * Delete a 1099/1095/W2/1042S form
     */
    async delete1099Form(requestParameters: Delete1099FormInterface, initOverrides?: RequestInit): Promise<void> {
        const { logObject } = await this.delete1099FormRaw(requestParameters, initOverrides);
        logObject.populateResponseBody(null);
        this.createLogEntry(logObject);
    }

    /**
     * Retrieve a 1099/1095/W2/1042S form.
     * Retrieve a 1099/1095/W2/1042S form
     */
    async get1099FormRaw(requestParameters: Get1099FormInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<Get1099Form200Response>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling get1099Form.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling get1099Form.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/1099/forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => Get1099Form200ResponseFromJSON(jsonValue)), logObject };
    }

    /**
     * Retrieve a 1099/1095/W2/1042S form.
     * Retrieve a 1099/1095/W2/1042S form
     */
    async get1099Form(requestParameters: Get1099FormInterface, initOverrides?: RequestInit): Promise<Get1099Form200Response> {
        const { response, logObject } = await this.get1099FormRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Retrieve the PDF file for a 1099/1095/W2/1042S form.
     * Retrieve the PDF file for a 1099/1095/W2/1042S form
     */
    async get1099FormPdfRaw(requestParameters: Get1099FormPdfInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<Blob>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling get1099FormPdf.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling get1099FormPdf.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        if (requestParameters.markEdelivered !== undefined) {
            queryParameters['markEdelivered'] = requestParameters.markEdelivered;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/1099/forms/{id}/pdf`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.BlobApiResponse(response), logObject };
    }

    /**
     * Retrieve the PDF file for a 1099/1095/W2/1042S form.
     * Retrieve the PDF file for a 1099/1095/W2/1042S form
     */
    async get1099FormPdf(requestParameters: Get1099FormPdfInterface, initOverrides?: RequestInit): Promise<Blob> {
        const { response, logObject } = await this.get1099FormPdfRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * List 1099/1095/W2/1042S forms.                Collections support filtering only on certain fields. An attempt to filter on an unsupported field will receive a 400 Bad Request response.                Supported filtering fields are as follows:                - issuerId  - issuerReferenceId  - taxYear  - addressVerificationStatus - possible values are: unknown, pending, failed, incomplete, unchanged, verified  - createdAt  - edeliveryStatus - possible values are: sent, unscheduled, bad_verify, bad_verify_limit, scheduled, bounced, accepted  - email  - federalEfileStatus - possible values are: unscheduled, scheduled, sent, corrected_scheduled, accepted, corrected, corrected_accepted, held  - recipientName  - mailStatus - possible values are: sent, unscheduled, pending, delivered  - referenceId  - tinMatchStatus - possible values are: none, pending, matched, failed  - type - possible values are: 940, 941, 943, 944, 945, 1042, 1042-S, 1095-B, 1095-C, 1097-BTC, 1098, 1098-C, 1098-E, 1098-Q, 1098-T, 3921, 3922, 5498, 5498-ESA, 5498-SA, 1099-MISC, 1099-A, 1099-B, 1099-C, 1099-CAP, 1099-DIV, 1099-G, 1099-INT, 1099-K, 1099-LS, 1099-LTC, 1099-NEC, 1099-OID, 1099-PATR, 1099-Q, 1099-R, 1099-S, 1099-SA, T4A, W-2, W-2G, 1099-HC  - updatedAt  - validity - possible values are: true, false                For more information on filtering, see <see href=\"https://developer.avalara.com/avatax/filtering-in-rest/\">Filtering in REST</see>.
     * List 1099/1095/W2/1042S forms
     */
    async list1099FormsRaw(requestParameters: List1099FormsInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<PaginatedQueryResultModelForm1099Base>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling list1099Forms.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/1099/forms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQueryResultModelForm1099BaseFromJSON(jsonValue)), logObject };
    }

    /**
     * List 1099/1095/W2/1042S forms.                Collections support filtering only on certain fields. An attempt to filter on an unsupported field will receive a 400 Bad Request response.                Supported filtering fields are as follows:                - issuerId  - issuerReferenceId  - taxYear  - addressVerificationStatus - possible values are: unknown, pending, failed, incomplete, unchanged, verified  - createdAt  - edeliveryStatus - possible values are: sent, unscheduled, bad_verify, bad_verify_limit, scheduled, bounced, accepted  - email  - federalEfileStatus - possible values are: unscheduled, scheduled, sent, corrected_scheduled, accepted, corrected, corrected_accepted, held  - recipientName  - mailStatus - possible values are: sent, unscheduled, pending, delivered  - referenceId  - tinMatchStatus - possible values are: none, pending, matched, failed  - type - possible values are: 940, 941, 943, 944, 945, 1042, 1042-S, 1095-B, 1095-C, 1097-BTC, 1098, 1098-C, 1098-E, 1098-Q, 1098-T, 3921, 3922, 5498, 5498-ESA, 5498-SA, 1099-MISC, 1099-A, 1099-B, 1099-C, 1099-CAP, 1099-DIV, 1099-G, 1099-INT, 1099-K, 1099-LS, 1099-LTC, 1099-NEC, 1099-OID, 1099-PATR, 1099-Q, 1099-R, 1099-S, 1099-SA, T4A, W-2, W-2G, 1099-HC  - updatedAt  - validity - possible values are: true, false                For more information on filtering, see <see href=\"https://developer.avalara.com/avatax/filtering-in-rest/\">Filtering in REST</see>.
     * List 1099/1095/W2/1042S forms
     */
    async list1099Forms(requestParameters: List1099FormsInterface, initOverrides?: RequestInit): Promise<PaginatedQueryResultModelForm1099Base> {
        const { response, logObject } = await this.list1099FormsRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Update a 1099/1095/W2/1042S form.    **Date Update Rules:**    Possible to update scheduled dates (same validation rules apply).  Cannot change from scheduled to unscheduled status - must delete form and create new one.  If dates are between current date and blackout period, scheduled to that date.  If dates are in past or blackout period, scheduled to next available date.  For blackout period information, see https://www.track1099.com/info/IRS_info.  StateEfileDate must be on or after federalEfileDate.
     * Update a 1099/1095/W2/1042S form
     */
    async update1099FormRaw(requestParameters: Update1099FormInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<Get1099Form200Response>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling update1099Form.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling update1099Form.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        if (requestParameters.xAvalaraClient !== undefined && requestParameters.xAvalaraClient !== null) {
            headerParameters['X-Avalara-Client'] = String(requestParameters.xAvalaraClient);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/1099/forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: Get1099Form200ResponseToJSON(requestParameters.get1099Form200Response),
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => Get1099Form200ResponseFromJSON(jsonValue)), logObject };
    }

    /**
     * Update a 1099/1095/W2/1042S form.    **Date Update Rules:**    Possible to update scheduled dates (same validation rules apply).  Cannot change from scheduled to unscheduled status - must delete form and create new one.  If dates are between current date and blackout period, scheduled to that date.  If dates are in past or blackout period, scheduled to next available date.  For blackout period information, see https://www.track1099.com/info/IRS_info.  StateEfileDate must be on or after federalEfileDate.
     * Update a 1099/1095/W2/1042S form
     */
    async update1099Form(requestParameters: Update1099FormInterface, initOverrides?: RequestInit): Promise<Get1099Form200Response> {
        const { response, logObject } = await this.update1099FormRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

}
