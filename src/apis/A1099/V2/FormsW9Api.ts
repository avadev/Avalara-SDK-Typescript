/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Use **username/password** or generate a **license key** from: *Avalara Portal ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../runtime';
import { RequestInit } from 'node-fetch';
import LogObject from '../../../utils/logObject';

import {
    ErrorModel,
    ErrorModelFromJSON,
    ErrorModelToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    FormRequestModel,
    FormRequestModelFromJSON,
    FormRequestModelToJSON,
    IW9FormDataModelsOneOf,
    IW9FormDataModelsOneOfFromJSON,
    IW9FormDataModelsOneOfToJSON,
    PaginatedW9FormsModel,
    PaginatedW9FormsModelFromJSON,
    PaginatedW9FormsModelToJSON,
} from '../../../packages/A1099/V2';

export interface CreateW9FormInterface {
    avalaraVersion?: string;
    xCorrelationId: string;
    iW9FormDataModelsOneOf?: IW9FormDataModelsOneOf;
}

export interface DeleteW9FormInterface {
    id: string;
    avalaraVersion?: string;
    xCorrelationId: string;
}

export interface GetW9FormInterface {
    id: string;
    avalaraVersion?: string;
    xCorrelationId: string;
}

export interface GetW9FormRequestInterface {
    formRequestId: string;
    avalaraVersion?: string;
    xCorrelationId: string;
}

export interface ListW9FormsInterface {
    avalaraVersion?: string;
    xCorrelationId: string;
    $filter?: string;
    $top?: number;
    $skip?: number;
    $orderBy?: string;
    count?: boolean;
}

export interface SendW9FormEmailInterface {
    id: string;
    avalaraVersion?: string;
    xCorrelationId: string;
}

export interface UpdateW9FormInterface {
    id: string;
    avalaraVersion?: string;
    xCorrelationId: string;
    iW9FormDataModelsOneOf?: IW9FormDataModelsOneOf;
}

export interface UploadW9FilesInterface {
    id: string;
    avalaraVersion?: string;
    xCorrelationId: string;
    file?: Blob;
}

/**
 * 
 */
export class FormsW9Api extends runtime.ApiClient {
    public sdkVersion: string = '25.7.0';

    constructor(apiClient: runtime.ApiClient) {
        super(apiClient.configuration);
    }

    /**
     * Create a W9/W4/W8 form
     */
    async createW9FormRaw(requestParameters: CreateW9FormInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<IW9FormDataModelsOneOf>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling createW9Form.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling createW9Form.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/forms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IW9FormDataModelsOneOfToJSON(requestParameters.iW9FormDataModelsOneOf),
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => IW9FormDataModelsOneOfFromJSON(jsonValue)), logObject };
    }

    /**
     * Create a W9/W4/W8 form
     */
    async createW9Form(requestParameters: CreateW9FormInterface, initOverrides?: RequestInit): Promise<IW9FormDataModelsOneOf> {
        const { response, logObject } = await this.createW9FormRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Delete a form
     * Delete a form
     */
    async deleteW9FormRaw(requestParameters: DeleteW9FormInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<void>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteW9Form.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling deleteW9Form.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling deleteW9Form.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.VoidApiResponse(response), logObject };
    }

    /**
     * Delete a form
     * Delete a form
     */
    async deleteW9Form(requestParameters: DeleteW9FormInterface, initOverrides?: RequestInit): Promise<void> {
        const { logObject } = await this.deleteW9FormRaw(requestParameters, initOverrides);
        logObject.populateResponseBody(null);
        this.createLogEntry(logObject);
    }

    /**
     * Retrieve a W9/W4/W8 form
     * Retrieve a W9/W4/W8 form
     */
    async getW9FormRaw(requestParameters: GetW9FormInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<IW9FormDataModelsOneOf>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getW9Form.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling getW9Form.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling getW9Form.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => IW9FormDataModelsOneOfFromJSON(jsonValue)), logObject };
    }

    /**
     * Retrieve a W9/W4/W8 form
     * Retrieve a W9/W4/W8 form
     */
    async getW9Form(requestParameters: GetW9FormInterface, initOverrides?: RequestInit): Promise<IW9FormDataModelsOneOf> {
        const { response, logObject } = await this.getW9FormRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Retrieve a form request after creation: not likely to be useful except in testing. Previously-valid form requests will be Not Found after `expires_at`.
     * Retrieve a form request
     */
    async getW9FormRequestRaw(requestParameters: GetW9FormRequestInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<FormRequestModel>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.formRequestId === null || requestParameters.formRequestId === undefined) {
            throw new runtime.RequiredError('formRequestId','Required parameter requestParameters.formRequestId was null or undefined when calling getW9FormRequest.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling getW9FormRequest.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling getW9FormRequest.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/forms/requests/{formRequestId}`.replace(`{${"formRequestId"}}`, encodeURIComponent(String(requestParameters.formRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => FormRequestModelFromJSON(jsonValue)), logObject };
    }

    /**
     * Retrieve a form request after creation: not likely to be useful except in testing. Previously-valid form requests will be Not Found after `expires_at`.
     * Retrieve a form request
     */
    async getW9FormRequest(requestParameters: GetW9FormRequestInterface, initOverrides?: RequestInit): Promise<FormRequestModel> {
        const { response, logObject } = await this.getW9FormRequestRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * List W9/W4/W8 forms.
     * List W9/W4/W8 forms.
     */
    async listW9FormsRaw(requestParameters: ListW9FormsInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<PaginatedW9FormsModel>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling listW9Forms.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling listW9Forms.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/forms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => PaginatedW9FormsModelFromJSON(jsonValue)), logObject };
    }

    /**
     * List W9/W4/W8 forms.
     * List W9/W4/W8 forms.
     */
    async listW9Forms(requestParameters: ListW9FormsInterface, initOverrides?: RequestInit): Promise<PaginatedW9FormsModel> {
        const { response, logObject } = await this.listW9FormsRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Sends a W9 email request to a vendor/payee
     */
    async sendW9FormEmailRaw(requestParameters: SendW9FormEmailInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<IW9FormDataModelsOneOf>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sendW9FormEmail.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling sendW9FormEmail.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling sendW9FormEmail.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/forms/{id}/$send-email`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => IW9FormDataModelsOneOfFromJSON(jsonValue)), logObject };
    }

    /**
     * Sends a W9 email request to a vendor/payee
     */
    async sendW9FormEmail(requestParameters: SendW9FormEmailInterface, initOverrides?: RequestInit): Promise<IW9FormDataModelsOneOf> {
        const { response, logObject } = await this.sendW9FormEmailRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Update a W9/W4/W8 form
     */
    async updateW9FormRaw(requestParameters: UpdateW9FormInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<IW9FormDataModelsOneOf>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateW9Form.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling updateW9Form.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling updateW9Form.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IW9FormDataModelsOneOfToJSON(requestParameters.iW9FormDataModelsOneOf),
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => IW9FormDataModelsOneOfFromJSON(jsonValue)), logObject };
    }

    /**
     * Update a W9/W4/W8 form
     */
    async updateW9Form(requestParameters: UpdateW9FormInterface, initOverrides?: RequestInit): Promise<IW9FormDataModelsOneOf> {
        const { response, logObject } = await this.updateW9FormRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Upload files for a W9/W4/W8 form
     * Upload files for a W9/W4/W8 form
     */
    async uploadW9FilesRaw(requestParameters: UploadW9FilesInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<string>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadW9Files.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling uploadW9Files.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling uploadW9Files.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const { response, logObject } = await this.request({
            path: `/w9/forms/{id}/attachment`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.TextApiResponse(response) as any, logObject };
    }

    /**
     * Upload files for a W9/W4/W8 form
     * Upload files for a W9/W4/W8 form
     */
    async uploadW9Files(requestParameters: UploadW9FilesInterface, initOverrides?: RequestInit): Promise<string> {
        const { response, logObject } = await this.uploadW9FilesRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

}
