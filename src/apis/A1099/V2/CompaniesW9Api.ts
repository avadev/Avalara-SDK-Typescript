/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Use **username/password** or generate a **license key** from: *Avalara Portal ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../runtime';
import { RequestInit } from 'node-fetch';
import LogObject from '../../../utils/logObject';

import {
    CompanyCreateUpdateRequestModel,
    CompanyCreateUpdateRequestModelFromJSON,
    CompanyCreateUpdateRequestModelToJSON,
    CompanyResponse,
    CompanyResponseFromJSON,
    CompanyResponseToJSON,
    CompanyResponseModel,
    CompanyResponseModelFromJSON,
    CompanyResponseModelToJSON,
    ErrorModel,
    ErrorModelFromJSON,
    ErrorModelToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PaginatedQueryResultModelCompanyResponse,
    PaginatedQueryResultModelCompanyResponseFromJSON,
    PaginatedQueryResultModelCompanyResponseToJSON,
} from '../../../packages/A1099/V2';

export interface CreateCompanyInterface {
    avalaraVersion?: string;
    xCorrelationId: string;
    companyCreateUpdateRequestModel?: CompanyCreateUpdateRequestModel;
}

export interface DeleteCompanyInterface {
    id: string;
    avalaraVersion?: string;
    xCorrelationId: string;
}

export interface GetCompaniesInterface {
    avalaraVersion?: string;
    xCorrelationId: string;
    $filter?: string;
    $top?: number;
    $skip?: number;
    $orderBy?: string;
    count?: boolean;
    countOnly?: boolean;
}

export interface GetCompanyInterface {
    id: string;
    avalaraVersion?: string;
    xCorrelationId: string;
}

export interface UpdateCompanyInterface {
    id: string;
    avalaraVersion?: string;
    xCorrelationId: string;
    companyCreateUpdateRequestModel?: CompanyCreateUpdateRequestModel;
}

/**
 * 
 */
export class CompaniesW9Api extends runtime.ApiClient {
    public sdkVersion: string = '25.7.0';

    constructor(apiClient: runtime.ApiClient) {
        super(apiClient.configuration);
    }

    /**
     * Creates a new company
     * Creates a new company
     */
    async createCompanyRaw(requestParameters: CreateCompanyInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<CompanyResponseModel>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling createCompany.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling createCompany.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyCreateUpdateRequestModelToJSON(requestParameters.companyCreateUpdateRequestModel),
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => CompanyResponseModelFromJSON(jsonValue)), logObject };
    }

    /**
     * Creates a new company
     * Creates a new company
     */
    async createCompany(requestParameters: CreateCompanyInterface, initOverrides?: RequestInit): Promise<CompanyResponseModel> {
        const { response, logObject } = await this.createCompanyRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Deletes a company
     * Deletes a company
     */
    async deleteCompanyRaw(requestParameters: DeleteCompanyInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<void>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCompany.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling deleteCompany.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling deleteCompany.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.VoidApiResponse(response), logObject };
    }

    /**
     * Deletes a company
     * Deletes a company
     */
    async deleteCompany(requestParameters: DeleteCompanyInterface, initOverrides?: RequestInit): Promise<void> {
        const { logObject } = await this.deleteCompanyRaw(requestParameters, initOverrides);
        logObject.populateResponseBody(null);
        this.createLogEntry(logObject);
    }

    /**
     * List existing companies. Filterable/Sortable fields are: \"name\", \"referenceId\", \"group.name\", \"createdAt\" and \"updatedAt\".
     * List companies
     */
    async getCompaniesRaw(requestParameters: GetCompaniesInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<PaginatedQueryResultModelCompanyResponse>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling getCompanies.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling getCompanies.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        if (requestParameters.$filter !== undefined) {
            queryParameters['$filter'] = requestParameters.$filter;
        }

        if (requestParameters.$top !== undefined) {
            queryParameters['$top'] = requestParameters.$top;
        }

        if (requestParameters.$skip !== undefined) {
            queryParameters['$skip'] = requestParameters.$skip;
        }

        if (requestParameters.$orderBy !== undefined) {
            queryParameters['$orderBy'] = requestParameters.$orderBy;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.countOnly !== undefined) {
            queryParameters['countOnly'] = requestParameters.countOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQueryResultModelCompanyResponseFromJSON(jsonValue)), logObject };
    }

    /**
     * List existing companies. Filterable/Sortable fields are: \"name\", \"referenceId\", \"group.name\", \"createdAt\" and \"updatedAt\".
     * List companies
     */
    async getCompanies(requestParameters: GetCompaniesInterface, initOverrides?: RequestInit): Promise<PaginatedQueryResultModelCompanyResponse> {
        const { response, logObject } = await this.getCompaniesRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Retrieve an existing company
     * Retrieve a company
     */
    async getCompanyRaw(requestParameters: GetCompanyInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<CompanyResponse>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCompany.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling getCompany.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling getCompany.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => CompanyResponseFromJSON(jsonValue)), logObject };
    }

    /**
     * Retrieve an existing company
     * Retrieve a company
     */
    async getCompany(requestParameters: GetCompanyInterface, initOverrides?: RequestInit): Promise<CompanyResponse> {
        const { response, logObject } = await this.getCompanyRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

    /**
     * Update a company
     * Update a company
     */
    async updateCompanyRaw(requestParameters: UpdateCompanyInterface, initOverrides?: RequestInit): Promise<{ response: runtime.ApiResponse<CompanyResponseModel>, logObject: LogObject }> {
        requestParameters.avalaraVersion = requestParameters.avalaraVersion || '2.0';
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCompany.');
        }

        if (requestParameters.avalaraVersion === null || requestParameters.avalaraVersion === undefined) {
            throw new runtime.RequiredError('avalaraVersion','Required parameter requestParameters.avalaraVersion was null or undefined when calling updateCompany.');
        }

        if (requestParameters.xCorrelationId === null || requestParameters.xCorrelationId === undefined) {
            throw new runtime.RequiredError('xCorrelationId','Required parameter requestParameters.xCorrelationId was null or undefined when calling updateCompany.');
        }

        const queryParameters: any = {};
        const requiredScopes = "";
        const authNames: string[] = ['http'];
        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.avalaraVersion !== undefined && requestParameters.avalaraVersion !== null) {
            headerParameters['avalara-version'] = String(requestParameters.avalaraVersion);
        }

        if (requestParameters.xCorrelationId !== undefined && requestParameters.xCorrelationId !== null) {
            headerParameters['X-Correlation-Id'] = String(requestParameters.xCorrelationId);
        }

        await this.applyAuthToRequest(headerParameters, authNames, requiredScopes);
        const { response, logObject } = await this.request({
            path: `/w9/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyCreateUpdateRequestModelToJSON(requestParameters.companyCreateUpdateRequestModel),
        }, initOverrides, requiredScopes, false, runtime.AvalaraMicroservice.A1099);
        logObject.populateResponseInfo(response);
        return { response: new runtime.JSONApiResponse(response, (jsonValue) => CompanyResponseModelFromJSON(jsonValue)), logObject };
    }

    /**
     * Update a company
     * Update a company
     */
    async updateCompany(requestParameters: UpdateCompanyInterface, initOverrides?: RequestInit): Promise<CompanyResponseModel> {
        const { response, logObject } = await this.updateCompanyRaw(requestParameters, initOverrides);
        const value = await response.value();
        logObject.populateResponseBody(value);
        this.createLogEntry(logObject);
        return value;
    }

}
