/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    Form1099StatusDetail,
    Form1099StatusDetailFromJSON,
    Form1099StatusDetailFromJSONTyped,
    Form1099StatusDetailToJSON,
} from './Form1099StatusDetail';
import {
    StateAndLocalWithholding,
    StateAndLocalWithholdingFromJSON,
    StateAndLocalWithholdingFromJSONTyped,
    StateAndLocalWithholdingToJSON,
} from './StateAndLocalWithholding';
import {
    StateEfileStatusDetail,
    StateEfileStatusDetailFromJSON,
    StateEfileStatusDetailFromJSONTyped,
    StateEfileStatusDetailToJSON,
} from './StateEfileStatusDetail';
import {
    ValidationError,
    ValidationErrorFromJSON,
    ValidationErrorFromJSONTyped,
    ValidationErrorToJSON,
} from './ValidationError';

/**
 * Form 1099-R: Distributions From Pensions, Annuities, Retirement or Profit-Sharing Plans, IRAs, Insurance Contracts, etc.
 *             
 * *At least one of the following amounts must be provided:* 
 * Gross distribution, Taxable amount, Capital gain, Employee contributions/Designated Roth contributions or insurance premiums,
 * Net unrealized appreciation in employer's securities, Other amount, Total employee contributions,
 * Traditional IRA/SEP/SIMPLE or Roth conversion amount, or Amount allocable to IRR within 5 years
 * @export
 * @interface Form1099R
 */
export interface Form1099R {
    /**
     * Gross distribution
     * @type {number}
     * @memberof Form1099R
     */
    grossDistribution?: number | null;
    /**
     * Taxable amount
     * @type {number}
     * @memberof Form1099R
     */
    taxableAmount?: number | null;
    /**
     * Taxable amount not determined
     * @type {boolean}
     * @memberof Form1099R
     */
    taxableAmountNotDetermined?: boolean | null;
    /**
     * Total distribution
     * @type {boolean}
     * @memberof Form1099R
     */
    totalDistributionDetermined?: boolean | null;
    /**
     * Capital gain (included in Box 2a)
     * @type {number}
     * @memberof Form1099R
     */
    capitalGain?: number | null;
    /**
     * Federal income tax withheld
     * @type {number}
     * @memberof Form1099R
     */
    federalIncomeTaxWithheld?: number | null;
    /**
     * Employee contributions/Designated Roth contributions or insurance premiums
     * @type {number}
     * @memberof Form1099R
     */
    employeeContributionsOrDesignatedRothOrInsurancePremiums?: number | null;
    /**
     * Net unrealized appreciation in employer's securities
     * @type {number}
     * @memberof Form1099R
     */
    netUnrealizedAppreciationInEmployerSecurities?: number | null;
    /**
     * Distribution code.
     * 
     * Available values:
     * - 1: Early distribution, no known exception (in most cases, under age 59¬Ω)
     * - 2: Early distribution, exception applies (under age 59¬Ω)
     * - 3: Disability
     * - 4: Death
     * - 5: Prohibited transaction
     * - 6: Section 1035 exchange (a tax-free exchange of life insurance, annuity, qualified long-term care insurance, or endowment contracts)
     * - 7: Normal distribution
     * - 8: Excess contributions plus earnings/excess deferrals (and/or earnings) taxable in payment year
     * - 9: Cost of current life insurance protection (premiums paid by a trustee or custodian for current insurance protection)
     * - A: May be eligible for 10-year tax option
     * - B: Designated Roth account distribution
     * - C: Reportable Death Benefits Under Section 6050Y(c)
     * - D: Annuity payments from nonqualified annuity payments and distributions from life insurance contracts that may be subject to tax under section 1411
     * - E: Distribution under Employee Plans Compliance Resolution System (EPCRS)
     * - F: Charitable gift annuity
     * - G: Direct rollover and rollover contribution
     * - H: Direct rollover of distribution from a designated Roth account to a Roth IRA
     * - J: Early distribution from a Roth IRA (This code may be used with a Code 8 or P)
     * - K: Distribution of IRA Assets Not Having A Readily Available FMV
     * - L: Loans treated as deemed distributions under section 72(p)
     * - M: Qualified Plan Loan Offsets
     * - N: Recharacterized IRA contribution made for year following payment year
     * - P: Excess contributions plus earnings/excess deferrals taxable for year prior to payment year
     * - Q: Qualified distribution from a Roth IRA (Distribution from a Roth IRA when the 5-year holding period has been met, and the recipient has reached 59¬Ω, has died, or is disabled)
     * - R: Recharacterized IRA contribution made for year prior to payment year
     * - S: Early distribution from a SIMPLE IRA in first 2 years no known exceptions
     * - T: Roth IRA distribution exception applies because participant has reached 59¬Ω, died or is disabled, but it is unknown if the 5-year period has been met
     * - U: Distribution from ESOP under Section 404(k)
     * - W: Charges or payments for purchasing qualified long-term care insurance contracts under combined arrangements
     * @type {string}
     * @memberof Form1099R
     */
    distributionCode: Form1099RDistributionCodeEnum;
    /**
     * Second distribution code. Must be a valid combination with the first distribution code.
     * See DistributionCode property documentation for code descriptions.
     * 
     * Valid combinations based on first distribution code:
     * - 1: _, 8, B, D, K, L, M, P
     * - 2: _, 8, B, D, K, L, M, P
     * - 3: _, D
     * - 4: _, 8, A, B, D, G, H, K, L, M, P
     * - 5: _
     * - 6: _, W
     * - 7: _, A, B, D, K, L, M
     * - 8: _, 1, 2, 4, B, J, K
     * - 9: _
     * - A: 4, 7
     * - B: _, 1, 2, 4, 7, 8, G, L, M, P, U
     * - C: _, D
     * - D: 1, 2, 3, 4, 7, C
     * - E: _
     * - F: _
     * - G: _, 4, B, K
     * - H: _, 4
     * - J: _, 8, P
     * - K: 1, 2, 4, 7, 8, G
     * - L: _, 1, 2, 4, 7, B
     * - M: _, 1, 2, 4, 7, B
     * - N: _
     * - P: _, 1, 2, 4, B, J
     * - Q: _
     * - R: _
     * - S: _
     * - T: _
     * - U: _, B
     * - W: _, 6
     *             
     * (_ indicates no second distribution code)
     * 
     * (format: firstDistributionCode: availableSecondDistributionCodes)
     * @type {string}
     * @memberof Form1099R
     */
    secondDistributionCode?: Form1099RSecondDistributionCodeEnum;
    /**
     * IRA/SEP/SIMPLE
     * @type {boolean}
     * @memberof Form1099R
     */
    iraSepSimple?: boolean | null;
    /**
     * Traditional IRA/SEP/SIMPLE or Roth conversion amount
     * @type {number}
     * @memberof Form1099R
     */
    traditionalIraSepSimpleOrRothConversionAmount?: number | null;
    /**
     * Other amount
     * @type {number}
     * @memberof Form1099R
     */
    otherAmount?: number | null;
    /**
     * Other percentage
     * @type {string}
     * @memberof Form1099R
     */
    otherPercentage?: string | null;
    /**
     * Total distribution percentage
     * @type {string}
     * @memberof Form1099R
     */
    totalDistributionPercentage?: string | null;
    /**
     * Total employee contributions
     * @type {number}
     * @memberof Form1099R
     */
    totalEmployeeContributions?: number | null;
    /**
     * Amount allocable to IRR within 5 years
     * @type {number}
     * @memberof Form1099R
     */
    amountAllocableToIrrWithin5Years?: number | null;
    /**
     * First year of designated Roth contribution
     * @type {string}
     * @memberof Form1099R
     */
    firstYearOfDesignatedRothContribution?: string | null;
    /**
     * Date of payment
     * @type {Date}
     * @memberof Form1099R
     */
    dateOfPayment?: Date | null;
    /**
     * FATCA filing requirement.
     * @type {boolean}
     * @memberof Form1099R
     */
    fatcaFilingRequirement?: boolean | null;
    /**
     * Form type.
     * @type {string}
     * @memberof Form1099R
     */
    type: Form1099RTypeEnum;
    /**
     * Form ID. Unique identifier set when the record is created.
     * @type {string}
     * @memberof Form1099R
     */
    readonly id?: string | null;
    /**
     * Issuer ID - only required when creating forms
     * @type {string}
     * @memberof Form1099R
     */
    issuerId?: string | null;
    /**
     * Issuer Reference ID - only required when creating forms via $bulk-upsert
     * @type {string}
     * @memberof Form1099R
     */
    issuerReferenceId?: string | null;
    /**
     * Issuer TIN - readonly
     * @type {string}
     * @memberof Form1099R
     */
    issuerTin?: string | null;
    /**
     * Tax Year - only required when creating forms via $bulk-upsert
     * @type {number}
     * @memberof Form1099R
     */
    taxYear?: number | null;
    /**
     * Internal reference ID. Never shown to any agency or recipient.
     * @type {string}
     * @memberof Form1099R
     */
    referenceId?: string | null;
    /**
     * Recipient's Federal Tax Identification Number (TIN).
     * @type {string}
     * @memberof Form1099R
     */
    tin?: string | null;
    /**
     * Recipient name
     * @type {string}
     * @memberof Form1099R
     */
    recipientName: string | null;
    /**
     * Tax Identification Number (TIN) type.
     * 
     * Available values:
     * - EIN: Employer Identification Number
     * - SSN: Social Security Number
     * - ITIN: Individual Taxpayer Identification Number
     * - ATIN: Adoption Taxpayer Identification Number
     * @type {string}
     * @memberof Form1099R
     */
    tinType?: Form1099RTinTypeEnum;
    /**
     * Recipient second name
     * @type {string}
     * @memberof Form1099R
     */
    recipientSecondName?: string | null;
    /**
     * Address.
     * @type {string}
     * @memberof Form1099R
     */
    address: string | null;
    /**
     * Address line 2.
     * @type {string}
     * @memberof Form1099R
     */
    address2?: string | null;
    /**
     * City.
     * @type {string}
     * @memberof Form1099R
     */
    city: string | null;
    /**
     * Two-letter US state or Canadian province code (required for US/CA addresses).
     * @type {string}
     * @memberof Form1099R
     */
    state?: string | null;
    /**
     * ZIP/postal code.
     * @type {string}
     * @memberof Form1099R
     */
    zip?: string | null;
    /**
     * Recipient's Contact email address.
     * @type {string}
     * @memberof Form1099R
     */
    email?: string | null;
    /**
     * Account number
     * @type {string}
     * @memberof Form1099R
     */
    accountNumber?: string | null;
    /**
     * Office code
     * @type {string}
     * @memberof Form1099R
     */
    officeCode?: string | null;
    /**
     * Province or region for non-US/CA addresses.
     * @type {string}
     * @memberof Form1099R
     */
    nonUsProvince?: string | null;
    /**
     * Two-letter IRS country code (e.g., 'US', 'CA'), as defined at https://www.irs.gov/e-file-providers/country-codes.
     * @type {string}
     * @memberof Form1099R
     */
    countryCode: string | null;
    /**
     * Date when federal e-filing should be scheduled. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     * @type {Date}
     * @memberof Form1099R
     */
    federalEfileDate?: Date | null;
    /**
     * Boolean indicating that postal mailing to the recipient should be scheduled for this form
     * @type {boolean}
     * @memberof Form1099R
     */
    postalMail?: boolean | null;
    /**
     * Date when state e-filing should be scheduled. Must be on or after federalEfileDate. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     * @type {Date}
     * @memberof Form1099R
     */
    stateEfileDate?: Date | null;
    /**
     * Date when recipient e-delivery should be scheduled. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     * @type {Date}
     * @memberof Form1099R
     */
    recipientEdeliveryDate?: Date | null;
    /**
     * Boolean indicating that TIN Matching should be scheduled for this form
     * @type {boolean}
     * @memberof Form1099R
     */
    tinMatch?: boolean | null;
    /**
     * No TIN indicator
     * @type {boolean}
     * @memberof Form1099R
     */
    noTin?: boolean | null;
    /**
     * Boolean indicating that address verification should be scheduled for this form
     * @type {boolean}
     * @memberof Form1099R
     */
    addressVerification?: boolean | null;
    /**
     * State and local withholding information
     * @type {StateAndLocalWithholding}
     * @memberof Form1099R
     */
    stateAndLocalWithholding?: StateAndLocalWithholding | null;
    /**
     * Second TIN notice
     * @type {boolean}
     * @memberof Form1099R
     */
    secondTinNotice?: boolean | null;
    /**
     * Federal e-file status.
     * Available values:
     * - unscheduled: Form has not been scheduled for federal e-filing
     * - scheduled: Form is scheduled for federal e-filing
     * - airlock: Form is in process of being uploaded to the IRS (forms exist in this state for a very short period and cannot be updated while in this state)
     * - sent: Form has been sent to the IRS
     * - accepted: Form was accepted by the IRS
     * - corrected_scheduled: Correction is scheduled to be sent
     * - corrected_airlock: Correction is in process of being uploaded to the IRS (forms exist in this state for a very short period and cannot be updated while in this state)
     * - corrected: A correction has been sent to the IRS
     * - corrected_accepted: Correction was accepted by the IRS
     * - rejected: Form was rejected by the IRS
     * - corrected_rejected: Correction was rejected by the IRS
     * - held: Form is held and will not be submitted to IRS (used for certain forms submitted only to states)
     * @type {Form1099StatusDetail}
     * @memberof Form1099R
     */
    readonly federalEfileStatus?: Form1099StatusDetail | null;
    /**
     * State e-file status.
     * Available values:
     * - unscheduled: Form has not been scheduled for state e-filing
     * - scheduled: Form is scheduled for state e-filing
     * - airlocked: Form is in process of being uploaded to the state
     * - sent: Form has been sent to the state
     * - rejected: Form was rejected by the state
     * - accepted: Form was accepted by the state
     * - corrected_scheduled: Correction is scheduled to be sent
     * - corrected_airlocked: Correction is in process of being uploaded to the state
     * - corrected_sent: Correction has been sent to the state
     * - corrected_rejected: Correction was rejected by the state
     * - corrected_accepted: Correction was accepted by the state
     * @type {Array<StateEfileStatusDetail>}
     * @memberof Form1099R
     */
    readonly stateEfileStatus?: Array<StateEfileStatusDetail> | null;
    /**
     * Postal mail to recipient status.
     * Available values:
     * - unscheduled: Postal mail has not been scheduled
     * - pending: Postal mail is pending to be sent
     * - sent: Postal mail has been sent
     * - delivered: Postal mail has been delivered
     * @type {Form1099StatusDetail}
     * @memberof Form1099R
     */
    readonly postalMailStatus?: Form1099StatusDetail | null;
    /**
     * TIN Match status.
     * Available values:
     * - none: TIN matching has not been performed
     * - pending: TIN matching request is pending
     * - matched: Name/TIN combination matches IRS records
     * - unknown: TIN is missing, invalid, or request contains errors
     * - rejected: Name/TIN combination does not match IRS records or TIN not currently issued
     * @type {Form1099StatusDetail}
     * @memberof Form1099R
     */
    readonly tinMatchStatus?: Form1099StatusDetail | null;
    /**
     * Address verification status.
     * Available values:
     * - unknown: Address verification has not been checked
     * - pending: Address verification is in progress
     * - failed: Address verification failed
     * - incomplete: Address verification is incomplete
     * - unchanged: User declined address changes
     * - verified: Address has been verified and accepted
     * @type {Form1099StatusDetail}
     * @memberof Form1099R
     */
    readonly addressVerificationStatus?: Form1099StatusDetail | null;
    /**
     * EDelivery status.
     * Available values:
     * - unscheduled: E-delivery has not been scheduled
     * - scheduled: E-delivery is scheduled to be sent
     * - sent: E-delivery has been sent to recipient
     * - bounced: E-delivery bounced back (invalid email)
     * - refused: E-delivery was refused by recipient
     * - bad_verify: E-delivery failed verification
     * - accepted: E-delivery was accepted by recipient
     * - bad_verify_limit: E-delivery failed verification limit reached
     * - second_delivery: Second e-delivery attempt
     * - undelivered: E-delivery is undelivered (temporary state allowing resend)
     * @type {Form1099StatusDetail}
     * @memberof Form1099R
     */
    readonly eDeliveryStatus?: Form1099StatusDetail | null;
    /**
     * Validation errors
     * @type {Array<ValidationError>}
     * @memberof Form1099R
     */
    readonly validationErrors?: Array<ValidationError> | null;
    /**
     * Date time when the record was created.
     * @type {Date}
     * @memberof Form1099R
     */
    readonly createdAt?: Date;
    /**
     * Date time when the record was last updated.
     * @type {Date}
     * @memberof Form1099R
     */
    readonly updatedAt?: Date;
}

/**
* @export
* @enum {string}
*/
export enum Form1099RDistributionCodeEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3',
    _4 = '4',
    _5 = '5',
    _6 = '6',
    _7 = '7',
    _8 = '8',
    _9 = '9',
    A = 'A',
    B = 'B',
    C = 'C',
    D = 'D',
    E = 'E',
    F = 'F',
    G = 'G',
    H = 'H',
    J = 'J',
    K = 'K',
    L = 'L',
    M = 'M',
    N = 'N',
    P = 'P',
    Q = 'Q',
    R = 'R',
    S = 'S',
    T = 'T',
    U = 'U',
    W = 'W'
}/**
* @export
* @enum {string}
*/
export enum Form1099RSecondDistributionCodeEnum {
    _1 = '1',
    _2 = '2',
    _3 = '3',
    _4 = '4',
    _5 = '5',
    _6 = '6',
    _7 = '7',
    _8 = '8',
    _9 = '9',
    A = 'A',
    B = 'B',
    C = 'C',
    D = 'D',
    E = 'E',
    F = 'F',
    G = 'G',
    H = 'H',
    J = 'J',
    K = 'K',
    L = 'L',
    M = 'M',
    N = 'N',
    P = 'P',
    Q = 'Q',
    R = 'R',
    S = 'S',
    T = 'T',
    U = 'U',
    W = 'W'
}/**
* @export
* @enum {string}
*/
export enum Form1099RTypeEnum {
    Form1099Nec = 'Form1099Nec',
    Form1099Misc = 'Form1099Misc',
    Form1099Div = 'Form1099Div',
    Form1099R = 'Form1099R',
    Form1099K = 'Form1099K',
    Form1095B = 'Form1095B',
    Form1042S = 'Form1042S',
    Form1095C = 'Form1095C',
    Form1099Int = 'Form1099Int'
}/**
* @export
* @enum {string}
*/
export enum Form1099RTinTypeEnum {
    Ein = 'EIN',
    Ssn = 'SSN',
    Itin = 'ITIN',
    Atin = 'ATIN'
}

/**
 * Check if a given object implements the Form1099R interface.
 */
export function instanceOfForm1099R(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "distributionCode" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "recipientName" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "countryCode" in value;

    return isInstance;
}

export function Form1099RFromJSON(json: any): Form1099R {
    return Form1099RFromJSONTyped(json, false);
}

export function Form1099RFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1099R {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'grossDistribution': !exists(json, 'grossDistribution') ? undefined : json['grossDistribution'],
        'taxableAmount': !exists(json, 'taxableAmount') ? undefined : json['taxableAmount'],
        'taxableAmountNotDetermined': !exists(json, 'taxableAmountNotDetermined') ? undefined : json['taxableAmountNotDetermined'],
        'totalDistributionDetermined': !exists(json, 'totalDistributionDetermined') ? undefined : json['totalDistributionDetermined'],
        'capitalGain': !exists(json, 'capitalGain') ? undefined : json['capitalGain'],
        'federalIncomeTaxWithheld': !exists(json, 'federalIncomeTaxWithheld') ? undefined : json['federalIncomeTaxWithheld'],
        'employeeContributionsOrDesignatedRothOrInsurancePremiums': !exists(json, 'employeeContributionsOrDesignatedRothOrInsurancePremiums') ? undefined : json['employeeContributionsOrDesignatedRothOrInsurancePremiums'],
        'netUnrealizedAppreciationInEmployerSecurities': !exists(json, 'netUnrealizedAppreciationInEmployerSecurities') ? undefined : json['netUnrealizedAppreciationInEmployerSecurities'],
        'distributionCode': json['distributionCode'],
        'secondDistributionCode': !exists(json, 'secondDistributionCode') ? undefined : json['secondDistributionCode'],
        'iraSepSimple': !exists(json, 'iraSepSimple') ? undefined : json['iraSepSimple'],
        'traditionalIraSepSimpleOrRothConversionAmount': !exists(json, 'traditionalIraSepSimpleOrRothConversionAmount') ? undefined : json['traditionalIraSepSimpleOrRothConversionAmount'],
        'otherAmount': !exists(json, 'otherAmount') ? undefined : json['otherAmount'],
        'otherPercentage': !exists(json, 'otherPercentage') ? undefined : json['otherPercentage'],
        'totalDistributionPercentage': !exists(json, 'totalDistributionPercentage') ? undefined : json['totalDistributionPercentage'],
        'totalEmployeeContributions': !exists(json, 'totalEmployeeContributions') ? undefined : json['totalEmployeeContributions'],
        'amountAllocableToIrrWithin5Years': !exists(json, 'amountAllocableToIrrWithin5Years') ? undefined : json['amountAllocableToIrrWithin5Years'],
        'firstYearOfDesignatedRothContribution': !exists(json, 'firstYearOfDesignatedRothContribution') ? undefined : json['firstYearOfDesignatedRothContribution'],
        'dateOfPayment': !exists(json, 'dateOfPayment') ? undefined : (json['dateOfPayment'] === null ? null : new Date(json['dateOfPayment'])),
        'fatcaFilingRequirement': !exists(json, 'fatcaFilingRequirement') ? undefined : json['fatcaFilingRequirement'],
        'type': json['type'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'issuerId': !exists(json, 'issuerId') ? undefined : json['issuerId'],
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'recipientName': json['recipientName'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'address': json['address'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'nonUsProvince': !exists(json, 'nonUsProvince') ? undefined : json['nonUsProvince'],
        'countryCode': json['countryCode'],
        'federalEfileDate': !exists(json, 'federalEfileDate') ? undefined : (json['federalEfileDate'] === null ? null : new Date(json['federalEfileDate'])),
        'postalMail': !exists(json, 'postalMail') ? undefined : json['postalMail'],
        'stateEfileDate': !exists(json, 'stateEfileDate') ? undefined : (json['stateEfileDate'] === null ? null : new Date(json['stateEfileDate'])),
        'recipientEdeliveryDate': !exists(json, 'recipientEdeliveryDate') ? undefined : (json['recipientEdeliveryDate'] === null ? null : new Date(json['recipientEdeliveryDate'])),
        'tinMatch': !exists(json, 'tinMatch') ? undefined : json['tinMatch'],
        'noTin': !exists(json, 'noTin') ? undefined : json['noTin'],
        'addressVerification': !exists(json, 'addressVerification') ? undefined : json['addressVerification'],
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingFromJSON(json['stateAndLocalWithholding']),
        'secondTinNotice': !exists(json, 'secondTinNotice') ? undefined : json['secondTinNotice'],
        'federalEfileStatus': !exists(json, 'federalEfileStatus') ? undefined : Form1099StatusDetailFromJSON(json['federalEfileStatus']),
        'stateEfileStatus': !exists(json, 'stateEfileStatus') ? undefined : (json['stateEfileStatus'] === null ? null : (json['stateEfileStatus'] as Array<any>)?.map(StateEfileStatusDetailFromJSON)),
        'postalMailStatus': !exists(json, 'postalMailStatus') ? undefined : Form1099StatusDetailFromJSON(json['postalMailStatus']),
        'tinMatchStatus': !exists(json, 'tinMatchStatus') ? undefined : Form1099StatusDetailFromJSON(json['tinMatchStatus']),
        'addressVerificationStatus': !exists(json, 'addressVerificationStatus') ? undefined : Form1099StatusDetailFromJSON(json['addressVerificationStatus']),
        'eDeliveryStatus': !exists(json, 'eDeliveryStatus') ? undefined : Form1099StatusDetailFromJSON(json['eDeliveryStatus']),
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>)?.map(ValidationErrorFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function Form1099RToJSON(value?: Form1099R | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'grossDistribution': value.grossDistribution,
        'taxableAmount': value.taxableAmount,
        'taxableAmountNotDetermined': value.taxableAmountNotDetermined,
        'totalDistributionDetermined': value.totalDistributionDetermined,
        'capitalGain': value.capitalGain,
        'federalIncomeTaxWithheld': value.federalIncomeTaxWithheld,
        'employeeContributionsOrDesignatedRothOrInsurancePremiums': value.employeeContributionsOrDesignatedRothOrInsurancePremiums,
        'netUnrealizedAppreciationInEmployerSecurities': value.netUnrealizedAppreciationInEmployerSecurities,
        'distributionCode': value.distributionCode,
        'secondDistributionCode': value.secondDistributionCode,
        'iraSepSimple': value.iraSepSimple,
        'traditionalIraSepSimpleOrRothConversionAmount': value.traditionalIraSepSimpleOrRothConversionAmount,
        'otherAmount': value.otherAmount,
        'otherPercentage': value.otherPercentage,
        'totalDistributionPercentage': value.totalDistributionPercentage,
        'totalEmployeeContributions': value.totalEmployeeContributions,
        'amountAllocableToIrrWithin5Years': value.amountAllocableToIrrWithin5Years,
        'firstYearOfDesignatedRothContribution': value.firstYearOfDesignatedRothContribution,
        'dateOfPayment': value.dateOfPayment === undefined ? undefined : (value.dateOfPayment === null ? null : value.dateOfPayment.toISOString().substr(0,10)),
        'fatcaFilingRequirement': value.fatcaFilingRequirement,
        'type': value.type,
        'issuerId': value.issuerId,
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'referenceId': value.referenceId,
        'tin': value.tin,
        'recipientName': value.recipientName,
        'tinType': value.tinType,
        'recipientSecondName': value.recipientSecondName,
        'address': value.address,
        'address2': value.address2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'email': value.email,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'nonUsProvince': value.nonUsProvince,
        'countryCode': value.countryCode,
        'federalEfileDate': value.federalEfileDate === undefined ? undefined : (value.federalEfileDate === null ? null : value.federalEfileDate.toISOString().substr(0,10)),
        'postalMail': value.postalMail,
        'stateEfileDate': value.stateEfileDate === undefined ? undefined : (value.stateEfileDate === null ? null : value.stateEfileDate.toISOString().substr(0,10)),
        'recipientEdeliveryDate': value.recipientEdeliveryDate === undefined ? undefined : (value.recipientEdeliveryDate === null ? null : value.recipientEdeliveryDate.toISOString().substr(0,10)),
        'tinMatch': value.tinMatch,
        'noTin': value.noTin,
        'addressVerification': value.addressVerification,
        'stateAndLocalWithholding': StateAndLocalWithholdingToJSON(value.stateAndLocalWithholding),
        'secondTinNotice': value.secondTinNotice,
    };
}
