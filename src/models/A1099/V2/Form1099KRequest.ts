/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Use **username/password** or generate a **license key** from: *Avalara Portal ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    StateAndLocalWithholdingRequest,
    StateAndLocalWithholdingRequestFromJSON,
    StateAndLocalWithholdingRequestFromJSONTyped,
    StateAndLocalWithholdingRequestToJSON,
} from './StateAndLocalWithholdingRequest';

/**
 * 
 * @export
 * @interface Form1099KRequest
 */
export interface Form1099KRequest {
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    filerType?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    paymentType?: number;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    paymentSettlementEntityNamePhoneNumber?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    grossAmountPaymentCard?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    cardNotPresentTransactions?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    merchantCategoryCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    paymentTransactionNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    federalIncomeTaxWithheld?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    january?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    february?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    march?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    april?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    may?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    june?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    july?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    august?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    sept?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    october?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    november?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Form1099KRequest
     */
    december?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    readonly type?: Form1099KRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    issuerId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    referenceId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    recipientName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    recipientTin?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    tinType?: Form1099KRequestTinTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    recipientSecondName?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    address2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    zip?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    recipientEmail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    accountNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    officeCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    recipientNonUsProvince?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Form1099KRequest
     */
    countryCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099KRequest
     */
    federalEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099KRequest
     */
    postalMail?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099KRequest
     */
    stateEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099KRequest
     */
    tinMatch?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099KRequest
     */
    addressVerification?: boolean;
    /**
     * 
     * @type {StateAndLocalWithholdingRequest}
     * @memberof Form1099KRequest
     */
    stateAndLocalWithholding?: StateAndLocalWithholdingRequest;
}

/**
* @export
* @enum {string}
*/
export enum Form1099KRequestTypeEnum {
    Form1099Nec = 'Form1099Nec',
    Form1099Misc = 'Form1099Misc',
    Form1099Div = 'Form1099Div',
    Form1099R = 'Form1099R',
    Form1099K = 'Form1099K',
    Form1095B = 'Form1095B'
}/**
* @export
* @enum {string}
*/
export enum Form1099KRequestTinTypeEnum {
    Ein = 'EIN',
    Ssn = 'SSN',
    Itin = 'ITIN',
    Atin = 'ATIN'
}

/**
 * Check if a given object implements the Form1099KRequest interface.
 */
export function instanceOfForm1099KRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function Form1099KRequestFromJSON(json: any): Form1099KRequest {
    return Form1099KRequestFromJSONTyped(json, false);
}

export function Form1099KRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1099KRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'filerType': !exists(json, 'filerType') ? undefined : json['filerType'],
        'paymentType': !exists(json, 'paymentType') ? undefined : json['paymentType'],
        'paymentSettlementEntityNamePhoneNumber': !exists(json, 'paymentSettlementEntityNamePhoneNumber') ? undefined : json['paymentSettlementEntityNamePhoneNumber'],
        'grossAmountPaymentCard': !exists(json, 'grossAmountPaymentCard') ? undefined : json['grossAmountPaymentCard'],
        'cardNotPresentTransactions': !exists(json, 'cardNotPresentTransactions') ? undefined : json['cardNotPresentTransactions'],
        'merchantCategoryCode': !exists(json, 'merchantCategoryCode') ? undefined : json['merchantCategoryCode'],
        'paymentTransactionNumber': !exists(json, 'paymentTransactionNumber') ? undefined : json['paymentTransactionNumber'],
        'federalIncomeTaxWithheld': !exists(json, 'federalIncomeTaxWithheld') ? undefined : json['federalIncomeTaxWithheld'],
        'january': !exists(json, 'january') ? undefined : json['january'],
        'february': !exists(json, 'february') ? undefined : json['february'],
        'march': !exists(json, 'march') ? undefined : json['march'],
        'april': !exists(json, 'april') ? undefined : json['april'],
        'may': !exists(json, 'may') ? undefined : json['may'],
        'june': !exists(json, 'june') ? undefined : json['june'],
        'july': !exists(json, 'july') ? undefined : json['july'],
        'august': !exists(json, 'august') ? undefined : json['august'],
        'sept': !exists(json, 'sept') ? undefined : json['sept'],
        'october': !exists(json, 'october') ? undefined : json['october'],
        'november': !exists(json, 'november') ? undefined : json['november'],
        'december': !exists(json, 'december') ? undefined : json['december'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'issuerId': !exists(json, 'issuerId') ? undefined : json['issuerId'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'recipientName': !exists(json, 'recipientName') ? undefined : json['recipientName'],
        'recipientTin': !exists(json, 'recipientTin') ? undefined : json['recipientTin'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'recipientEmail': !exists(json, 'recipientEmail') ? undefined : json['recipientEmail'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'recipientNonUsProvince': !exists(json, 'recipientNonUsProvince') ? undefined : json['recipientNonUsProvince'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'federalEFile': !exists(json, 'federalEFile') ? undefined : json['federalEFile'],
        'postalMail': !exists(json, 'postalMail') ? undefined : json['postalMail'],
        'stateEFile': !exists(json, 'stateEFile') ? undefined : json['stateEFile'],
        'tinMatch': !exists(json, 'tinMatch') ? undefined : json['tinMatch'],
        'addressVerification': !exists(json, 'addressVerification') ? undefined : json['addressVerification'],
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingRequestFromJSON(json['stateAndLocalWithholding']),
    };
}

export function Form1099KRequestToJSON(value?: Form1099KRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'filerType': value.filerType,
        'paymentType': value.paymentType,
        'paymentSettlementEntityNamePhoneNumber': value.paymentSettlementEntityNamePhoneNumber,
        'grossAmountPaymentCard': value.grossAmountPaymentCard,
        'cardNotPresentTransactions': value.cardNotPresentTransactions,
        'merchantCategoryCode': value.merchantCategoryCode,
        'paymentTransactionNumber': value.paymentTransactionNumber,
        'federalIncomeTaxWithheld': value.federalIncomeTaxWithheld,
        'january': value.january,
        'february': value.february,
        'march': value.march,
        'april': value.april,
        'may': value.may,
        'june': value.june,
        'july': value.july,
        'august': value.august,
        'sept': value.sept,
        'october': value.october,
        'november': value.november,
        'december': value.december,
        'issuerId': value.issuerId,
        'referenceId': value.referenceId,
        'recipientName': value.recipientName,
        'recipientTin': value.recipientTin,
        'tinType': value.tinType,
        'recipientSecondName': value.recipientSecondName,
        'address': value.address,
        'address2': value.address2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'recipientEmail': value.recipientEmail,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'recipientNonUsProvince': value.recipientNonUsProvince,
        'countryCode': value.countryCode,
        'federalEFile': value.federalEFile,
        'postalMail': value.postalMail,
        'stateEFile': value.stateEFile,
        'tinMatch': value.tinMatch,
        'addressVerification': value.addressVerification,
        'stateAndLocalWithholding': StateAndLocalWithholdingRequestToJSON(value.stateAndLocalWithholding),
    };
}
