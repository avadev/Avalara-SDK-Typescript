/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Use **username/password** or generate a **license key** from: *Avalara Portal ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    StateAndLocalWithholdingRequest,
    StateAndLocalWithholdingRequestFromJSON,
    StateAndLocalWithholdingRequestFromJSONTyped,
    StateAndLocalWithholdingRequestToJSON,
} from './StateAndLocalWithholdingRequest';

/**
 * 
 * @export
 * @interface Form1099MiscRequest
 */
export interface Form1099MiscRequest {
    /**
     * 
     * @type {StateAndLocalWithholdingRequest}
     * @memberof Form1099MiscRequest
     */
    stateAndLocalWithholding?: StateAndLocalWithholdingRequest;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscRequest
     */
    secondTinNotice?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    rents?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    royalties?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    otherIncome?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    fedIncomeTaxWithheld?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    fishingBoatProceeds?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    medicalHealthCarePayments?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscRequest
     */
    payerMadeDirectSales?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    substitutePayments?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    cropInsuranceProceeds?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    grossProceedsPaidToAttorney?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    fishPurchasedForResale?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    section409ADeferrals?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscRequest
     */
    fatcaFilingRequirement?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    excessGoldenParachutePayments?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    nonqualifiedDeferredCompensation?: number;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    issuerId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    issuerReferenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    issuerTin?: string;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    taxYear?: number;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    referenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    recipientName?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    recipientTin?: string;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscRequest
     */
    tinType?: number;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    recipientSecondName?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    streetAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    streetAddressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    zip?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    recipientEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    accountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    officeCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    recipientNonUsProvince?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscRequest
     */
    countryCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscRequest
     */
    federalEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscRequest
     */
    postalMail?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscRequest
     */
    stateEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscRequest
     */
    tinMatch?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscRequest
     */
    addressVerification?: boolean;
}



/**
 * Check if a given object implements the Form1099MiscRequest interface.
 */
export function instanceOfForm1099MiscRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function Form1099MiscRequestFromJSON(json: any): Form1099MiscRequest {
    return Form1099MiscRequestFromJSONTyped(json, false);
}

export function Form1099MiscRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1099MiscRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingRequestFromJSON(json['stateAndLocalWithholding']),
        'secondTinNotice': !exists(json, 'secondTinNotice') ? undefined : json['secondTinNotice'],
        'rents': !exists(json, 'rents') ? undefined : json['rents'],
        'royalties': !exists(json, 'royalties') ? undefined : json['royalties'],
        'otherIncome': !exists(json, 'otherIncome') ? undefined : json['otherIncome'],
        'fedIncomeTaxWithheld': !exists(json, 'fedIncomeTaxWithheld') ? undefined : json['fedIncomeTaxWithheld'],
        'fishingBoatProceeds': !exists(json, 'fishingBoatProceeds') ? undefined : json['fishingBoatProceeds'],
        'medicalHealthCarePayments': !exists(json, 'medicalHealthCarePayments') ? undefined : json['medicalHealthCarePayments'],
        'payerMadeDirectSales': !exists(json, 'payerMadeDirectSales') ? undefined : json['payerMadeDirectSales'],
        'substitutePayments': !exists(json, 'substitutePayments') ? undefined : json['substitutePayments'],
        'cropInsuranceProceeds': !exists(json, 'cropInsuranceProceeds') ? undefined : json['cropInsuranceProceeds'],
        'grossProceedsPaidToAttorney': !exists(json, 'grossProceedsPaidToAttorney') ? undefined : json['grossProceedsPaidToAttorney'],
        'fishPurchasedForResale': !exists(json, 'fishPurchasedForResale') ? undefined : json['fishPurchasedForResale'],
        'section409ADeferrals': !exists(json, 'section409ADeferrals') ? undefined : json['section409ADeferrals'],
        'fatcaFilingRequirement': !exists(json, 'fatcaFilingRequirement') ? undefined : json['fatcaFilingRequirement'],
        'excessGoldenParachutePayments': !exists(json, 'excessGoldenParachutePayments') ? undefined : json['excessGoldenParachutePayments'],
        'nonqualifiedDeferredCompensation': !exists(json, 'nonqualifiedDeferredCompensation') ? undefined : json['nonqualifiedDeferredCompensation'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'issuerId': !exists(json, 'issuerId') ? undefined : json['issuerId'],
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'recipientName': !exists(json, 'recipientName') ? undefined : json['recipientName'],
        'recipientTin': !exists(json, 'recipientTin') ? undefined : json['recipientTin'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'streetAddress': !exists(json, 'streetAddress') ? undefined : json['streetAddress'],
        'streetAddressLine2': !exists(json, 'streetAddressLine2') ? undefined : json['streetAddressLine2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'recipientEmail': !exists(json, 'recipientEmail') ? undefined : json['recipientEmail'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'recipientNonUsProvince': !exists(json, 'recipientNonUsProvince') ? undefined : json['recipientNonUsProvince'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'federalEFile': !exists(json, 'federalEFile') ? undefined : json['federalEFile'],
        'postalMail': !exists(json, 'postalMail') ? undefined : json['postalMail'],
        'stateEFile': !exists(json, 'stateEFile') ? undefined : json['stateEFile'],
        'tinMatch': !exists(json, 'tinMatch') ? undefined : json['tinMatch'],
        'addressVerification': !exists(json, 'addressVerification') ? undefined : json['addressVerification'],
    };
}

export function Form1099MiscRequestToJSON(value?: Form1099MiscRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stateAndLocalWithholding': StateAndLocalWithholdingRequestToJSON(value.stateAndLocalWithholding),
        'secondTinNotice': value.secondTinNotice,
        'rents': value.rents,
        'royalties': value.royalties,
        'otherIncome': value.otherIncome,
        'fedIncomeTaxWithheld': value.fedIncomeTaxWithheld,
        'fishingBoatProceeds': value.fishingBoatProceeds,
        'medicalHealthCarePayments': value.medicalHealthCarePayments,
        'payerMadeDirectSales': value.payerMadeDirectSales,
        'substitutePayments': value.substitutePayments,
        'cropInsuranceProceeds': value.cropInsuranceProceeds,
        'grossProceedsPaidToAttorney': value.grossProceedsPaidToAttorney,
        'fishPurchasedForResale': value.fishPurchasedForResale,
        'section409ADeferrals': value.section409ADeferrals,
        'fatcaFilingRequirement': value.fatcaFilingRequirement,
        'excessGoldenParachutePayments': value.excessGoldenParachutePayments,
        'nonqualifiedDeferredCompensation': value.nonqualifiedDeferredCompensation,
        'type': value.type,
        'issuerId': value.issuerId,
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'referenceId': value.referenceId,
        'recipientName': value.recipientName,
        'recipientTin': value.recipientTin,
        'tinType': value.tinType,
        'recipientSecondName': value.recipientSecondName,
        'streetAddress': value.streetAddress,
        'streetAddressLine2': value.streetAddressLine2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'recipientEmail': value.recipientEmail,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'recipientNonUsProvince': value.recipientNonUsProvince,
        'countryCode': value.countryCode,
        'federalEFile': value.federalEFile,
        'postalMail': value.postalMail,
        'stateEFile': value.stateEFile,
        'tinMatch': value.tinMatch,
        'addressVerification': value.addressVerification,
    };
}
