/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * Covered individual information for health coverage forms
 * @export
 * @interface CoveredIndividual
 */
export interface CoveredIndividual {
    /**
     * Covered individual's ID
     * @type {string}
     * @memberof CoveredIndividual
     */
    readonly id?: string | null;
    /**
     * Covered individual's first name
     * @type {string}
     * @memberof CoveredIndividual
     */
    firstName: string | null;
    /**
     * Covered individual's middle name
     * @type {string}
     * @memberof CoveredIndividual
     */
    middleName?: string | null;
    /**
     * Covered individual's last name
     * @type {string}
     * @memberof CoveredIndividual
     */
    lastName: string | null;
    /**
     * Covered individual's name suffix
     * @type {string}
     * @memberof CoveredIndividual
     */
    nameSuffix?: string | null;
    /**
     * Covered individual's Federal Tax Identification Number (TIN).. SSN or ITIN. Required unless unavailable.
     * @type {string}
     * @memberof CoveredIndividual
     */
    tin?: string | null;
    /**
     * Covered individual's date of birth - Required when SSN is missing.
     * @type {Date}
     * @memberof CoveredIndividual
     */
    birthDate?: Date | null;
    /**
     * Coverage indicator for all 12 months
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredAllMonths?: boolean | null;
    /**
     * Coverage indicator for January
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredJanuary?: boolean | null;
    /**
     * Coverage indicator for February
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredFebruary?: boolean | null;
    /**
     * Coverage indicator for March
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredMarch?: boolean | null;
    /**
     * Coverage indicator for April
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredApril?: boolean | null;
    /**
     * Coverage indicator for May
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredMay?: boolean | null;
    /**
     * Coverage indicator for June
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredJune?: boolean | null;
    /**
     * Coverage indicator for July
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredJuly?: boolean | null;
    /**
     * Coverage indicator for August
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredAugust?: boolean | null;
    /**
     * Coverage indicator for September
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredSeptember?: boolean | null;
    /**
     * Coverage indicator for October
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredOctober?: boolean | null;
    /**
     * Coverage indicator for November
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredNovember?: boolean | null;
    /**
     * Coverage indicator for December
     * @type {boolean}
     * @memberof CoveredIndividual
     */
    coveredDecember?: boolean | null;
}



/**
 * Check if a given object implements the CoveredIndividual interface.
 */
export function instanceOfCoveredIndividual(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "lastName" in value;

    return isInstance;
}

export function CoveredIndividualFromJSON(json: any): CoveredIndividual {
    return CoveredIndividualFromJSONTyped(json, false);
}

export function CoveredIndividualFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoveredIndividual {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'firstName': json['firstName'],
        'middleName': !exists(json, 'middleName') ? undefined : json['middleName'],
        'lastName': json['lastName'],
        'nameSuffix': !exists(json, 'nameSuffix') ? undefined : json['nameSuffix'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'birthDate': !exists(json, 'birthDate') ? undefined : (json['birthDate'] === null ? null : new Date(json['birthDate'])),
        'coveredAllMonths': !exists(json, 'coveredAllMonths') ? undefined : json['coveredAllMonths'],
        'coveredJanuary': !exists(json, 'coveredJanuary') ? undefined : json['coveredJanuary'],
        'coveredFebruary': !exists(json, 'coveredFebruary') ? undefined : json['coveredFebruary'],
        'coveredMarch': !exists(json, 'coveredMarch') ? undefined : json['coveredMarch'],
        'coveredApril': !exists(json, 'coveredApril') ? undefined : json['coveredApril'],
        'coveredMay': !exists(json, 'coveredMay') ? undefined : json['coveredMay'],
        'coveredJune': !exists(json, 'coveredJune') ? undefined : json['coveredJune'],
        'coveredJuly': !exists(json, 'coveredJuly') ? undefined : json['coveredJuly'],
        'coveredAugust': !exists(json, 'coveredAugust') ? undefined : json['coveredAugust'],
        'coveredSeptember': !exists(json, 'coveredSeptember') ? undefined : json['coveredSeptember'],
        'coveredOctober': !exists(json, 'coveredOctober') ? undefined : json['coveredOctober'],
        'coveredNovember': !exists(json, 'coveredNovember') ? undefined : json['coveredNovember'],
        'coveredDecember': !exists(json, 'coveredDecember') ? undefined : json['coveredDecember'],
    };
}

export function CoveredIndividualToJSON(value?: CoveredIndividual | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'firstName': value.firstName,
        'middleName': value.middleName,
        'lastName': value.lastName,
        'nameSuffix': value.nameSuffix,
        'tin': value.tin,
        'birthDate': value.birthDate === undefined ? undefined : (value.birthDate === null ? null : value.birthDate.toISOString().substr(0,10)),
        'coveredAllMonths': value.coveredAllMonths,
        'coveredJanuary': value.coveredJanuary,
        'coveredFebruary': value.coveredFebruary,
        'coveredMarch': value.coveredMarch,
        'coveredApril': value.coveredApril,
        'coveredMay': value.coveredMay,
        'coveredJune': value.coveredJune,
        'coveredJuly': value.coveredJuly,
        'coveredAugust': value.coveredAugust,
        'coveredSeptember': value.coveredSeptember,
        'coveredOctober': value.coveredOctober,
        'coveredNovember': value.coveredNovember,
        'coveredDecember': value.coveredDecember,
    };
}
