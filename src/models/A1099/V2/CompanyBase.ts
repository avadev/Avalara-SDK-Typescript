/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * 
 * @export
 * @interface CompanyBase
 */
export interface CompanyBase {
    /**
     * Legal name. Not the DBA name.
     * @type {string}
     * @memberof CompanyBase
     */
    name: string | null;
    /**
     * Doing Business As (DBA) name or continuation of a long legal name.
     * @type {string}
     * @memberof CompanyBase
     */
    dbaName?: string | null;
    /**
     * Contact email address. For inquiries by vendors/employees.
     * @type {string}
     * @memberof CompanyBase
     */
    email: string | null;
    /**
     * Address.
     * @type {string}
     * @memberof CompanyBase
     */
    address: string | null;
    /**
     * City.
     * @type {string}
     * @memberof CompanyBase
     */
    city: string | null;
    /**
     * Two-letter US state or Canadian province code (required for US/CA addresses).
     * @type {string}
     * @memberof CompanyBase
     */
    state?: string | null;
    /**
     * ZIP/postal code.
     * @type {string}
     * @memberof CompanyBase
     */
    zip: string | null;
    /**
     * Contact phone number (must contain at least 10 digits, max 15 characters).
     * @type {string}
     * @memberof CompanyBase
     */
    telephone: string | null;
    /**
     * Federal Tax Identification Number (TIN). EIN/Tax ID (required for US companies).
     * @type {string}
     * @memberof CompanyBase
     */
    tin: string | null;
    /**
     * Internal reference ID. Never shown to any agency or recipient.
     * @type {string}
     * @memberof CompanyBase
     */
    referenceId?: string | null;
    /**
     * Indicates whether the company authorizes IRS TIN matching.
     * @type {boolean}
     * @memberof CompanyBase
     */
    doTinMatch?: boolean | null;
    /**
     * Group name for organizing companies (creates or finds group by name).
     * @type {string}
     * @memberof CompanyBase
     */
    groupName?: string | null;
    /**
     * Province or region for non-US/CA addresses.
     * @type {string}
     * @memberof CompanyBase
     */
    foreignProvince?: string | null;
    /**
     * Two-letter IRS country code (e.g., 'US', 'CA'), as defined at https://www.irs.gov/e-file-providers/country-codes.
     * @type {string}
     * @memberof CompanyBase
     */
    countryCode: string | null;
    /**
     * Boolean to enable automatic reminder emails (default: false).
     * @type {boolean}
     * @memberof CompanyBase
     */
    resendRequests?: boolean | null;
    /**
     * Days between reminder emails (7-365, required if resendRequests is true).
     * @type {number}
     * @memberof CompanyBase
     */
    resendIntervalDays?: number | null;
    /**
     * Maximum number of reminder attempts (1-52, required if resendRequests is true).
     * @type {number}
     * @memberof CompanyBase
     */
    maxReminderAttempts?: number | null;
}



/**
 * Check if a given object implements the CompanyBase interface.
 */
export function instanceOfCompanyBase(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "zip" in value;
    isInstance = isInstance && "telephone" in value;
    isInstance = isInstance && "tin" in value;
    isInstance = isInstance && "countryCode" in value;

    return isInstance;
}

export function CompanyBaseFromJSON(json: any): CompanyBase {
    return CompanyBaseFromJSONTyped(json, false);
}

export function CompanyBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompanyBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'dbaName': !exists(json, 'dbaName') ? undefined : json['dbaName'],
        'email': json['email'],
        'address': json['address'],
        'city': json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': json['zip'],
        'telephone': json['telephone'],
        'tin': json['tin'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'doTinMatch': !exists(json, 'doTinMatch') ? undefined : json['doTinMatch'],
        'groupName': !exists(json, 'groupName') ? undefined : json['groupName'],
        'foreignProvince': !exists(json, 'foreignProvince') ? undefined : json['foreignProvince'],
        'countryCode': json['countryCode'],
        'resendRequests': !exists(json, 'resendRequests') ? undefined : json['resendRequests'],
        'resendIntervalDays': !exists(json, 'resendIntervalDays') ? undefined : json['resendIntervalDays'],
        'maxReminderAttempts': !exists(json, 'maxReminderAttempts') ? undefined : json['maxReminderAttempts'],
    };
}

export function CompanyBaseToJSON(value?: CompanyBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'dbaName': value.dbaName,
        'email': value.email,
        'address': value.address,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'telephone': value.telephone,
        'tin': value.tin,
        'referenceId': value.referenceId,
        'doTinMatch': value.doTinMatch,
        'groupName': value.groupName,
        'foreignProvince': value.foreignProvince,
        'countryCode': value.countryCode,
        'resendRequests': value.resendRequests,
        'resendIntervalDays': value.resendIntervalDays,
        'maxReminderAttempts': value.maxReminderAttempts,
    };
}
