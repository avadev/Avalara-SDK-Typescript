/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Use **username/password** or generate a **license key** from: *Avalara Portal ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    StateAndLocalWithholding,
    StateAndLocalWithholdingFromJSON,
    StateAndLocalWithholdingFromJSONTyped,
    StateAndLocalWithholdingToJSON,
} from './StateAndLocalWithholding';

/**
 * 
 * @export
 * @interface Form1099RListItem
 */
export interface Form1099RListItem {
    /**
     * 
     * @type {StateAndLocalWithholding}
     * @memberof Form1099RListItem
     */
    stateAndLocalWithholding?: StateAndLocalWithholding;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    grossDistribution?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    taxableAmount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RListItem
     */
    taxableAmountNotDetermined?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RListItem
     */
    totalDistributionDetermined?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    capitalGain?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    federalIncomeTaxWithheld?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    employeeContributionsOrDesignatedRothOrInsurancePremiums?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    netUnrealizedAppreciationInEmployerSecurities?: number;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    distributionCode?: Form1099RListItemDistributionCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    secondDistributionCode?: Form1099RListItemSecondDistributionCodeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RListItem
     */
    iraSepSimple?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    traditionalIraSepSimpleOrRothConversionAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    otherAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    otherPercentage?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    totalDistributionPercentage?: string;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    totalEmployeeContributions?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    amountAllocableToIrrWithin5Years?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    firstYearOfDesignatedRothContribution?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RListItem
     */
    fatcaFilingRequirement?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Form1099RListItem
     */
    dateOfPayment?: Date;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    issuerId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    issuerReferenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    issuerTin?: string;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    taxYear?: number;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    referenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    recipientName?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    recipientTin?: string;
    /**
     * 
     * @type {number}
     * @memberof Form1099RListItem
     */
    tinType?: number;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    recipientSecondName?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    streetAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    streetAddressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    zip?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    recipientEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    accountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    officeCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    recipientNonUsProvince?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RListItem
     */
    countryCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RListItem
     */
    federalEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RListItem
     */
    postalMail?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RListItem
     */
    stateEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RListItem
     */
    tinMatch?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RListItem
     */
    addressVerification?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum Form1099RListItemDistributionCodeEnum {
    EarlyDistributionNoException = 'EarlyDistributionNoException',
    EarlyDistributionWithException = 'EarlyDistributionWithException',
    Disability = 'Disability',
    Death = 'Death',
    ProhibitedTransaction = 'ProhibitedTransaction',
    Section1035Exchange = 'Section1035Exchange',
    NormalDistribution = 'NormalDistribution',
    ExcessContributionsCurrentYear = 'ExcessContributionsCurrentYear',
    CurrentLifeInsuranceProtectionCost = 'CurrentLifeInsuranceProtectionCost',
    TenYearTaxOption = 'TenYearTaxOption',
    DesignatedRothDistribution = 'DesignatedRothDistribution',
    ReportableDeathBenefits = 'ReportableDeathBenefits',
    NonqualifiedAnnuityPayments = 'NonqualifiedAnnuityPayments',
    EpcrsDistribution = 'EPCRSDistribution',
    CharitableGiftAnnuity = 'CharitableGiftAnnuity',
    DirectRollover = 'DirectRollover',
    RothAccountToIraDirectRollover = 'RothAccountToIRADirectRollover',
    EarlyRothIraDistribution = 'EarlyRothIRADistribution',
    IraAssetsNoFmv = 'IRAAssetsNoFMV',
    LoansDeemedDistributions = 'LoansDeemedDistributions',
    QualifiedPlanLoanOffsets = 'QualifiedPlanLoanOffsets',
    RecharacterizedIraNextYear = 'RecharacterizedIRANextYear',
    ExcessContributionsPreviousYear = 'ExcessContributionsPreviousYear',
    QualifiedRothIraDistribution = 'QualifiedRothIRADistribution',
    RecharacterizedIraPreviousYear = 'RecharacterizedIRAPreviousYear',
    EarlySimpleIraDistribution = 'EarlySimpleIRADistribution',
    RothIraDistributionException = 'RothIRADistributionException',
    EsopDistribution = 'ESOPDistribution',
    LongTermCareInsurance = 'LongTermCareInsurance'
}/**
* @export
* @enum {string}
*/
export enum Form1099RListItemSecondDistributionCodeEnum {
    EarlyDistributionNoException = 'EarlyDistributionNoException',
    EarlyDistributionWithException = 'EarlyDistributionWithException',
    Disability = 'Disability',
    Death = 'Death',
    ProhibitedTransaction = 'ProhibitedTransaction',
    Section1035Exchange = 'Section1035Exchange',
    NormalDistribution = 'NormalDistribution',
    ExcessContributionsCurrentYear = 'ExcessContributionsCurrentYear',
    CurrentLifeInsuranceProtectionCost = 'CurrentLifeInsuranceProtectionCost',
    TenYearTaxOption = 'TenYearTaxOption',
    DesignatedRothDistribution = 'DesignatedRothDistribution',
    ReportableDeathBenefits = 'ReportableDeathBenefits',
    NonqualifiedAnnuityPayments = 'NonqualifiedAnnuityPayments',
    EpcrsDistribution = 'EPCRSDistribution',
    CharitableGiftAnnuity = 'CharitableGiftAnnuity',
    DirectRollover = 'DirectRollover',
    RothAccountToIraDirectRollover = 'RothAccountToIRADirectRollover',
    EarlyRothIraDistribution = 'EarlyRothIRADistribution',
    IraAssetsNoFmv = 'IRAAssetsNoFMV',
    LoansDeemedDistributions = 'LoansDeemedDistributions',
    QualifiedPlanLoanOffsets = 'QualifiedPlanLoanOffsets',
    RecharacterizedIraNextYear = 'RecharacterizedIRANextYear',
    ExcessContributionsPreviousYear = 'ExcessContributionsPreviousYear',
    QualifiedRothIraDistribution = 'QualifiedRothIRADistribution',
    RecharacterizedIraPreviousYear = 'RecharacterizedIRAPreviousYear',
    EarlySimpleIraDistribution = 'EarlySimpleIRADistribution',
    RothIraDistributionException = 'RothIRADistributionException',
    EsopDistribution = 'ESOPDistribution',
    LongTermCareInsurance = 'LongTermCareInsurance'
}

/**
 * Check if a given object implements the Form1099RListItem interface.
 */
export function instanceOfForm1099RListItem(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function Form1099RListItemFromJSON(json: any): Form1099RListItem {
    return Form1099RListItemFromJSONTyped(json, false);
}

export function Form1099RListItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1099RListItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingFromJSON(json['stateAndLocalWithholding']),
        'grossDistribution': !exists(json, 'grossDistribution') ? undefined : json['grossDistribution'],
        'taxableAmount': !exists(json, 'taxableAmount') ? undefined : json['taxableAmount'],
        'taxableAmountNotDetermined': !exists(json, 'taxableAmountNotDetermined') ? undefined : json['taxableAmountNotDetermined'],
        'totalDistributionDetermined': !exists(json, 'totalDistributionDetermined') ? undefined : json['totalDistributionDetermined'],
        'capitalGain': !exists(json, 'capitalGain') ? undefined : json['capitalGain'],
        'federalIncomeTaxWithheld': !exists(json, 'federalIncomeTaxWithheld') ? undefined : json['federalIncomeTaxWithheld'],
        'employeeContributionsOrDesignatedRothOrInsurancePremiums': !exists(json, 'employeeContributionsOrDesignatedRothOrInsurancePremiums') ? undefined : json['employeeContributionsOrDesignatedRothOrInsurancePremiums'],
        'netUnrealizedAppreciationInEmployerSecurities': !exists(json, 'netUnrealizedAppreciationInEmployerSecurities') ? undefined : json['netUnrealizedAppreciationInEmployerSecurities'],
        'distributionCode': !exists(json, 'distributionCode') ? undefined : json['distributionCode'],
        'secondDistributionCode': !exists(json, 'secondDistributionCode') ? undefined : json['secondDistributionCode'],
        'iraSepSimple': !exists(json, 'iraSepSimple') ? undefined : json['iraSepSimple'],
        'traditionalIraSepSimpleOrRothConversionAmount': !exists(json, 'traditionalIraSepSimpleOrRothConversionAmount') ? undefined : json['traditionalIraSepSimpleOrRothConversionAmount'],
        'otherAmount': !exists(json, 'otherAmount') ? undefined : json['otherAmount'],
        'otherPercentage': !exists(json, 'otherPercentage') ? undefined : json['otherPercentage'],
        'totalDistributionPercentage': !exists(json, 'totalDistributionPercentage') ? undefined : json['totalDistributionPercentage'],
        'totalEmployeeContributions': !exists(json, 'totalEmployeeContributions') ? undefined : json['totalEmployeeContributions'],
        'amountAllocableToIrrWithin5Years': !exists(json, 'amountAllocableToIrrWithin5Years') ? undefined : json['amountAllocableToIrrWithin5Years'],
        'firstYearOfDesignatedRothContribution': !exists(json, 'firstYearOfDesignatedRothContribution') ? undefined : json['firstYearOfDesignatedRothContribution'],
        'fatcaFilingRequirement': !exists(json, 'fatcaFilingRequirement') ? undefined : json['fatcaFilingRequirement'],
        'dateOfPayment': !exists(json, 'dateOfPayment') ? undefined : (new Date(json['dateOfPayment'])),
        'issuerId': !exists(json, 'issuerId') ? undefined : json['issuerId'],
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'recipientName': !exists(json, 'recipientName') ? undefined : json['recipientName'],
        'recipientTin': !exists(json, 'recipientTin') ? undefined : json['recipientTin'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'streetAddress': !exists(json, 'streetAddress') ? undefined : json['streetAddress'],
        'streetAddressLine2': !exists(json, 'streetAddressLine2') ? undefined : json['streetAddressLine2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'recipientEmail': !exists(json, 'recipientEmail') ? undefined : json['recipientEmail'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'recipientNonUsProvince': !exists(json, 'recipientNonUsProvince') ? undefined : json['recipientNonUsProvince'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'federalEFile': !exists(json, 'federalEFile') ? undefined : json['federalEFile'],
        'postalMail': !exists(json, 'postalMail') ? undefined : json['postalMail'],
        'stateEFile': !exists(json, 'stateEFile') ? undefined : json['stateEFile'],
        'tinMatch': !exists(json, 'tinMatch') ? undefined : json['tinMatch'],
        'addressVerification': !exists(json, 'addressVerification') ? undefined : json['addressVerification'],
    };
}

export function Form1099RListItemToJSON(value?: Form1099RListItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stateAndLocalWithholding': StateAndLocalWithholdingToJSON(value.stateAndLocalWithholding),
        'grossDistribution': value.grossDistribution,
        'taxableAmount': value.taxableAmount,
        'taxableAmountNotDetermined': value.taxableAmountNotDetermined,
        'totalDistributionDetermined': value.totalDistributionDetermined,
        'capitalGain': value.capitalGain,
        'federalIncomeTaxWithheld': value.federalIncomeTaxWithheld,
        'employeeContributionsOrDesignatedRothOrInsurancePremiums': value.employeeContributionsOrDesignatedRothOrInsurancePremiums,
        'netUnrealizedAppreciationInEmployerSecurities': value.netUnrealizedAppreciationInEmployerSecurities,
        'distributionCode': value.distributionCode,
        'secondDistributionCode': value.secondDistributionCode,
        'iraSepSimple': value.iraSepSimple,
        'traditionalIraSepSimpleOrRothConversionAmount': value.traditionalIraSepSimpleOrRothConversionAmount,
        'otherAmount': value.otherAmount,
        'otherPercentage': value.otherPercentage,
        'totalDistributionPercentage': value.totalDistributionPercentage,
        'totalEmployeeContributions': value.totalEmployeeContributions,
        'amountAllocableToIrrWithin5Years': value.amountAllocableToIrrWithin5Years,
        'firstYearOfDesignatedRothContribution': value.firstYearOfDesignatedRothContribution,
        'fatcaFilingRequirement': value.fatcaFilingRequirement,
        'dateOfPayment': value.dateOfPayment === undefined ? undefined : (value.dateOfPayment.toISOString()),
        'issuerId': value.issuerId,
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'referenceId': value.referenceId,
        'recipientName': value.recipientName,
        'recipientTin': value.recipientTin,
        'tinType': value.tinType,
        'recipientSecondName': value.recipientSecondName,
        'streetAddress': value.streetAddress,
        'streetAddressLine2': value.streetAddressLine2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'recipientEmail': value.recipientEmail,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'recipientNonUsProvince': value.recipientNonUsProvince,
        'countryCode': value.countryCode,
        'federalEFile': value.federalEFile,
        'postalMail': value.postalMail,
        'stateEFile': value.stateEFile,
        'tinMatch': value.tinMatch,
        'addressVerification': value.addressVerification,
    };
}
