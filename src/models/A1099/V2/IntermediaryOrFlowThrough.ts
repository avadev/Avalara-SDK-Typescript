/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * Intermediary or flow-through entity information for tax forms
 * @export
 * @interface IntermediaryOrFlowThrough
 */
export interface IntermediaryOrFlowThrough {
    /**
     * EIN (Employer Identification Number) of the intermediary or flow-through entity
     * @type {string}
     * @memberof IntermediaryOrFlowThrough
     */
    ein?: string | null;
    /**
     * Chapter 3 status code for the intermediary or flow-through entity. Available values:
     * - 01: U.S. Withholding Agent - FI (Deprecated - valid only for tax years prior to 2020)
     * - 02: U.S. Withholding Agent - Other (Deprecated - valid only for tax years prior to 2020)
     * - 03: Territory FI - treated as U.S. Person
     * - 04: Territory FI - not treated as U.S. Person
     * - 05: U.S. branch - treated as U.S. Person
     * - 06: U.S. branch - not treated as U.S. Person
     * - 07: U.S. branch - ECI presumption applied
     * - 08: Partnership other than Withholding Foreign Partnership
     * - 09: Withholding Foreign Partnership
     * - 10: Trust other than Withholding Foreign Trust
     * - 11: Withholding Foreign Trust
     * - 12: Qualified Intermediary
     * - 13: Qualified Securities Lender - Qualified Intermediary
     * - 14: Qualified Securities Lender - Other
     * - 15: Corporation
     * - 16: Individual
     * - 17: Estate
     * - 18: Private Foundation
     * - 19: Government or International Organization
     * - 20: Tax Exempt Organization (Section 501(c) entities)
     * - 21: Unknown Recipient
     * - 22: Artist or Athlete
     * - 23: Pension
     * - 24: Foreign Central Bank of Issue
     * - 25: Nonqualified Intermediary
     * - 26: Hybrid entity making Treaty Claim
     * - 27: Withholding Rate Pool - General
     * - 28: Withholding Rate Pool - Exempt Organization
     * - 29: PAI Withholding Rate Pool - General
     * - 30: PAI Withholding Rate Pool - Exempt Organization
     * - 31: Agency Withholding Rate Pool - General
     * - 32: Agency Withholding Rate Pool - Exempt Organization
     * - 34: U.S. Withholding Agent-Foreign branch of FI (Deprecated - valid only for tax years prior to 2020)
     * - 35: Qualified Derivatives Dealer
     * - 36: Foreign Government - Integral Part
     * - 37: Foreign Government - Controlled Entity
     * - 38: Publicly Traded Partnership
     * - 39: Disclosing Qualified Intermediary
     * @type {string}
     * @memberof IntermediaryOrFlowThrough
     */
    chap3StatusCode?: IntermediaryOrFlowThroughChap3StatusCodeEnum;
    /**
     * Chapter 4 status code for the intermediary or flow-through entity. Available values:
     * - 01: U.S. Withholding Agent - FI
     * - 02: U.S. Withholding Agent - Other
     * - 03: Territory FI - not treated as U.S. Person
     * - 04: Territory FI - treated as U.S. Person
     * - 05: Participating FFI - Other
     * - 06: Participating FFI - Reporting Model 2 FFI
     * - 07: Registered Deemed - Compliant FFI-Reporting Model 1 FFI
     * - 08: Registered Deemed - Compliant FFI-Sponsored Entity
     * - 09: Registered Deemed - Compliant FFI-Other
     * - 10: Certified Deemed - Compliant FFI-Other
     * - 11: Certified Deemed - Compliant FFI-FFI with Low Value Accounts
     * - 12: Certified Deemed - Compliant FFI-Non-Registering Local Bank
     * - 13: Certified Deemed - Compliant FFI-Sponsored Entity
     * - 14: Certified Deemed - Compliant FFI-Investment Advisor or Investment Manager
     * - 15: Nonparticipating FFI
     * - 16: Owner-Documented FFI
     * - 17: U.S. Branch - treated as U.S. person
     * - 18: U.S. Branch - not treated as U.S. person (reporting under section 1471)
     * - 19: Passive NFFE identifying Substantial U.S. Owners
     * - 20: Passive NFFE with no Substantial U.S. Owners
     * - 21: Publicly Traded NFFE or Affiliate of Publicly Traded NFFE
     * - 22: Active NFFE
     * - 23: Individual
     * - 24: Section 501(c) Entities
     * - 25: Excepted Territory NFFE
     * - 26: Excepted NFFE - Other
     * - 27: Exempt Beneficial Owner
     * - 28: Entity Wholly Owned by Exempt Beneficial Owners
     * - 29: Unknown Recipient
     * - 30: Recalcitrant Account Holder
     * - 31: Nonreporting IGA FFI
     * - 32: Direct reporting NFFE
     * - 33: U.S. reportable account
     * - 34: Non-consenting U.S. account
     * - 35: Sponsored direct reporting NFFE
     * - 36: Excepted Inter-affiliate FFI
     * - 37: Undocumented Preexisting Obligation
     * - 38: U.S. Branch - ECI presumption applied
     * - 39: Account Holder of Excluded Financial Account
     * - 40: Passive NFFE reported by FFI
     * - 41: NFFE subject to 1472 withholding
     * - 42: Recalcitrant Pool - No U.S. Indicia
     * - 43: Recalcitrant Pool - U.S. Indicia
     * - 44: Recalcitrant Pool - Dormant Account
     * - 45: Recalcitrant Pool - U.S. Persons
     * - 46: Recalcitrant Pool - Passive NFFEs
     * - 47: Nonparticipating FFI Pool
     * - 48: U.S. Payees Pool
     * - 49: QI - Recalcitrant Pool-General
     * - 50: U.S. Withholding Agent-Foreign branch of FI
     * @type {string}
     * @memberof IntermediaryOrFlowThrough
     */
    chap4StatusCode?: IntermediaryOrFlowThroughChap4StatusCodeEnum;
    /**
     * Name of the intermediary or flow-through entity
     * @type {string}
     * @memberof IntermediaryOrFlowThrough
     */
    name?: string | null;
    /**
     * GIIN (Global Intermediary Identification Number) of the intermediary or flow-through entity
     * @type {string}
     * @memberof IntermediaryOrFlowThrough
     */
    giin?: string | null;
    /**
     * Country code for the intermediary or flow-through entity
     * @type {string}
     * @memberof IntermediaryOrFlowThrough
     */
    countryCode?: string | null;
    /**
     * Foreign TIN of the intermediary or flow-through entity
     * @type {string}
     * @memberof IntermediaryOrFlowThrough
     */
    foreignTin?: string | null;
    /**
     * Address of the intermediary or flow-through entity
     * @type {string}
     * @memberof IntermediaryOrFlowThrough
     */
    address?: string | null;
    /**
     * City of the intermediary or flow-through entity
     * @type {string}
     * @memberof IntermediaryOrFlowThrough
     */
    city?: string | null;
    /**
     * State of the intermediary or flow-through entity
     * @type {string}
     * @memberof IntermediaryOrFlowThrough
     */
    state?: string | null;
    /**
     * Zip code of the intermediary or flow-through entity
     * @type {string}
     * @memberof IntermediaryOrFlowThrough
     */
    zip?: string | null;
}

/**
* @export
* @enum {string}
*/
export enum IntermediaryOrFlowThroughChap3StatusCodeEnum {
    _01 = '01',
    _02 = '02',
    _34 = '34',
    _03 = '03',
    _04 = '04',
    _05 = '05',
    _06 = '06',
    _07 = '07',
    _08 = '08',
    _09 = '09',
    _10 = '10',
    _11 = '11',
    _12 = '12',
    _13 = '13',
    _14 = '14',
    _15 = '15',
    _16 = '16',
    _17 = '17',
    _18 = '18',
    _19 = '19',
    _20 = '20',
    _21 = '21',
    _22 = '22',
    _23 = '23',
    _24 = '24',
    _25 = '25',
    _26 = '26',
    _27 = '27',
    _28 = '28',
    _29 = '29',
    _30 = '30',
    _31 = '31',
    _32 = '32',
    _35 = '35',
    _36 = '36',
    _37 = '37',
    _38 = '38',
    _39 = '39'
}/**
* @export
* @enum {string}
*/
export enum IntermediaryOrFlowThroughChap4StatusCodeEnum {
    _01 = '01',
    _02 = '02',
    _03 = '03',
    _04 = '04',
    _05 = '05',
    _06 = '06',
    _07 = '07',
    _08 = '08',
    _09 = '09',
    _10 = '10',
    _11 = '11',
    _12 = '12',
    _13 = '13',
    _14 = '14',
    _15 = '15',
    _16 = '16',
    _17 = '17',
    _18 = '18',
    _19 = '19',
    _20 = '20',
    _21 = '21',
    _22 = '22',
    _23 = '23',
    _24 = '24',
    _25 = '25',
    _26 = '26',
    _27 = '27',
    _28 = '28',
    _29 = '29',
    _30 = '30',
    _31 = '31',
    _32 = '32',
    _33 = '33',
    _34 = '34',
    _35 = '35',
    _36 = '36',
    _37 = '37',
    _38 = '38',
    _39 = '39',
    _40 = '40',
    _41 = '41',
    _42 = '42',
    _43 = '43',
    _44 = '44',
    _45 = '45',
    _46 = '46',
    _47 = '47',
    _48 = '48',
    _49 = '49',
    _50 = '50'
}

/**
 * Check if a given object implements the IntermediaryOrFlowThrough interface.
 */
export function instanceOfIntermediaryOrFlowThrough(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IntermediaryOrFlowThroughFromJSON(json: any): IntermediaryOrFlowThrough {
    return IntermediaryOrFlowThroughFromJSONTyped(json, false);
}

export function IntermediaryOrFlowThroughFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntermediaryOrFlowThrough {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ein': !exists(json, 'ein') ? undefined : json['ein'],
        'chap3StatusCode': !exists(json, 'chap3StatusCode') ? undefined : json['chap3StatusCode'],
        'chap4StatusCode': !exists(json, 'chap4StatusCode') ? undefined : json['chap4StatusCode'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'giin': !exists(json, 'giin') ? undefined : json['giin'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'foreignTin': !exists(json, 'foreignTin') ? undefined : json['foreignTin'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
    };
}

export function IntermediaryOrFlowThroughToJSON(value?: IntermediaryOrFlowThrough | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ein': value.ein,
        'chap3StatusCode': value.chap3StatusCode,
        'chap4StatusCode': value.chap4StatusCode,
        'name': value.name,
        'giin': value.giin,
        'countryCode': value.countryCode,
        'foreignTin': value.foreignTin,
        'address': value.address,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
    };
}
