/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * 
 * @export
 * @interface CoveredIndividualReferenceResponse
 */
export interface CoveredIndividualReferenceResponse {
    /**
     * Covered individual ID
     * @type {string}
     * @memberof CoveredIndividualReferenceResponse
     */
    id?: string;
    /**
     * Covered individual's first name
     * @type {string}
     * @memberof CoveredIndividualReferenceResponse
     */
    firstName?: string | null;
    /**
     * Covered individual's middle name
     * @type {string}
     * @memberof CoveredIndividualReferenceResponse
     */
    middleName?: string | null;
    /**
     * Covered individual's last name
     * @type {string}
     * @memberof CoveredIndividualReferenceResponse
     */
    lastName?: string | null;
    /**
     * Covered individual's name suffix
     * @type {string}
     * @memberof CoveredIndividualReferenceResponse
     */
    nameSuffix?: string | null;
    /**
     * Covered individual's TIN (SSN or ITIN)
     * @type {string}
     * @memberof CoveredIndividualReferenceResponse
     */
    tin?: string | null;
    /**
     * Covered individual's date of birth
     * @type {Date}
     * @memberof CoveredIndividualReferenceResponse
     */
    birthDate?: Date | null;
    /**
     * Coverage indicator for all 12 months
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth0?: boolean;
    /**
     * Coverage indicator for January
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth1?: boolean;
    /**
     * Coverage indicator for February
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth2?: boolean;
    /**
     * Coverage indicator for March
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth3?: boolean;
    /**
     * Coverage indicator for April
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth4?: boolean;
    /**
     * Coverage indicator for May
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth5?: boolean;
    /**
     * Coverage indicator for June
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth6?: boolean;
    /**
     * Coverage indicator for July
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth7?: boolean;
    /**
     * Coverage indicator for August
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth8?: boolean;
    /**
     * Coverage indicator for September
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth9?: boolean;
    /**
     * Coverage indicator for October
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth10?: boolean;
    /**
     * Coverage indicator for November
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth11?: boolean;
    /**
     * Coverage indicator for December
     * @type {boolean}
     * @memberof CoveredIndividualReferenceResponse
     */
    coveredMonth12?: boolean;
}



/**
 * Check if a given object implements the CoveredIndividualReferenceResponse interface.
 */
export function instanceOfCoveredIndividualReferenceResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CoveredIndividualReferenceResponseFromJSON(json: any): CoveredIndividualReferenceResponse {
    return CoveredIndividualReferenceResponseFromJSONTyped(json, false);
}

export function CoveredIndividualReferenceResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoveredIndividualReferenceResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'middleName': !exists(json, 'middleName') ? undefined : json['middleName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'nameSuffix': !exists(json, 'nameSuffix') ? undefined : json['nameSuffix'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'birthDate': !exists(json, 'birthDate') ? undefined : (json['birthDate'] === null ? null : new Date(json['birthDate'])),
        'coveredMonth0': !exists(json, 'coveredMonth0') ? undefined : json['coveredMonth0'],
        'coveredMonth1': !exists(json, 'coveredMonth1') ? undefined : json['coveredMonth1'],
        'coveredMonth2': !exists(json, 'coveredMonth2') ? undefined : json['coveredMonth2'],
        'coveredMonth3': !exists(json, 'coveredMonth3') ? undefined : json['coveredMonth3'],
        'coveredMonth4': !exists(json, 'coveredMonth4') ? undefined : json['coveredMonth4'],
        'coveredMonth5': !exists(json, 'coveredMonth5') ? undefined : json['coveredMonth5'],
        'coveredMonth6': !exists(json, 'coveredMonth6') ? undefined : json['coveredMonth6'],
        'coveredMonth7': !exists(json, 'coveredMonth7') ? undefined : json['coveredMonth7'],
        'coveredMonth8': !exists(json, 'coveredMonth8') ? undefined : json['coveredMonth8'],
        'coveredMonth9': !exists(json, 'coveredMonth9') ? undefined : json['coveredMonth9'],
        'coveredMonth10': !exists(json, 'coveredMonth10') ? undefined : json['coveredMonth10'],
        'coveredMonth11': !exists(json, 'coveredMonth11') ? undefined : json['coveredMonth11'],
        'coveredMonth12': !exists(json, 'coveredMonth12') ? undefined : json['coveredMonth12'],
    };
}

export function CoveredIndividualReferenceResponseToJSON(value?: CoveredIndividualReferenceResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'firstName': value.firstName,
        'middleName': value.middleName,
        'lastName': value.lastName,
        'nameSuffix': value.nameSuffix,
        'tin': value.tin,
        'birthDate': value.birthDate === undefined ? undefined : (value.birthDate === null ? null : value.birthDate.toISOString()),
        'coveredMonth0': value.coveredMonth0,
        'coveredMonth1': value.coveredMonth1,
        'coveredMonth2': value.coveredMonth2,
        'coveredMonth3': value.coveredMonth3,
        'coveredMonth4': value.coveredMonth4,
        'coveredMonth5': value.coveredMonth5,
        'coveredMonth6': value.coveredMonth6,
        'coveredMonth7': value.coveredMonth7,
        'coveredMonth8': value.coveredMonth8,
        'coveredMonth9': value.coveredMonth9,
        'coveredMonth10': value.coveredMonth10,
        'coveredMonth11': value.coveredMonth11,
        'coveredMonth12': value.coveredMonth12,
    };
}
