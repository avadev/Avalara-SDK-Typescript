/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * Offer and coverage information for health coverage forms
 * @export
 * @interface OfferAndCoverage
 */
export interface OfferAndCoverage {
    /**
     * Id
     * @type {number}
     * @memberof OfferAndCoverage
     */
    readonly id?: number | null;
    /**
     * Month of coverage.
     * Available values:
     * - All: All months
     * - January: January
     * - February: February
     * - March: March
     * - April: April
     * - May: May
     * - June: June
     * - July: July
     * - August: August
     * - September: September
     * - October: October
     * - November: November
     * - December: December
     * @type {string}
     * @memberof OfferAndCoverage
     */
    month?: OfferAndCoverageMonthEnum;
    /**
     * Offer of Coverage Code. Required if Share has a value, including zero.
     * Available values:
     * 
     * Pre-ICHRA Codes (available before 2020):
     * - 1A: Qualifying offer: minimum essential coverage providing minimum value offered to full-time employee with employee required contribution ‚â§ 9.5% (as adjusted) of mainland single federal poverty line and at least minimum essential coverage offered to spouse and dependent(s)
     * - 1B: Minimum essential coverage providing minimum value offered to employee only
     * - 1C: Minimum essential coverage providing minimum value offered to employee and at least minimum essential coverage offered to dependent(s) (not spouse)
     * - 1D: Minimum essential coverage providing minimum value offered to employee and at least minimum essential coverage offered to spouse (not dependent(s))
     * - 1E: Minimum essential coverage providing minimum value offered to employee and at least minimum essential coverage offered to dependent(s) and spouse
     * - 1F: Minimum essential coverage NOT providing minimum value offered to employee; employee and spouse or dependent(s); or employee, spouse, and dependents
     * - 1G: Offer of coverage to an individual who was not an employee or not a full-time employee and who enrolled in self-insured coverage
     * - 1H: No offer of coverage (employee not offered any health coverage or employee offered coverage that is not minimum essential coverage)
     * - 1J: Minimum essential coverage providing minimum value offered to employee and at least minimum essential coverage conditionally offered to spouse; minimum essential coverage not offered to dependent(s)
     * - 1K: Minimum essential coverage providing minimum value offered to employee; at least minimum essential coverage offered to dependents; and at least minimum essential coverage conditionally offered to spouse
     *             
     * ICHRA Codes (introduced 2020, require ZIP code):
     * - 1L: Individual coverage HRA offered to employee only
     * - 1M: Individual coverage HRA offered to employee and dependent(s) (not spouse)
     * - 1N: Individual coverage HRA offered to employee, spouse, and dependent(s)
     * - 1O: Individual coverage HRA offered to employee only using employment site ZIP code affordability safe harbor
     * - 1P: Individual coverage HRA offered to employee and dependent(s) (not spouse) using employment site ZIP code affordability safe harbor
     * - 1Q: Individual coverage HRA offered to employee, spouse, and dependent(s) using employment site ZIP code affordability safe harbor
     * - 1R: Individual coverage HRA that is NOT affordable
     * - 1S: Individual coverage HRA offered to an individual who was not a full-time employee
     * - 1T: Individual coverage HRA offered to employee and spouse (not dependents)
     * - 1U: Individual coverage HRA offered to employee and spouse (not dependents) using employment site ZIP code affordability safe harbor
     * 
     * Note: Codes 1B, 1C, 1D, 1E, 1J, 1K, 1L, 1M, 1N, 1O, 1P, 1Q, 1T, 1U require employee share amount (0.00 is a valid value).
     * @type {string}
     * @memberof OfferAndCoverage
     */
    offerCode?: OfferAndCoverageOfferCodeEnum;
    /**
     * Employee required contribution share - Employee Share of Lowest Cost Monthly Premium, for Self-Only Minimum Value Coverage - May not exceed 3499.99
     * @type {number}
     * @memberof OfferAndCoverage
     */
    share?: number | null;
    /**
     * Safe harbor code - Applicable Section 4980H Safe Harbor Code.
     * Available values:
     * - 2A: Form W-2 safe harbor
     * - 2B: Federal poverty line safe harbor
     * - 2C: Rate of pay safe harbor
     * - 2D: Part-time employee safe harbor for employees who were not full-time for any month of the year
     * - 2E: Multiemployer interim rule relief
     * - 2F: Qualifying offer method
     * - 2G: Qualifying offer transition relief
     * - 2H: Other affordability safe harbor
     * @type {string}
     * @memberof OfferAndCoverage
     */
    safeHarborCode?: OfferAndCoverageSafeHarborCodeEnum;
    /**
     * ZIP/postal code. For coverage area (optional, unless codes 1L to 1U are used).
     * @type {string}
     * @memberof OfferAndCoverage
     */
    zipCode?: string | null;
}

/**
* @export
* @enum {string}
*/
export enum OfferAndCoverageMonthEnum {
    All = 'All',
    _01 = '01',
    _02 = '02',
    _03 = '03',
    _04 = '04',
    _05 = '05',
    _06 = '06',
    _07 = '07',
    _08 = '08',
    _09 = '09',
    _10 = '10',
    _11 = '11',
    _12 = '12'
}/**
* @export
* @enum {string}
*/
export enum OfferAndCoverageOfferCodeEnum {
    _1A = '1A',
    _1B = '1B',
    _1C = '1C',
    _1D = '1D',
    _1E = '1E',
    _1F = '1F',
    _1G = '1G',
    _1H = '1H',
    _1J = '1J',
    _1K = '1K',
    _1L = '1L',
    _1M = '1M',
    _1N = '1N',
    _1O = '1O',
    _1P = '1P',
    _1Q = '1Q',
    _1R = '1R',
    _1S = '1S',
    _1T = '1T',
    _1U = '1U'
}/**
* @export
* @enum {string}
*/
export enum OfferAndCoverageSafeHarborCodeEnum {
    _2A = '2A',
    _2B = '2B',
    _2C = '2C',
    _2D = '2D',
    _2E = '2E',
    _2F = '2F',
    _2G = '2G',
    _2H = '2H'
}

/**
 * Check if a given object implements the OfferAndCoverage interface.
 */
export function instanceOfOfferAndCoverage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OfferAndCoverageFromJSON(json: any): OfferAndCoverage {
    return OfferAndCoverageFromJSONTyped(json, false);
}

export function OfferAndCoverageFromJSONTyped(json: any, ignoreDiscriminator: boolean): OfferAndCoverage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'month': !exists(json, 'month') ? undefined : json['month'],
        'offerCode': !exists(json, 'offerCode') ? undefined : json['offerCode'],
        'share': !exists(json, 'share') ? undefined : json['share'],
        'safeHarborCode': !exists(json, 'safeHarborCode') ? undefined : json['safeHarborCode'],
        'zipCode': !exists(json, 'zipCode') ? undefined : json['zipCode'],
    };
}

export function OfferAndCoverageToJSON(value?: OfferAndCoverage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'month': value.month,
        'offerCode': value.offerCode,
        'share': value.share,
        'safeHarborCode': value.safeHarborCode,
        'zipCode': value.zipCode,
    };
}
