/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * 
 * @export
 * @interface IssuerRequest
 */
export interface IssuerRequest {
    /**
     * Legal name. Not the DBA name.
     * @type {string}
     * @memberof IssuerRequest
     */
    name: string | null;
    /**
     * Doing Business As (DBA) name or continuation of a long legal name. Use either this or 'transferAgentName'.
     * @type {string}
     * @memberof IssuerRequest
     */
    dbaName?: string | null;
    /**
     * Federal Tax Identification Number (TIN).
     * @type {string}
     * @memberof IssuerRequest
     */
    tin?: string | null;
    /**
     * Internal reference ID. Never shown to any agency or recipient. If present, it will prefix download filenames. Allowed characters: letters, numbers, dashes, underscores, and spaces.
     * @type {string}
     * @memberof IssuerRequest
     */
    referenceId?: string | null;
    /**
     * Contact phone number (must contain at least 10 digits, max 15 characters). For recipient inquiries.
     * @type {string}
     * @memberof IssuerRequest
     */
    telephone: string | null;
    /**
     * Tax year for which the forms are being filed (e.g., 2024). Must be within current tax year and current tax year - 4.
     * @type {number}
     * @memberof IssuerRequest
     */
    taxYear: number | null;
    /**
     * Two-letter IRS country code (e.g., 'US', 'CA'), as defined at https://www.irs.gov/e-file-providers/country-codes. If there is a transfer agent, use the transfer agent's shipping address.
     * @type {string}
     * @memberof IssuerRequest
     */
    countryCode?: string | null;
    /**
     * Contact email address. For recipient inquiries.
     * @type {string}
     * @memberof IssuerRequest
     */
    email: string | null;
    /**
     * Address.
     * @type {string}
     * @memberof IssuerRequest
     */
    address: string | null;
    /**
     * City.
     * @type {string}
     * @memberof IssuerRequest
     */
    city: string | null;
    /**
     * Two-letter US state or Canadian province code (required for US/CA addresses).
     * @type {string}
     * @memberof IssuerRequest
     */
    state: string | null;
    /**
     * ZIP/postal code.
     * @type {string}
     * @memberof IssuerRequest
     */
    zip: string | null;
    /**
     * Province or region for non-US/CA addresses.
     * @type {string}
     * @memberof IssuerRequest
     */
    foreignProvince?: string | null;
    /**
     * Name of the transfer agent, if applicable ‚Äî optional; use either this or 'dbaName'.
     * @type {string}
     * @memberof IssuerRequest
     */
    transferAgentName?: string | null;
    /**
     * Indicates if this is the issuer's final year filing.
     * @type {boolean}
     * @memberof IssuerRequest
     */
    lastFiling: boolean | null;
}



/**
 * Check if a given object implements the IssuerRequest interface.
 */
export function instanceOfIssuerRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "telephone" in value;
    isInstance = isInstance && "taxYear" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "zip" in value;
    isInstance = isInstance && "lastFiling" in value;

    return isInstance;
}

export function IssuerRequestFromJSON(json: any): IssuerRequest {
    return IssuerRequestFromJSONTyped(json, false);
}

export function IssuerRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): IssuerRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'dbaName': !exists(json, 'dbaName') ? undefined : json['dbaName'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'telephone': json['telephone'],
        'taxYear': json['taxYear'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'email': json['email'],
        'address': json['address'],
        'city': json['city'],
        'state': json['state'],
        'zip': json['zip'],
        'foreignProvince': !exists(json, 'foreignProvince') ? undefined : json['foreignProvince'],
        'transferAgentName': !exists(json, 'transferAgentName') ? undefined : json['transferAgentName'],
        'lastFiling': json['lastFiling'],
    };
}

export function IssuerRequestToJSON(value?: IssuerRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'dbaName': value.dbaName,
        'tin': value.tin,
        'referenceId': value.referenceId,
        'telephone': value.telephone,
        'taxYear': value.taxYear,
        'countryCode': value.countryCode,
        'email': value.email,
        'address': value.address,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'foreignProvince': value.foreignProvince,
        'transferAgentName': value.transferAgentName,
        'lastFiling': value.lastFiling,
    };
}
