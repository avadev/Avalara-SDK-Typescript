/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * 
 * @export
 * @interface W8ImyFormRequest
 */
export interface W8ImyFormRequest {
    /**
     * The form type (always "w8imy" for this model).
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    readonly type?: W8ImyFormRequestTypeEnum;
    /**
     * The name of the individual or entity associated with the form.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    name?: string;
    /**
     * The country of citizenship.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    citizenshipCountry?: string;
    /**
     * The name of the disregarded entity receiving the payment (if applicable).
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    disregardedEntity?: string | null;
    /**
     * The entity type.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    entityType?: string;
    /**
     * The FATCA status.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    fatcaStatus?: string;
    /**
     * The residential address of the individual or entity.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    residenceAddress?: string;
    /**
     * The city of residence.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    residenceCity?: string;
    /**
     * The state of residence.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    residenceState?: string | null;
    /**
     * The ZIP code of the residence.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    residenceZip?: string;
    /**
     * The country of residence.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    residenceCountry?: string;
    /**
     * Indicates whether the residence address is also the mailing address.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    residenceIsMailing?: boolean;
    /**
     * The mailing address.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    mailingAddress?: string | null;
    /**
     * The city of the mailing address.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    mailingCity?: string | null;
    /**
     * The state of the mailing address.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    mailingState?: string | null;
    /**
     * The ZIP code of the mailing address.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    mailingZip?: string | null;
    /**
     * The country of the mailing address.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    mailingCountry?: string | null;
    /**
     * The type of TIN provided.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    tinType?: string | null;
    /**
     * The taxpayer identification number (TIN).
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    tin?: string | null;
    /**
     * The global intermediary identification number (GIIN).
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    giin?: string | null;
    /**
     * The foreign taxpayer identification number (TIN).
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    foreignTin?: string | null;
    /**
     * A reference number for the form.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    referenceNumber?: string | null;
    /**
     * The FATCA status of disregarded entity or branch receiving payment.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    disregardedEntityFatcaStatus?: string | null;
    /**
     * The address for disregarded entities.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    disregardedAddress?: string | null;
    /**
     * The city for disregarded entities.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    disregardedCity?: string | null;
    /**
     * The state for disregarded entities.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    disregardedState?: string | null;
    /**
     * The ZIP code for disregarded entities.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    disregardedZip?: string | null;
    /**
     * The country for disregarded entities.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    disregardedCountry?: string | null;
    /**
     * The GIIN for disregarded entities.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    disregardedEntityGiin?: string | null;
    /**
     * Certifies that the entity is a Qualified Intermediary (QI) acting in accordance with its QI Agreement,
     * providing required withholding statements and documentation for relevant tax withholding purposes.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qualifiedIntermediaryCertification?: boolean | null;
    /**
     * Certifies that the Qualified Intermediary assumes primary withholding responsibility
     * under chapters 3 and 4 for the specified accounts.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qiPrimaryWithholdingResponsibilityCertification?: boolean | null;
    /**
     * Certifies that the Qualified Intermediary assumes primary withholding and reporting responsibility under section 1446(f)
     * for amounts realized from sales of interests in publicly traded partnerships.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qiWithholdingResponsibilityForPtpSalesCertification?: boolean | null;
    /**
     * Certifies that the Qualified Intermediary assumes primary withholding responsibility as a nominee
     * under Regulations section 1.1446-4(b)(3) for publicly traded partnership distributions.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qiNomineeWithholdingResponsibilityForPtpDistributionsCertification?: boolean | null;
    /**
     * Certifies that the Qualified Intermediary is acting as a qualified securities lender and assumes primary withholding
     * and reporting responsibilities for U.S. source substitute dividend payments.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qiSecuritiesLenderSubstituteDividendWithholdingCertification?: boolean | null;
    /**
     * Certifies that the Qualified Intermediary assumes primary withholding under chapters 3 and 4, and primary Form 1099 reporting
     * and backup withholding responsibility for U.S. source interest and substitute interest payments.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qiWithholdingAnd1099ReportingResponsibilityCertification?: boolean | null;
    /**
     * Certifies that the Qualified Intermediary assumes Form 1099 reporting and backup withholding responsibility,
     * or FATCA reporting responsibility as a participating or registered deemed-compliant FFI,
     * for accounts held by specified U.S. persons.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qiForm1099OrFatcaReportingResponsibilityCertification?: boolean | null;
    /**
     * Certifies that the Qualified Intermediary does not assume primary Form 1099 reporting
     * and backup withholding responsibility for the accounts associated with this form.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qiOptOutOfForm1099ReportingCertification?: boolean | null;
    /**
     * Certifies that the Qualified Intermediary meets the requirements for allocating payments
     * to a chapter 4 withholding rate pool of U.S. payees under Regulations section 1.6049-4(c)(4)(iii).
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qiWithholdingRatePoolCertification?: boolean | null;
    /**
     * Certifies that the Qualified Intermediary has obtained or will obtain documentation confirming the status of any intermediary
     * or flow-through entity as a participating FFI, registered deemed-compliant FFI,
     * or QI for U.S. payees in a chapter 4 withholding rate pool.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qiIntermediaryOrFlowThroughEntityDocumentationCertification?: boolean | null;
    /**
     * Certifies that the Qualified Derivatives Dealer (QDD) is approved by the IRS and assumes primary withholding
     * and reporting responsibilities for payments related to potential section 871(m) transactions.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qualifiedDerivativesDealerCertification?: boolean | null;
    /**
     * Indicates QDD classification is Corporation.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qddCorporation?: boolean | null;
    /**
     * Indicates QDD classification is Partnership.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qddPartnership?: boolean | null;
    /**
     * Indicates QDD classification is Disregarded Entity.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qddDisregardedEntity?: boolean | null;
    /**
     * Certifies that the entity is not acting as a Qualified Intermediary
     * and is not acting for its own account for the accounts covered by this form.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    nonqualifiedIntermediaryCertification?: boolean | null;
    /**
     * Certifies that the nonqualified intermediary is submitting this form to transmit withholding certificates
     * and/or other required documentation along with a withholding statement.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    nqiWithholdingStatementTransmissionCertification?: boolean | null;
    /**
     * Certifies that the nonqualified intermediary meets the requirements of Regulations section 1.6049-4(c)(4)(iii)
     * for U.S. payees included in a withholding rate pool, excluding publicly traded partnership distributions.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    nqiWithholdingRatePoolComplianceCertification?: boolean | null;
    /**
     * Certifies that the nonqualified intermediary is acting as a qualified securities lender (not as a QI)
     * and assumes primary withholding and reporting responsibilities for U.S. source substitute dividend payments.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    nqiQualifiedSecuritiesLenderCertification?: boolean | null;
    /**
     * Certifies that the nonqualified intermediary has verified, or will verify,
     * all information on alternative withholding statements for consistency with account data to determine the correct withholding rate,
     * as required under sections 1441 or 1471.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    nqiAlternativeWithholdingStatementVerificationCertification?: boolean | null;
    /**
     * Certifies that the entity is a financial institution (other than an investment entity) that is incorporated
     * or organized under the laws of a possession of the United States.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    territoryFinancialInstitutionCertification?: boolean | null;
    /**
     * Certifies that the territory financial institution agrees to be treated as a U.S. person
     * for chapters 3 and 4 purposes concerning reportable amounts and withholdable payments.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    tfiTreatedAsUsPersonCertification?: boolean | null;
    /**
     * Certifies that the territory financial institution is transmitting withholding certificates or other required documentation
     * and has provided or will provide a withholding statement for reportable or withholdable payments.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    tfiWithholdingStatementTransmissionCertification?: boolean | null;
    /**
     * Certifies that the territory financial institution agrees to be treated as a U.S. person
     * under Regulations section 1.1446(f)-4(a)(2)(i)(B) for amounts realized from sales of publicly traded partnership interests.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    tfiTreatedAsUsPersonForPtpSalesCertification?: boolean | null;
    /**
     * Certifies that the territory financial institution agrees to be treated as a U.S. person
     * and as a nominee for purposes of publicly traded partnership distributions under the applicable regulations.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    tfiNomineeUsPersonForPtpDistributionsCertification?: boolean | null;
    /**
     * Certifies that the territory financial institution is not acting as a nominee for publicly traded partnership distributions
     * and is providing withholding statements for those distributions.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    tfiNotNomineeForPtpDistributionsCertification?: boolean | null;
    /**
     * Certifies that the U.S. branch is receiving reportable or withholdable payments
     * that are not effectively connected income, PTP distributions, or proceeds from PTP sales.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    usBranchNonEffectivelyConnectedIncomeCertification?: boolean | null;
    /**
     * Certifies that the U.S. branch of a foreign bank or insurance company agrees to be treated as a U.S. person
     * for reportable amounts or withholdable payments under the applicable regulations.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    usBranchAgreementToBeTreatedAsUsPersonCertification?: boolean | null;
    /**
     * Certifies that the U.S. branch is transmitting required documentation
     * and withholding statements for reportable or withholdable payments and is applying the appropriate FATCA regulations.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    usBranchWithholdingStatementAndComplianceCertification?: boolean | null;
    /**
     * Certifies that the U.S. branch is acting as a U.S. person
     * for purposes of amounts realized from sales of publicly traded partnership interests under the applicable regulations.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    usBranchActingAsUsPersonForPtpSalesCertification?: boolean | null;
    /**
     * Certifies that the U.S. branch is treated as a U.S. person
     * and as a nominee for publicly traded partnership distributions under the applicable regulations.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    usBranchNomineeForPtpDistributionsCertification?: boolean | null;
    /**
     * Certifies that the U.S. branch is not acting as a nominee for publicly traded partnership distributions
     * and is providing the required withholding statements.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    usBranchNotNomineeForPtpDistributionsCertification?: boolean | null;
    /**
     * Certifies that the entity is a withholding foreign partnership (WP) or a withholding foreign trust (WT)
     * that is compliant with the terms of its WP or WT agreement.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    withholdingForeignPartnershipOrTrustCertification?: boolean | null;
    /**
     * Certifies that the entity is a nonwithholding foreign partnership or trust,
     * providing the form for non-effectively connected payments and transmitting required withholding documentation for chapters 3 and 4.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    nonwithholdingForeignEntityWithholdingStatementCertification?: boolean | null;
    /**
     * Certifies that the entity is a foreign partnership or grantor trust acting as a partner in a lower-tier partnership
     * and is submitting the form for purposes of section 1446(a).
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    foreignEntityPartnerInLowerTierPartnershipCertification?: boolean | null;
    /**
     * Certifies that the entity is a foreign partnership receiving an amount realized
     * from the transfer of a partnership interest for purposes of section 1446(f).
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    foreignPartnershipAmountRealizedSection1446FCertification?: boolean | null;
    /**
     * Certifies that the foreign partnership is providing a withholding statement for a modified amount realized
     * from the transfer of a partnership interest, when applicable.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    foreignPartnershipModifiedAmountRealizedCertification?: boolean | null;
    /**
     * Certifies that the foreign grantor trust is submitting the form on behalf of each grantor or owner
     * and providing a withholding statement to allocate the amount realized in accordance with the regulations.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    foreignGrantorTrustAmountRealizedAllocationCertification?: boolean | null;
    /**
     * Certifies that the entity may rely on the information in all associated withholding certificates
     * under the applicable standards of knowledge in sections 1441 or 1471 when providing an alternative withholding statement.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    alternativeWithholdingStatementRelianceCertification?: boolean | null;
    /**
     * Certifies that the nonparticipating FFI is transmitting withholding documentation
     * and providing a statement allocating payment portions to exempt beneficial owners.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    npFfiWithExemptBeneficialOwnersCertification?: boolean | null;
    /**
     * The name of the entity that sponsors the foreign financial institution (FFI).
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    ffiSponsoringEntity?: string | null;
    /**
     * Certifies that the entity is an investment entity, not a QI, WP, or WT, and has an agreement with a sponsoring entity.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    investmentEntityCertification?: boolean | null;
    /**
     * Certifies that the entity is a controlled foreign corporation sponsored by a U.S. financial institution, not a QI, WP, or WT,
     * and shares a common electronic account system for full transparency.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    controlledForeignCorporationCertification?: boolean | null;
    /**
     * Certifies that the FFI meets all requirements to qualify as an owner-documented FFI, including restrictions on activities,
     * ownership, and account relationships.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    ownerDocumentedFfiCertification?: boolean | null;
    /**
     * Certifies that the FFI will provide a complete owner reporting statement
     * and required documentation for each relevant owner or debt holder.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    ownerDocumentedFfiReportingStatementCertification?: boolean | null;
    /**
     * Certifies that the FFI has provided or will provide an auditor‚Äôs letter and required owner documentation,
     * including a reporting statement and Form W-9s, to meet owner-documented FFI requirements under the regulations.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    ownerDocumentedFfiAuditorLetterCertification?: boolean | null;
    /**
     * Certifies that the FFI operates solely as a limited bank or credit union within its country, meets asset thresholds,
     * and has no foreign operations or affiliations outside its country of organization.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    compliantNonregisteringLocalBankCertification?: boolean | null;
    /**
     * Certifies that the FFI is not primarily engaged in investment activities, maintains only low-value accounts,
     * and has limited total assets within its group.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    compliantFfiLowValueAccountsCertification?: boolean | null;
    /**
     * The name of sponsoring entity for a certified deemed-compliant, closely held investment vehicle.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    sponsoredCloselyHeldEntitySponsoringEntity?: string | null;
    /**
     * Certifies that the entity is a sponsored investment entity with 20 or fewer individual owners,
     * and that all compliance obligations are fulfilled by the sponsoring entity.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    sponsoredCloselyHeldInvestmentVehicleCertification?: boolean | null;
    /**
     * Certifies that the entity qualifies as a limited life debt investment entity based on its formation date, issuance terms,
     * and compliance with regulatory requirements.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    compliantLimitedLifeDebtEntityCertification?: boolean | null;
    /**
     * Certifies that the entity is a financial institution solely because it is an investment entity under regulations
     * and the entity does not maintain financial accounts.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    investmentEntityNoFinancialAccountsCertification?: boolean | null;
    /**
     * Certifies that the entity qualifies as a restricted distributor based on its operations, customer base, regulatory compliance,
     * and financial and geographic limitations.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    restrictedDistributorCertification?: boolean | null;
    /**
     * Certifies that the entity is, and has been, bound by distribution agreements prohibiting sales of fund interests to
     * specified U.S. persons and certain non-U.S. entities.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    restrictedDistributorAgreementCertification?: boolean | null;
    /**
     * Certifies that the entity complies with distribution restrictions for U.S.-linked investors
     * and has addressed any preexisting sales in accordance with FATCA regulations.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    restrictedDistributorPreexistingSalesComplianceCertification?: boolean | null;
    /**
     * Certifies that the entity is treated as the beneficial owner of the payment solely
     * for purposes of chapter 4 under Regulations section 1.1471-6(d)(4).
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    foreignCentralBankOfIssueCertification?: boolean | null;
    /**
     * Certifies that the entity meets the requirements to be considered a nonreporting financial institution to an applicable IGA.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    nonreportingIgaFfiCertification?: boolean | null;
    /**
     * The country for the applicable IGA with the United States.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    igaCountry?: string | null;
    /**
     * The applicable IGA model.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    igaModel?: string | null;
    /**
     * Specifies how the applicable IGA is treated under the IGA provisions or Treasury regulations.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    igaLegalStatusTreatment?: string | null;
    /**
     * The trustee or sponsor name for the nonreporting IGA FFI.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    igaFfiTrusteeOrSponsor?: string | null;
    /**
     * Indicates whether the trustee for the nonreporting IGA FFI is foreign.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    igaFfiTrusteeIsForeign?: boolean | null;
    /**
     * Certifies that the entity is a pension or retirement fund established in a treaty country
     * and is entitled to treaty benefits on U.S. source income.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    treatyQualifiedPensionFundCertification?: boolean | null;
    /**
     * Certifies that the entity is a government-regulated retirement fund meeting specific requirements for contributions, tax exemption,
     * beneficiary limits, and distribution restrictions.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    qualifiedRetirementFundCertification?: boolean | null;
    /**
     * Certifies that the entity is a government-regulated retirement fund with fewer than 50 participants, limited foreign ownership,
     * and employer sponsorship that is not from investment entities or passive NFFEs.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    narrowParticipationRetirementFundCertification?: boolean | null;
    /**
     * Certifies that the entity is formed under a pension plan meeting section 401(a) requirements, except for being U.S.-trust funded.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    section401AEquivalentPensionPlanCertification?: boolean | null;
    /**
     * Certifies that the entity is established solely to earn income for the benefit of qualifying retirement funds
     * or accounts under applicable FATCA regulations or IGAs.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    investmentEntityForRetirementFundsCertification?: boolean | null;
    /**
     * Certifies that the entity is established and sponsored by a qualifying exempt beneficial owner to provide retirement, disability,
     * or death benefits to individuals based on services performed for the sponsor.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    exemptBeneficialOwnerSponsoredRetirementFundCertification?: boolean | null;
    /**
     * Certifies that the entity is a holding company, treasury center, or captive finance company operating within a nonfinancial group
     * and not functioning as an investment or financial institution.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    exceptedNonfinancialGroupEntityCertification?: boolean | null;
    /**
     * Certifies that the entity is a recently formed startup NFFE investing in a non-financial business
     * and is not operating as or presenting itself as an investment fund.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    exceptedNonfinancialStartUpCertification?: boolean | null;
    /**
     * The date the start-up company was formed on (or, in case of new line of business, the date of board resolution approving the
     * new line of business).
     * @type {Date}
     * @memberof W8ImyFormRequest
     */
    startupFormationOrResolutionDate?: Date | null;
    /**
     * Certifies that the entity is in liquidation, reorganization, or bankruptcy and intends to operate as a nonfinancial entity,
     * with supporting documentation available if the process exceeds three years.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    exceptedNonfinancialEntityInLiquidationOrBankruptcyCertification?: boolean | null;
    /**
     * The filed date for a plan of reorganization, liquidation or bankruptcy.
     * @type {Date}
     * @memberof W8ImyFormRequest
     */
    nonfinancialEntityFilingDate?: Date | null;
    /**
     * Certifies that the entity is a foreign corporation that is not a financial institution
     * and whose stock is regularly traded on an established securities market.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    publiclyTradedNffeCertification?: boolean | null;
    /**
     * The name of the securities market where the corporation's stock is regularly traded.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    publiclyTradedNffeSecuritiesMarket?: string | null;
    /**
     * Certifies that the entity is a foreign corporation that is not a financial institution
     * and is affiliated with a publicly traded entity within the same expanded affiliated group.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    nffeAffiliateOfPubliclyTradedEntityCertification?: boolean | null;
    /**
     * The name of the affiliated entity whose stock is regularly traded on an established securities market.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    publiclyTradedEntity?: string | null;
    /**
     * The name of the established securities market where the affiliated entity's stock is traded.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    nffeAffiliateOfPubliclyTradedEntitySecuritiesMarket?: string | null;
    /**
     * Certifies that the entity is organized in a U.S. possession, is not engaged in financial activities,
     * and is entirely owned by bona fide residents of that possession.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    exceptedTerritoryNffeCertification?: boolean | null;
    /**
     * Certifies that the entity is a foreign non-financial institution with less than 50% passive income
     * and less than 50% of its assets producing or held to produce passive income.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    activeNffeCertification?: boolean | null;
    /**
     * Certifies that the entity is a foreign non-financial entity that does not qualify for any other NFFE category
     * and is not a financial institution.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    passiveNffeCertification?: boolean | null;
    /**
     * Certifies that the entity is a sponsored direct reporting NFFE.
     * @type {boolean}
     * @memberof W8ImyFormRequest
     */
    sponsoredDirectReportingNffeCertification?: boolean | null;
    /**
     * The name of the entity that sponsors the direct reporting NFFE.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    directReportingNffeSponsoringEntity?: string | null;
    /**
     * The name of the signer.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    signerName?: string | null;
    /**
     * The date when e-delivery was consented.
     * @type {Date}
     * @memberof W8ImyFormRequest
     */
    eDeliveryConsentedAt?: Date | null;
    /**
     * The signature of the form.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    signature?: string | null;
    /**
     * The ID of the associated company.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    companyId: string;
    /**
     * A reference identifier for the form.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    referenceId?: string | null;
    /**
     * The email address of the individual associated with the form.
     * @type {string}
     * @memberof W8ImyFormRequest
     */
    email?: string | null;
}

/**
* @export
* @enum {string}
*/
export enum W8ImyFormRequestTypeEnum {
    W4 = 'W4',
    W8Ben = 'W8Ben',
    W8BenE = 'W8BenE',
    W8Imy = 'W8Imy',
    W9 = 'W9'
}

/**
 * Check if a given object implements the W8ImyFormRequest interface.
 */
export function instanceOfW8ImyFormRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "companyId" in value;

    return isInstance;
}

export function W8ImyFormRequestFromJSON(json: any): W8ImyFormRequest {
    return W8ImyFormRequestFromJSONTyped(json, false);
}

export function W8ImyFormRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): W8ImyFormRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'citizenshipCountry': !exists(json, 'citizenshipCountry') ? undefined : json['citizenshipCountry'],
        'disregardedEntity': !exists(json, 'disregardedEntity') ? undefined : json['disregardedEntity'],
        'entityType': !exists(json, 'entityType') ? undefined : json['entityType'],
        'fatcaStatus': !exists(json, 'fatcaStatus') ? undefined : json['fatcaStatus'],
        'residenceAddress': !exists(json, 'residenceAddress') ? undefined : json['residenceAddress'],
        'residenceCity': !exists(json, 'residenceCity') ? undefined : json['residenceCity'],
        'residenceState': !exists(json, 'residenceState') ? undefined : json['residenceState'],
        'residenceZip': !exists(json, 'residenceZip') ? undefined : json['residenceZip'],
        'residenceCountry': !exists(json, 'residenceCountry') ? undefined : json['residenceCountry'],
        'residenceIsMailing': !exists(json, 'residenceIsMailing') ? undefined : json['residenceIsMailing'],
        'mailingAddress': !exists(json, 'mailingAddress') ? undefined : json['mailingAddress'],
        'mailingCity': !exists(json, 'mailingCity') ? undefined : json['mailingCity'],
        'mailingState': !exists(json, 'mailingState') ? undefined : json['mailingState'],
        'mailingZip': !exists(json, 'mailingZip') ? undefined : json['mailingZip'],
        'mailingCountry': !exists(json, 'mailingCountry') ? undefined : json['mailingCountry'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'giin': !exists(json, 'giin') ? undefined : json['giin'],
        'foreignTin': !exists(json, 'foreignTin') ? undefined : json['foreignTin'],
        'referenceNumber': !exists(json, 'referenceNumber') ? undefined : json['referenceNumber'],
        'disregardedEntityFatcaStatus': !exists(json, 'disregardedEntityFatcaStatus') ? undefined : json['disregardedEntityFatcaStatus'],
        'disregardedAddress': !exists(json, 'disregardedAddress') ? undefined : json['disregardedAddress'],
        'disregardedCity': !exists(json, 'disregardedCity') ? undefined : json['disregardedCity'],
        'disregardedState': !exists(json, 'disregardedState') ? undefined : json['disregardedState'],
        'disregardedZip': !exists(json, 'disregardedZip') ? undefined : json['disregardedZip'],
        'disregardedCountry': !exists(json, 'disregardedCountry') ? undefined : json['disregardedCountry'],
        'disregardedEntityGiin': !exists(json, 'disregardedEntityGiin') ? undefined : json['disregardedEntityGiin'],
        'qualifiedIntermediaryCertification': !exists(json, 'qualifiedIntermediaryCertification') ? undefined : json['qualifiedIntermediaryCertification'],
        'qiPrimaryWithholdingResponsibilityCertification': !exists(json, 'qiPrimaryWithholdingResponsibilityCertification') ? undefined : json['qiPrimaryWithholdingResponsibilityCertification'],
        'qiWithholdingResponsibilityForPtpSalesCertification': !exists(json, 'qiWithholdingResponsibilityForPtpSalesCertification') ? undefined : json['qiWithholdingResponsibilityForPtpSalesCertification'],
        'qiNomineeWithholdingResponsibilityForPtpDistributionsCertification': !exists(json, 'qiNomineeWithholdingResponsibilityForPtpDistributionsCertification') ? undefined : json['qiNomineeWithholdingResponsibilityForPtpDistributionsCertification'],
        'qiSecuritiesLenderSubstituteDividendWithholdingCertification': !exists(json, 'qiSecuritiesLenderSubstituteDividendWithholdingCertification') ? undefined : json['qiSecuritiesLenderSubstituteDividendWithholdingCertification'],
        'qiWithholdingAnd1099ReportingResponsibilityCertification': !exists(json, 'qiWithholdingAnd1099ReportingResponsibilityCertification') ? undefined : json['qiWithholdingAnd1099ReportingResponsibilityCertification'],
        'qiForm1099OrFatcaReportingResponsibilityCertification': !exists(json, 'qiForm1099OrFatcaReportingResponsibilityCertification') ? undefined : json['qiForm1099OrFatcaReportingResponsibilityCertification'],
        'qiOptOutOfForm1099ReportingCertification': !exists(json, 'qiOptOutOfForm1099ReportingCertification') ? undefined : json['qiOptOutOfForm1099ReportingCertification'],
        'qiWithholdingRatePoolCertification': !exists(json, 'qiWithholdingRatePoolCertification') ? undefined : json['qiWithholdingRatePoolCertification'],
        'qiIntermediaryOrFlowThroughEntityDocumentationCertification': !exists(json, 'qiIntermediaryOrFlowThroughEntityDocumentationCertification') ? undefined : json['qiIntermediaryOrFlowThroughEntityDocumentationCertification'],
        'qualifiedDerivativesDealerCertification': !exists(json, 'qualifiedDerivativesDealerCertification') ? undefined : json['qualifiedDerivativesDealerCertification'],
        'qddCorporation': !exists(json, 'qddCorporation') ? undefined : json['qddCorporation'],
        'qddPartnership': !exists(json, 'qddPartnership') ? undefined : json['qddPartnership'],
        'qddDisregardedEntity': !exists(json, 'qddDisregardedEntity') ? undefined : json['qddDisregardedEntity'],
        'nonqualifiedIntermediaryCertification': !exists(json, 'nonqualifiedIntermediaryCertification') ? undefined : json['nonqualifiedIntermediaryCertification'],
        'nqiWithholdingStatementTransmissionCertification': !exists(json, 'nqiWithholdingStatementTransmissionCertification') ? undefined : json['nqiWithholdingStatementTransmissionCertification'],
        'nqiWithholdingRatePoolComplianceCertification': !exists(json, 'nqiWithholdingRatePoolComplianceCertification') ? undefined : json['nqiWithholdingRatePoolComplianceCertification'],
        'nqiQualifiedSecuritiesLenderCertification': !exists(json, 'nqiQualifiedSecuritiesLenderCertification') ? undefined : json['nqiQualifiedSecuritiesLenderCertification'],
        'nqiAlternativeWithholdingStatementVerificationCertification': !exists(json, 'nqiAlternativeWithholdingStatementVerificationCertification') ? undefined : json['nqiAlternativeWithholdingStatementVerificationCertification'],
        'territoryFinancialInstitutionCertification': !exists(json, 'territoryFinancialInstitutionCertification') ? undefined : json['territoryFinancialInstitutionCertification'],
        'tfiTreatedAsUsPersonCertification': !exists(json, 'tfiTreatedAsUsPersonCertification') ? undefined : json['tfiTreatedAsUsPersonCertification'],
        'tfiWithholdingStatementTransmissionCertification': !exists(json, 'tfiWithholdingStatementTransmissionCertification') ? undefined : json['tfiWithholdingStatementTransmissionCertification'],
        'tfiTreatedAsUsPersonForPtpSalesCertification': !exists(json, 'tfiTreatedAsUsPersonForPtpSalesCertification') ? undefined : json['tfiTreatedAsUsPersonForPtpSalesCertification'],
        'tfiNomineeUsPersonForPtpDistributionsCertification': !exists(json, 'tfiNomineeUsPersonForPtpDistributionsCertification') ? undefined : json['tfiNomineeUsPersonForPtpDistributionsCertification'],
        'tfiNotNomineeForPtpDistributionsCertification': !exists(json, 'tfiNotNomineeForPtpDistributionsCertification') ? undefined : json['tfiNotNomineeForPtpDistributionsCertification'],
        'usBranchNonEffectivelyConnectedIncomeCertification': !exists(json, 'usBranchNonEffectivelyConnectedIncomeCertification') ? undefined : json['usBranchNonEffectivelyConnectedIncomeCertification'],
        'usBranchAgreementToBeTreatedAsUsPersonCertification': !exists(json, 'usBranchAgreementToBeTreatedAsUsPersonCertification') ? undefined : json['usBranchAgreementToBeTreatedAsUsPersonCertification'],
        'usBranchWithholdingStatementAndComplianceCertification': !exists(json, 'usBranchWithholdingStatementAndComplianceCertification') ? undefined : json['usBranchWithholdingStatementAndComplianceCertification'],
        'usBranchActingAsUsPersonForPtpSalesCertification': !exists(json, 'usBranchActingAsUsPersonForPtpSalesCertification') ? undefined : json['usBranchActingAsUsPersonForPtpSalesCertification'],
        'usBranchNomineeForPtpDistributionsCertification': !exists(json, 'usBranchNomineeForPtpDistributionsCertification') ? undefined : json['usBranchNomineeForPtpDistributionsCertification'],
        'usBranchNotNomineeForPtpDistributionsCertification': !exists(json, 'usBranchNotNomineeForPtpDistributionsCertification') ? undefined : json['usBranchNotNomineeForPtpDistributionsCertification'],
        'withholdingForeignPartnershipOrTrustCertification': !exists(json, 'withholdingForeignPartnershipOrTrustCertification') ? undefined : json['withholdingForeignPartnershipOrTrustCertification'],
        'nonwithholdingForeignEntityWithholdingStatementCertification': !exists(json, 'nonwithholdingForeignEntityWithholdingStatementCertification') ? undefined : json['nonwithholdingForeignEntityWithholdingStatementCertification'],
        'foreignEntityPartnerInLowerTierPartnershipCertification': !exists(json, 'foreignEntityPartnerInLowerTierPartnershipCertification') ? undefined : json['foreignEntityPartnerInLowerTierPartnershipCertification'],
        'foreignPartnershipAmountRealizedSection1446FCertification': !exists(json, 'foreignPartnershipAmountRealizedSection1446FCertification') ? undefined : json['foreignPartnershipAmountRealizedSection1446FCertification'],
        'foreignPartnershipModifiedAmountRealizedCertification': !exists(json, 'foreignPartnershipModifiedAmountRealizedCertification') ? undefined : json['foreignPartnershipModifiedAmountRealizedCertification'],
        'foreignGrantorTrustAmountRealizedAllocationCertification': !exists(json, 'foreignGrantorTrustAmountRealizedAllocationCertification') ? undefined : json['foreignGrantorTrustAmountRealizedAllocationCertification'],
        'alternativeWithholdingStatementRelianceCertification': !exists(json, 'alternativeWithholdingStatementRelianceCertification') ? undefined : json['alternativeWithholdingStatementRelianceCertification'],
        'npFfiWithExemptBeneficialOwnersCertification': !exists(json, 'npFfiWithExemptBeneficialOwnersCertification') ? undefined : json['npFfiWithExemptBeneficialOwnersCertification'],
        'ffiSponsoringEntity': !exists(json, 'ffiSponsoringEntity') ? undefined : json['ffiSponsoringEntity'],
        'investmentEntityCertification': !exists(json, 'investmentEntityCertification') ? undefined : json['investmentEntityCertification'],
        'controlledForeignCorporationCertification': !exists(json, 'controlledForeignCorporationCertification') ? undefined : json['controlledForeignCorporationCertification'],
        'ownerDocumentedFfiCertification': !exists(json, 'ownerDocumentedFfiCertification') ? undefined : json['ownerDocumentedFfiCertification'],
        'ownerDocumentedFfiReportingStatementCertification': !exists(json, 'ownerDocumentedFfiReportingStatementCertification') ? undefined : json['ownerDocumentedFfiReportingStatementCertification'],
        'ownerDocumentedFfiAuditorLetterCertification': !exists(json, 'ownerDocumentedFfiAuditorLetterCertification') ? undefined : json['ownerDocumentedFfiAuditorLetterCertification'],
        'compliantNonregisteringLocalBankCertification': !exists(json, 'compliantNonregisteringLocalBankCertification') ? undefined : json['compliantNonregisteringLocalBankCertification'],
        'compliantFfiLowValueAccountsCertification': !exists(json, 'compliantFfiLowValueAccountsCertification') ? undefined : json['compliantFfiLowValueAccountsCertification'],
        'sponsoredCloselyHeldEntitySponsoringEntity': !exists(json, 'sponsoredCloselyHeldEntitySponsoringEntity') ? undefined : json['sponsoredCloselyHeldEntitySponsoringEntity'],
        'sponsoredCloselyHeldInvestmentVehicleCertification': !exists(json, 'sponsoredCloselyHeldInvestmentVehicleCertification') ? undefined : json['sponsoredCloselyHeldInvestmentVehicleCertification'],
        'compliantLimitedLifeDebtEntityCertification': !exists(json, 'compliantLimitedLifeDebtEntityCertification') ? undefined : json['compliantLimitedLifeDebtEntityCertification'],
        'investmentEntityNoFinancialAccountsCertification': !exists(json, 'investmentEntityNoFinancialAccountsCertification') ? undefined : json['investmentEntityNoFinancialAccountsCertification'],
        'restrictedDistributorCertification': !exists(json, 'restrictedDistributorCertification') ? undefined : json['restrictedDistributorCertification'],
        'restrictedDistributorAgreementCertification': !exists(json, 'restrictedDistributorAgreementCertification') ? undefined : json['restrictedDistributorAgreementCertification'],
        'restrictedDistributorPreexistingSalesComplianceCertification': !exists(json, 'restrictedDistributorPreexistingSalesComplianceCertification') ? undefined : json['restrictedDistributorPreexistingSalesComplianceCertification'],
        'foreignCentralBankOfIssueCertification': !exists(json, 'foreignCentralBankOfIssueCertification') ? undefined : json['foreignCentralBankOfIssueCertification'],
        'nonreportingIgaFfiCertification': !exists(json, 'nonreportingIgaFfiCertification') ? undefined : json['nonreportingIgaFfiCertification'],
        'igaCountry': !exists(json, 'igaCountry') ? undefined : json['igaCountry'],
        'igaModel': !exists(json, 'igaModel') ? undefined : json['igaModel'],
        'igaLegalStatusTreatment': !exists(json, 'igaLegalStatusTreatment') ? undefined : json['igaLegalStatusTreatment'],
        'igaFfiTrusteeOrSponsor': !exists(json, 'igaFfiTrusteeOrSponsor') ? undefined : json['igaFfiTrusteeOrSponsor'],
        'igaFfiTrusteeIsForeign': !exists(json, 'igaFfiTrusteeIsForeign') ? undefined : json['igaFfiTrusteeIsForeign'],
        'treatyQualifiedPensionFundCertification': !exists(json, 'treatyQualifiedPensionFundCertification') ? undefined : json['treatyQualifiedPensionFundCertification'],
        'qualifiedRetirementFundCertification': !exists(json, 'qualifiedRetirementFundCertification') ? undefined : json['qualifiedRetirementFundCertification'],
        'narrowParticipationRetirementFundCertification': !exists(json, 'narrowParticipationRetirementFundCertification') ? undefined : json['narrowParticipationRetirementFundCertification'],
        'section401AEquivalentPensionPlanCertification': !exists(json, 'section401AEquivalentPensionPlanCertification') ? undefined : json['section401AEquivalentPensionPlanCertification'],
        'investmentEntityForRetirementFundsCertification': !exists(json, 'investmentEntityForRetirementFundsCertification') ? undefined : json['investmentEntityForRetirementFundsCertification'],
        'exemptBeneficialOwnerSponsoredRetirementFundCertification': !exists(json, 'exemptBeneficialOwnerSponsoredRetirementFundCertification') ? undefined : json['exemptBeneficialOwnerSponsoredRetirementFundCertification'],
        'exceptedNonfinancialGroupEntityCertification': !exists(json, 'exceptedNonfinancialGroupEntityCertification') ? undefined : json['exceptedNonfinancialGroupEntityCertification'],
        'exceptedNonfinancialStartUpCertification': !exists(json, 'exceptedNonfinancialStartUpCertification') ? undefined : json['exceptedNonfinancialStartUpCertification'],
        'startupFormationOrResolutionDate': !exists(json, 'startupFormationOrResolutionDate') ? undefined : (json['startupFormationOrResolutionDate'] === null ? null : new Date(json['startupFormationOrResolutionDate'])),
        'exceptedNonfinancialEntityInLiquidationOrBankruptcyCertification': !exists(json, 'exceptedNonfinancialEntityInLiquidationOrBankruptcyCertification') ? undefined : json['exceptedNonfinancialEntityInLiquidationOrBankruptcyCertification'],
        'nonfinancialEntityFilingDate': !exists(json, 'nonfinancialEntityFilingDate') ? undefined : (json['nonfinancialEntityFilingDate'] === null ? null : new Date(json['nonfinancialEntityFilingDate'])),
        'publiclyTradedNffeCertification': !exists(json, 'publiclyTradedNffeCertification') ? undefined : json['publiclyTradedNffeCertification'],
        'publiclyTradedNffeSecuritiesMarket': !exists(json, 'publiclyTradedNffeSecuritiesMarket') ? undefined : json['publiclyTradedNffeSecuritiesMarket'],
        'nffeAffiliateOfPubliclyTradedEntityCertification': !exists(json, 'nffeAffiliateOfPubliclyTradedEntityCertification') ? undefined : json['nffeAffiliateOfPubliclyTradedEntityCertification'],
        'publiclyTradedEntity': !exists(json, 'publiclyTradedEntity') ? undefined : json['publiclyTradedEntity'],
        'nffeAffiliateOfPubliclyTradedEntitySecuritiesMarket': !exists(json, 'nffeAffiliateOfPubliclyTradedEntitySecuritiesMarket') ? undefined : json['nffeAffiliateOfPubliclyTradedEntitySecuritiesMarket'],
        'exceptedTerritoryNffeCertification': !exists(json, 'exceptedTerritoryNffeCertification') ? undefined : json['exceptedTerritoryNffeCertification'],
        'activeNffeCertification': !exists(json, 'activeNffeCertification') ? undefined : json['activeNffeCertification'],
        'passiveNffeCertification': !exists(json, 'passiveNffeCertification') ? undefined : json['passiveNffeCertification'],
        'sponsoredDirectReportingNffeCertification': !exists(json, 'sponsoredDirectReportingNffeCertification') ? undefined : json['sponsoredDirectReportingNffeCertification'],
        'directReportingNffeSponsoringEntity': !exists(json, 'directReportingNffeSponsoringEntity') ? undefined : json['directReportingNffeSponsoringEntity'],
        'signerName': !exists(json, 'signerName') ? undefined : json['signerName'],
        'eDeliveryConsentedAt': !exists(json, 'eDeliveryConsentedAt') ? undefined : (json['eDeliveryConsentedAt'] === null ? null : new Date(json['eDeliveryConsentedAt'])),
        'signature': !exists(json, 'signature') ? undefined : json['signature'],
        'companyId': json['companyId'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'email': !exists(json, 'email') ? undefined : json['email'],
    };
}

export function W8ImyFormRequestToJSON(value?: W8ImyFormRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'citizenshipCountry': value.citizenshipCountry,
        'disregardedEntity': value.disregardedEntity,
        'entityType': value.entityType,
        'fatcaStatus': value.fatcaStatus,
        'residenceAddress': value.residenceAddress,
        'residenceCity': value.residenceCity,
        'residenceState': value.residenceState,
        'residenceZip': value.residenceZip,
        'residenceCountry': value.residenceCountry,
        'residenceIsMailing': value.residenceIsMailing,
        'mailingAddress': value.mailingAddress,
        'mailingCity': value.mailingCity,
        'mailingState': value.mailingState,
        'mailingZip': value.mailingZip,
        'mailingCountry': value.mailingCountry,
        'tinType': value.tinType,
        'tin': value.tin,
        'giin': value.giin,
        'foreignTin': value.foreignTin,
        'referenceNumber': value.referenceNumber,
        'disregardedEntityFatcaStatus': value.disregardedEntityFatcaStatus,
        'disregardedAddress': value.disregardedAddress,
        'disregardedCity': value.disregardedCity,
        'disregardedState': value.disregardedState,
        'disregardedZip': value.disregardedZip,
        'disregardedCountry': value.disregardedCountry,
        'disregardedEntityGiin': value.disregardedEntityGiin,
        'qualifiedIntermediaryCertification': value.qualifiedIntermediaryCertification,
        'qiPrimaryWithholdingResponsibilityCertification': value.qiPrimaryWithholdingResponsibilityCertification,
        'qiWithholdingResponsibilityForPtpSalesCertification': value.qiWithholdingResponsibilityForPtpSalesCertification,
        'qiNomineeWithholdingResponsibilityForPtpDistributionsCertification': value.qiNomineeWithholdingResponsibilityForPtpDistributionsCertification,
        'qiSecuritiesLenderSubstituteDividendWithholdingCertification': value.qiSecuritiesLenderSubstituteDividendWithholdingCertification,
        'qiWithholdingAnd1099ReportingResponsibilityCertification': value.qiWithholdingAnd1099ReportingResponsibilityCertification,
        'qiForm1099OrFatcaReportingResponsibilityCertification': value.qiForm1099OrFatcaReportingResponsibilityCertification,
        'qiOptOutOfForm1099ReportingCertification': value.qiOptOutOfForm1099ReportingCertification,
        'qiWithholdingRatePoolCertification': value.qiWithholdingRatePoolCertification,
        'qiIntermediaryOrFlowThroughEntityDocumentationCertification': value.qiIntermediaryOrFlowThroughEntityDocumentationCertification,
        'qualifiedDerivativesDealerCertification': value.qualifiedDerivativesDealerCertification,
        'qddCorporation': value.qddCorporation,
        'qddPartnership': value.qddPartnership,
        'qddDisregardedEntity': value.qddDisregardedEntity,
        'nonqualifiedIntermediaryCertification': value.nonqualifiedIntermediaryCertification,
        'nqiWithholdingStatementTransmissionCertification': value.nqiWithholdingStatementTransmissionCertification,
        'nqiWithholdingRatePoolComplianceCertification': value.nqiWithholdingRatePoolComplianceCertification,
        'nqiQualifiedSecuritiesLenderCertification': value.nqiQualifiedSecuritiesLenderCertification,
        'nqiAlternativeWithholdingStatementVerificationCertification': value.nqiAlternativeWithholdingStatementVerificationCertification,
        'territoryFinancialInstitutionCertification': value.territoryFinancialInstitutionCertification,
        'tfiTreatedAsUsPersonCertification': value.tfiTreatedAsUsPersonCertification,
        'tfiWithholdingStatementTransmissionCertification': value.tfiWithholdingStatementTransmissionCertification,
        'tfiTreatedAsUsPersonForPtpSalesCertification': value.tfiTreatedAsUsPersonForPtpSalesCertification,
        'tfiNomineeUsPersonForPtpDistributionsCertification': value.tfiNomineeUsPersonForPtpDistributionsCertification,
        'tfiNotNomineeForPtpDistributionsCertification': value.tfiNotNomineeForPtpDistributionsCertification,
        'usBranchNonEffectivelyConnectedIncomeCertification': value.usBranchNonEffectivelyConnectedIncomeCertification,
        'usBranchAgreementToBeTreatedAsUsPersonCertification': value.usBranchAgreementToBeTreatedAsUsPersonCertification,
        'usBranchWithholdingStatementAndComplianceCertification': value.usBranchWithholdingStatementAndComplianceCertification,
        'usBranchActingAsUsPersonForPtpSalesCertification': value.usBranchActingAsUsPersonForPtpSalesCertification,
        'usBranchNomineeForPtpDistributionsCertification': value.usBranchNomineeForPtpDistributionsCertification,
        'usBranchNotNomineeForPtpDistributionsCertification': value.usBranchNotNomineeForPtpDistributionsCertification,
        'withholdingForeignPartnershipOrTrustCertification': value.withholdingForeignPartnershipOrTrustCertification,
        'nonwithholdingForeignEntityWithholdingStatementCertification': value.nonwithholdingForeignEntityWithholdingStatementCertification,
        'foreignEntityPartnerInLowerTierPartnershipCertification': value.foreignEntityPartnerInLowerTierPartnershipCertification,
        'foreignPartnershipAmountRealizedSection1446FCertification': value.foreignPartnershipAmountRealizedSection1446FCertification,
        'foreignPartnershipModifiedAmountRealizedCertification': value.foreignPartnershipModifiedAmountRealizedCertification,
        'foreignGrantorTrustAmountRealizedAllocationCertification': value.foreignGrantorTrustAmountRealizedAllocationCertification,
        'alternativeWithholdingStatementRelianceCertification': value.alternativeWithholdingStatementRelianceCertification,
        'npFfiWithExemptBeneficialOwnersCertification': value.npFfiWithExemptBeneficialOwnersCertification,
        'ffiSponsoringEntity': value.ffiSponsoringEntity,
        'investmentEntityCertification': value.investmentEntityCertification,
        'controlledForeignCorporationCertification': value.controlledForeignCorporationCertification,
        'ownerDocumentedFfiCertification': value.ownerDocumentedFfiCertification,
        'ownerDocumentedFfiReportingStatementCertification': value.ownerDocumentedFfiReportingStatementCertification,
        'ownerDocumentedFfiAuditorLetterCertification': value.ownerDocumentedFfiAuditorLetterCertification,
        'compliantNonregisteringLocalBankCertification': value.compliantNonregisteringLocalBankCertification,
        'compliantFfiLowValueAccountsCertification': value.compliantFfiLowValueAccountsCertification,
        'sponsoredCloselyHeldEntitySponsoringEntity': value.sponsoredCloselyHeldEntitySponsoringEntity,
        'sponsoredCloselyHeldInvestmentVehicleCertification': value.sponsoredCloselyHeldInvestmentVehicleCertification,
        'compliantLimitedLifeDebtEntityCertification': value.compliantLimitedLifeDebtEntityCertification,
        'investmentEntityNoFinancialAccountsCertification': value.investmentEntityNoFinancialAccountsCertification,
        'restrictedDistributorCertification': value.restrictedDistributorCertification,
        'restrictedDistributorAgreementCertification': value.restrictedDistributorAgreementCertification,
        'restrictedDistributorPreexistingSalesComplianceCertification': value.restrictedDistributorPreexistingSalesComplianceCertification,
        'foreignCentralBankOfIssueCertification': value.foreignCentralBankOfIssueCertification,
        'nonreportingIgaFfiCertification': value.nonreportingIgaFfiCertification,
        'igaCountry': value.igaCountry,
        'igaModel': value.igaModel,
        'igaLegalStatusTreatment': value.igaLegalStatusTreatment,
        'igaFfiTrusteeOrSponsor': value.igaFfiTrusteeOrSponsor,
        'igaFfiTrusteeIsForeign': value.igaFfiTrusteeIsForeign,
        'treatyQualifiedPensionFundCertification': value.treatyQualifiedPensionFundCertification,
        'qualifiedRetirementFundCertification': value.qualifiedRetirementFundCertification,
        'narrowParticipationRetirementFundCertification': value.narrowParticipationRetirementFundCertification,
        'section401AEquivalentPensionPlanCertification': value.section401AEquivalentPensionPlanCertification,
        'investmentEntityForRetirementFundsCertification': value.investmentEntityForRetirementFundsCertification,
        'exemptBeneficialOwnerSponsoredRetirementFundCertification': value.exemptBeneficialOwnerSponsoredRetirementFundCertification,
        'exceptedNonfinancialGroupEntityCertification': value.exceptedNonfinancialGroupEntityCertification,
        'exceptedNonfinancialStartUpCertification': value.exceptedNonfinancialStartUpCertification,
        'startupFormationOrResolutionDate': value.startupFormationOrResolutionDate === undefined ? undefined : (value.startupFormationOrResolutionDate === null ? null : value.startupFormationOrResolutionDate.toISOString().substr(0,10)),
        'exceptedNonfinancialEntityInLiquidationOrBankruptcyCertification': value.exceptedNonfinancialEntityInLiquidationOrBankruptcyCertification,
        'nonfinancialEntityFilingDate': value.nonfinancialEntityFilingDate === undefined ? undefined : (value.nonfinancialEntityFilingDate === null ? null : value.nonfinancialEntityFilingDate.toISOString().substr(0,10)),
        'publiclyTradedNffeCertification': value.publiclyTradedNffeCertification,
        'publiclyTradedNffeSecuritiesMarket': value.publiclyTradedNffeSecuritiesMarket,
        'nffeAffiliateOfPubliclyTradedEntityCertification': value.nffeAffiliateOfPubliclyTradedEntityCertification,
        'publiclyTradedEntity': value.publiclyTradedEntity,
        'nffeAffiliateOfPubliclyTradedEntitySecuritiesMarket': value.nffeAffiliateOfPubliclyTradedEntitySecuritiesMarket,
        'exceptedTerritoryNffeCertification': value.exceptedTerritoryNffeCertification,
        'activeNffeCertification': value.activeNffeCertification,
        'passiveNffeCertification': value.passiveNffeCertification,
        'sponsoredDirectReportingNffeCertification': value.sponsoredDirectReportingNffeCertification,
        'directReportingNffeSponsoringEntity': value.directReportingNffeSponsoringEntity,
        'signerName': value.signerName,
        'eDeliveryConsentedAt': value.eDeliveryConsentedAt === undefined ? undefined : (value.eDeliveryConsentedAt === null ? null : value.eDeliveryConsentedAt.toISOString()),
        'signature': value.signature,
        'companyId': value.companyId,
        'referenceId': value.referenceId,
        'email': value.email,
    };
}
