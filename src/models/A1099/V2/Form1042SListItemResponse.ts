/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    Form1099StatusDetailResponse,
    Form1099StatusDetailResponseFromJSON,
    Form1099StatusDetailResponseFromJSONTyped,
    Form1099StatusDetailResponseToJSON,
} from './Form1099StatusDetailResponse';
import {
    IntermediaryOrFlowThroughResponse,
    IntermediaryOrFlowThroughResponseFromJSON,
    IntermediaryOrFlowThroughResponseFromJSONTyped,
    IntermediaryOrFlowThroughResponseToJSON,
} from './IntermediaryOrFlowThroughResponse';
import {
    PrimaryWithholdingAgentResponse,
    PrimaryWithholdingAgentResponseFromJSON,
    PrimaryWithholdingAgentResponseFromJSONTyped,
    PrimaryWithholdingAgentResponseToJSON,
} from './PrimaryWithholdingAgentResponse';
import {
    StateAndLocalWithholdingResponse,
    StateAndLocalWithholdingResponseFromJSON,
    StateAndLocalWithholdingResponseFromJSONTyped,
    StateAndLocalWithholdingResponseToJSON,
} from './StateAndLocalWithholdingResponse';
import {
    StateEfileStatusDetailResponse,
    StateEfileStatusDetailResponseFromJSON,
    StateEfileStatusDetailResponseFromJSONTyped,
    StateEfileStatusDetailResponseToJSON,
} from './StateEfileStatusDetailResponse';
import {
    ValidationErrorResponse,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseFromJSONTyped,
    ValidationErrorResponseToJSON,
} from './ValidationErrorResponse';

/**
 * 
 * @export
 * @interface Form1042SListItemResponse
 */
export interface Form1042SListItemResponse {
    /**
     * Unique form identifier
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    uniqueFormId?: string;
    /**
     * No TIN indicator
     * @type {boolean}
     * @memberof Form1042SListItemResponse
     */
    noTin?: boolean | null;
    /**
     * Recipient's date of birth
     * @type {Date}
     * @memberof Form1042SListItemResponse
     */
    recipientDateOfBirth?: Date | null;
    /**
     * Recipient's GIIN (Global Intermediary Identification Number)
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    recipientGiin?: string | null;
    /**
     * Recipient's foreign TIN
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    recipientForeignTin?: string | null;
    /**
     * Limitation on benefits code
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    lobCode?: string | null;
    /**
     * Income code
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    incomeCode?: string;
    /**
     * Gross income
     * @type {number}
     * @memberof Form1042SListItemResponse
     */
    grossIncome?: number;
    /**
     * Withholding indicator
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    withholdingIndicator?: string;
    /**
     * Country code
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    taxCountryCode?: string;
    /**
     * Exemption code (Chapter 3)
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    exemptionCodeChap3?: string | null;
    /**
     * Exemption code (Chapter 4)
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    exemptionCodeChap4?: string | null;
    /**
     * Tax rate (Chapter 3)
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    taxRateChap3?: string | null;
    /**
     * Withholding allowance
     * @type {number}
     * @memberof Form1042SListItemResponse
     */
    withholdingAllowance?: number | null;
    /**
     * Federal tax withheld
     * @type {number}
     * @memberof Form1042SListItemResponse
     */
    federalTaxWithheld?: number | null;
    /**
     * Tax not deposited indicator
     * @type {boolean}
     * @memberof Form1042SListItemResponse
     */
    taxNotDepositedIndicator?: boolean | null;
    /**
     * Academic indicator
     * @type {boolean}
     * @memberof Form1042SListItemResponse
     */
    academicIndicator?: boolean | null;
    /**
     * Tax withheld by other agents
     * @type {number}
     * @memberof Form1042SListItemResponse
     */
    taxWithheldOtherAgents?: number | null;
    /**
     * Amount repaid to recipient
     * @type {number}
     * @memberof Form1042SListItemResponse
     */
    amountRepaid?: number | null;
    /**
     * Tax paid by withholding agent
     * @type {number}
     * @memberof Form1042SListItemResponse
     */
    taxPaidAgent?: number | null;
    /**
     * Chapter 3 status code
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    chap3StatusCode?: string | null;
    /**
     * Chapter 4 status code
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    chap4StatusCode?: string | null;
    /**
     * Primary withholding agent information
     * @type {PrimaryWithholdingAgentResponse}
     * @memberof Form1042SListItemResponse
     */
    primaryWithholdingAgent?: PrimaryWithholdingAgentResponse;
    /**
     * Intermediary or flow-through entity information
     * @type {IntermediaryOrFlowThroughResponse}
     * @memberof Form1042SListItemResponse
     */
    intermediaryOrFlowThrough?: IntermediaryOrFlowThroughResponse;
    /**
     * ID of the form
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    readonly id: string;
    /**
     * Type of the form. Will be one of:
     * * 940
     * * 941
     * * 943
     * * 944
     * * 945
     * * 1042
     * * 1042-S
     * * 1095-B
     * * 1095-C
     * * 1097-BTC
     * * 1098
     * * 1098-C
     * * 1098-E
     * * 1098-Q
     * * 1098-T
     * * 3921
     * * 3922
     * * 5498
     * * 5498-ESA
     * * 5498-SA
     * * 1099-MISC
     * * 1099-A
     * * 1099-B
     * * 1099-C
     * * 1099-CAP
     * * 1099-DIV
     * * 1099-G
     * * 1099-INT
     * * 1099-K
     * * 1099-LS
     * * 1099-LTC
     * * 1099-NEC
     * * 1099-OID
     * * 1099-PATR
     * * 1099-Q
     * * 1099-R
     * * 1099-S
     * * 1099-SA
     * * T4A
     * * W-2
     * * W-2G
     * * 1099-HC
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    type: string;
    /**
     * Issuer ID
     * @type {number}
     * @memberof Form1042SListItemResponse
     */
    issuerId: number;
    /**
     * Issuer Reference ID
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    issuerReferenceId?: string | null;
    /**
     * Issuer TIN
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    issuerTin?: string | null;
    /**
     * Tax year
     * @type {number}
     * @memberof Form1042SListItemResponse
     */
    taxYear?: number;
    /**
     * Boolean indicating that federal e-filing has been scheduled for this form
     * @type {boolean}
     * @memberof Form1042SListItemResponse
     */
    federalEfile: boolean;
    /**
     * Federal e-file status
     * @type {Form1099StatusDetailResponse}
     * @memberof Form1042SListItemResponse
     */
    readonly federalEfileStatus?: Form1099StatusDetailResponse;
    /**
     * Boolean indicating that state e-filing has been scheduled for this form
     * @type {boolean}
     * @memberof Form1042SListItemResponse
     */
    stateEfile: boolean;
    /**
     * State e-file status
     * @type {Array<StateEfileStatusDetailResponse>}
     * @memberof Form1042SListItemResponse
     */
    readonly stateEfileStatus?: Array<StateEfileStatusDetailResponse> | null;
    /**
     * Boolean indicating that postal mailing to the recipient has been scheduled for this form
     * @type {boolean}
     * @memberof Form1042SListItemResponse
     */
    postalMail: boolean;
    /**
     * Postal mail to recipient status
     * @type {Form1099StatusDetailResponse}
     * @memberof Form1042SListItemResponse
     */
    readonly postalMailStatus?: Form1099StatusDetailResponse | null;
    /**
     * Boolean indicating that TIN Matching has been scheduled for this form
     * @type {boolean}
     * @memberof Form1042SListItemResponse
     */
    tinMatch: boolean;
    /**
     * TIN Match status
     * @type {Form1099StatusDetailResponse}
     * @memberof Form1042SListItemResponse
     */
    readonly tinMatchStatus?: Form1099StatusDetailResponse | null;
    /**
     * Boolean indicating that address verification has been scheduled for this form
     * @type {boolean}
     * @memberof Form1042SListItemResponse
     */
    addressVerification: boolean;
    /**
     * Address verification status
     * @type {Form1099StatusDetailResponse}
     * @memberof Form1042SListItemResponse
     */
    readonly addressVerificationStatus?: Form1099StatusDetailResponse | null;
    /**
     * Reference ID
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    referenceId?: string | null;
    /**
     * Recipient email address
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    email?: string | null;
    /**
     * Type of TIN (Tax ID Number). Will be one of:
     * * SSN
     * * EIN
     * * ITIN
     * * ATIN
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    tinType?: string | null;
    /**
     * Recipient Tax ID Number
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    tin?: string | null;
    /**
     * Recipient name
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    recipientName?: string | null;
    /**
     * Recipient second name
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    recipientSecondName?: string | null;
    /**
     * Address
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    address?: string | null;
    /**
     * Address line 2
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    address2?: string | null;
    /**
     * City
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    city?: string | null;
    /**
     * US state
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    state?: string | null;
    /**
     * Zip/postal code
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    zip?: string | null;
    /**
     * Foreign province
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    foreignProvince?: string | null;
    /**
     * Country code, as defined at https://www.irs.gov/e-file-providers/country-codes
     * @type {string}
     * @memberof Form1042SListItemResponse
     */
    countryCode?: string | null;
    /**
     * Validation errors
     * @type {Array<ValidationErrorResponse>}
     * @memberof Form1042SListItemResponse
     */
    readonly validationErrors?: Array<ValidationErrorResponse> | null;
    /**
     * Creation time
     * @type {Date}
     * @memberof Form1042SListItemResponse
     */
    readonly createdAt?: Date;
    /**
     * Update time
     * @type {Date}
     * @memberof Form1042SListItemResponse
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {StateAndLocalWithholdingResponse}
     * @memberof Form1042SListItemResponse
     */
    stateAndLocalWithholding?: StateAndLocalWithholdingResponse | null;
}



/**
 * Check if a given object implements the Form1042SListItemResponse interface.
 */
export function instanceOfForm1042SListItemResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "issuerId" in value;
    isInstance = isInstance && "federalEfile" in value;
    isInstance = isInstance && "stateEfile" in value;
    isInstance = isInstance && "postalMail" in value;
    isInstance = isInstance && "tinMatch" in value;
    isInstance = isInstance && "addressVerification" in value;

    return isInstance;
}

export function Form1042SListItemResponseFromJSON(json: any): Form1042SListItemResponse {
    return Form1042SListItemResponseFromJSONTyped(json, false);
}

export function Form1042SListItemResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1042SListItemResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uniqueFormId': !exists(json, 'uniqueFormId') ? undefined : json['uniqueFormId'],
        'noTin': !exists(json, 'noTin') ? undefined : json['noTin'],
        'recipientDateOfBirth': !exists(json, 'recipientDateOfBirth') ? undefined : (json['recipientDateOfBirth'] === null ? null : new Date(json['recipientDateOfBirth'])),
        'recipientGiin': !exists(json, 'recipientGiin') ? undefined : json['recipientGiin'],
        'recipientForeignTin': !exists(json, 'recipientForeignTin') ? undefined : json['recipientForeignTin'],
        'lobCode': !exists(json, 'lobCode') ? undefined : json['lobCode'],
        'incomeCode': !exists(json, 'incomeCode') ? undefined : json['incomeCode'],
        'grossIncome': !exists(json, 'grossIncome') ? undefined : json['grossIncome'],
        'withholdingIndicator': !exists(json, 'withholdingIndicator') ? undefined : json['withholdingIndicator'],
        'taxCountryCode': !exists(json, 'taxCountryCode') ? undefined : json['taxCountryCode'],
        'exemptionCodeChap3': !exists(json, 'exemptionCodeChap3') ? undefined : json['exemptionCodeChap3'],
        'exemptionCodeChap4': !exists(json, 'exemptionCodeChap4') ? undefined : json['exemptionCodeChap4'],
        'taxRateChap3': !exists(json, 'taxRateChap3') ? undefined : json['taxRateChap3'],
        'withholdingAllowance': !exists(json, 'withholdingAllowance') ? undefined : json['withholdingAllowance'],
        'federalTaxWithheld': !exists(json, 'federalTaxWithheld') ? undefined : json['federalTaxWithheld'],
        'taxNotDepositedIndicator': !exists(json, 'taxNotDepositedIndicator') ? undefined : json['taxNotDepositedIndicator'],
        'academicIndicator': !exists(json, 'academicIndicator') ? undefined : json['academicIndicator'],
        'taxWithheldOtherAgents': !exists(json, 'taxWithheldOtherAgents') ? undefined : json['taxWithheldOtherAgents'],
        'amountRepaid': !exists(json, 'amountRepaid') ? undefined : json['amountRepaid'],
        'taxPaidAgent': !exists(json, 'taxPaidAgent') ? undefined : json['taxPaidAgent'],
        'chap3StatusCode': !exists(json, 'chap3StatusCode') ? undefined : json['chap3StatusCode'],
        'chap4StatusCode': !exists(json, 'chap4StatusCode') ? undefined : json['chap4StatusCode'],
        'primaryWithholdingAgent': !exists(json, 'primaryWithholdingAgent') ? undefined : PrimaryWithholdingAgentResponseFromJSON(json['primaryWithholdingAgent']),
        'intermediaryOrFlowThrough': !exists(json, 'intermediaryOrFlowThrough') ? undefined : IntermediaryOrFlowThroughResponseFromJSON(json['intermediaryOrFlowThrough']),
        'id': json['id'],
        'type': json['type'],
        'issuerId': json['issuerId'],
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'federalEfile': json['federalEfile'],
        'federalEfileStatus': !exists(json, 'federalEfileStatus') ? undefined : Form1099StatusDetailResponseFromJSON(json['federalEfileStatus']),
        'stateEfile': json['stateEfile'],
        'stateEfileStatus': !exists(json, 'stateEfileStatus') ? undefined : (json['stateEfileStatus'] === null ? null : (json['stateEfileStatus'] as Array<any>)?.map(StateEfileStatusDetailResponseFromJSON)),
        'postalMail': json['postalMail'],
        'postalMailStatus': !exists(json, 'postalMailStatus') ? undefined : Form1099StatusDetailResponseFromJSON(json['postalMailStatus']),
        'tinMatch': json['tinMatch'],
        'tinMatchStatus': !exists(json, 'tinMatchStatus') ? undefined : Form1099StatusDetailResponseFromJSON(json['tinMatchStatus']),
        'addressVerification': json['addressVerification'],
        'addressVerificationStatus': !exists(json, 'addressVerificationStatus') ? undefined : Form1099StatusDetailResponseFromJSON(json['addressVerificationStatus']),
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'recipientName': !exists(json, 'recipientName') ? undefined : json['recipientName'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'foreignProvince': !exists(json, 'foreignProvince') ? undefined : json['foreignProvince'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>)?.map(ValidationErrorResponseFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingResponseFromJSON(json['stateAndLocalWithholding']),
    };
}

export function Form1042SListItemResponseToJSON(value?: Form1042SListItemResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uniqueFormId': value.uniqueFormId,
        'noTin': value.noTin,
        'recipientDateOfBirth': value.recipientDateOfBirth === undefined ? undefined : (value.recipientDateOfBirth === null ? null : value.recipientDateOfBirth.toISOString()),
        'recipientGiin': value.recipientGiin,
        'recipientForeignTin': value.recipientForeignTin,
        'lobCode': value.lobCode,
        'incomeCode': value.incomeCode,
        'grossIncome': value.grossIncome,
        'withholdingIndicator': value.withholdingIndicator,
        'taxCountryCode': value.taxCountryCode,
        'exemptionCodeChap3': value.exemptionCodeChap3,
        'exemptionCodeChap4': value.exemptionCodeChap4,
        'taxRateChap3': value.taxRateChap3,
        'withholdingAllowance': value.withholdingAllowance,
        'federalTaxWithheld': value.federalTaxWithheld,
        'taxNotDepositedIndicator': value.taxNotDepositedIndicator,
        'academicIndicator': value.academicIndicator,
        'taxWithheldOtherAgents': value.taxWithheldOtherAgents,
        'amountRepaid': value.amountRepaid,
        'taxPaidAgent': value.taxPaidAgent,
        'chap3StatusCode': value.chap3StatusCode,
        'chap4StatusCode': value.chap4StatusCode,
        'primaryWithholdingAgent': PrimaryWithholdingAgentResponseToJSON(value.primaryWithholdingAgent),
        'intermediaryOrFlowThrough': IntermediaryOrFlowThroughResponseToJSON(value.intermediaryOrFlowThrough),
        'type': value.type,
        'issuerId': value.issuerId,
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'federalEfile': value.federalEfile,
        'stateEfile': value.stateEfile,
        'postalMail': value.postalMail,
        'tinMatch': value.tinMatch,
        'addressVerification': value.addressVerification,
        'referenceId': value.referenceId,
        'email': value.email,
        'tinType': value.tinType,
        'tin': value.tin,
        'recipientName': value.recipientName,
        'recipientSecondName': value.recipientSecondName,
        'address': value.address,
        'address2': value.address2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'foreignProvince': value.foreignProvince,
        'countryCode': value.countryCode,
        'stateAndLocalWithholding': StateAndLocalWithholdingResponseToJSON(value.stateAndLocalWithholding),
    };
}
