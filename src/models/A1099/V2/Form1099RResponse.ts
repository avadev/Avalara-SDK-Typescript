/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    StateAndLocalWithholdingResponse,
    StateAndLocalWithholdingResponseFromJSON,
    StateAndLocalWithholdingResponseFromJSONTyped,
    StateAndLocalWithholdingResponseToJSON,
} from './StateAndLocalWithholdingResponse';
import {
    StateEfileStatusDetailResponse,
    StateEfileStatusDetailResponseFromJSON,
    StateEfileStatusDetailResponseFromJSONTyped,
    StateEfileStatusDetailResponseToJSON,
} from './StateEfileStatusDetailResponse';
import {
    StatusDetail,
    StatusDetailFromJSON,
    StatusDetailFromJSONTyped,
    StatusDetailToJSON,
} from './StatusDetail';
import {
    ValidationErrorResponse,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseFromJSONTyped,
    ValidationErrorResponseToJSON,
} from './ValidationErrorResponse';

/**
 * 
 * @export
 * @interface Form1099RResponse
 */
export interface Form1099RResponse {
    /**
     * Gross distribution
     * @type {number}
     * @memberof Form1099RResponse
     */
    grossDistribution?: number | null;
    /**
     * Taxable amount
     * @type {number}
     * @memberof Form1099RResponse
     */
    taxableAmount?: number | null;
    /**
     * Taxable amount not determined
     * @type {boolean}
     * @memberof Form1099RResponse
     */
    taxableAmountNotDetermined?: boolean | null;
    /**
     * Total distribution
     * @type {boolean}
     * @memberof Form1099RResponse
     */
    totalDistributionDetermined?: boolean | null;
    /**
     * Capital gain (included in Box 2a)
     * @type {number}
     * @memberof Form1099RResponse
     */
    capitalGain?: number | null;
    /**
     * Federal income tax withheld
     * @type {number}
     * @memberof Form1099RResponse
     */
    federalIncomeTaxWithheld?: number | null;
    /**
     * Employee contributions/Designated Roth contributions or insurance premiums
     * @type {number}
     * @memberof Form1099RResponse
     */
    employeeContributionsOrDesignatedRothOrInsurancePremiums?: number | null;
    /**
     * Net unrealized appreciation in employer's securities
     * @type {number}
     * @memberof Form1099RResponse
     */
    netUnrealizedAppreciationInEmployerSecurities?: number | null;
    /**
     * Distribution code
     * @type {string}
     * @memberof Form1099RResponse
     */
    distributionCode?: string | null;
    /**
     * Second distribution code
     * @type {string}
     * @memberof Form1099RResponse
     */
    secondDistributionCode?: string | null;
    /**
     * IRA/SEP/SIMPLE
     * @type {boolean}
     * @memberof Form1099RResponse
     */
    iraSepSimple?: boolean | null;
    /**
     * Traditional IRA/SEP/SIMPLE or Roth conversion amount
     * @type {number}
     * @memberof Form1099RResponse
     */
    traditionalIraSepSimpleOrRothConversionAmount?: number | null;
    /**
     * Other amount
     * @type {number}
     * @memberof Form1099RResponse
     */
    otherAmount?: number | null;
    /**
     * Other percentage
     * @type {string}
     * @memberof Form1099RResponse
     */
    otherPercentage?: string | null;
    /**
     * Total distribution percentage
     * @type {string}
     * @memberof Form1099RResponse
     */
    totalDistributionPercentage?: string | null;
    /**
     * Total employee contributions
     * @type {number}
     * @memberof Form1099RResponse
     */
    totalEmployeeContributions?: number | null;
    /**
     * Amount allocable to IRR within 5 years
     * @type {number}
     * @memberof Form1099RResponse
     */
    amountAllocableToIrrWithin5Years?: number | null;
    /**
     * First year of designated Roth contribution
     * @type {string}
     * @memberof Form1099RResponse
     */
    firstYearOfDesignatedRothContribution?: string | null;
    /**
     * FATCA filing requirement
     * @type {boolean}
     * @memberof Form1099RResponse
     */
    fatcaFilingRequirement?: boolean | null;
    /**
     * Date of payment
     * @type {Date}
     * @memberof Form1099RResponse
     */
    dateOfPayment?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    readonly type?: Form1099RResponseTypeEnum;
    /**
     * 
     * @type {Date}
     * @memberof Form1099RResponse
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Form1099RResponse
     */
    updatedAt?: Date;
    /**
     * 
     * @type {StateAndLocalWithholdingResponse}
     * @memberof Form1099RResponse
     */
    stateAndLocalWithholding?: StateAndLocalWithholdingResponse;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    tinType?: Form1099RResponseTinTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    issuerId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    issuerReferenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    issuerTin?: string;
    /**
     * 
     * @type {number}
     * @memberof Form1099RResponse
     */
    taxYear?: number;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    referenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    recipientName?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    recipientTin?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    recipientSecondName?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    address2?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    zip?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    accountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    officeCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    nonUsProvince?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099RResponse
     */
    countryCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RResponse
     */
    federalEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RResponse
     */
    postalMail?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RResponse
     */
    stateEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RResponse
     */
    tinMatch?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RResponse
     */
    noTin?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RResponse
     */
    secondTinNotice?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099RResponse
     */
    addressVerification?: boolean;
    /**
     * 
     * @type {StatusDetail}
     * @memberof Form1099RResponse
     */
    federalEfileStatus?: StatusDetail | null;
    /**
     * 
     * @type {StatusDetail}
     * @memberof Form1099RResponse
     */
    eDeliveryStatus?: StatusDetail | null;
    /**
     * 
     * @type {Array<StateEfileStatusDetailResponse>}
     * @memberof Form1099RResponse
     */
    stateEfileStatus?: Array<StateEfileStatusDetailResponse> | null;
    /**
     * 
     * @type {StatusDetail}
     * @memberof Form1099RResponse
     */
    postalMailStatus?: StatusDetail | null;
    /**
     * 
     * @type {StatusDetail}
     * @memberof Form1099RResponse
     */
    tinMatchStatus?: StatusDetail | null;
    /**
     * 
     * @type {StatusDetail}
     * @memberof Form1099RResponse
     */
    addressVerificationStatus?: StatusDetail | null;
    /**
     * 
     * @type {Array<ValidationErrorResponse>}
     * @memberof Form1099RResponse
     */
    validationErrors?: Array<ValidationErrorResponse> | null;
}

/**
* @export
* @enum {string}
*/
export enum Form1099RResponseTypeEnum {
    _1099Nec = '1099-NEC',
    _1099Misc = '1099-MISC',
    _1099Div = '1099-DIV',
    _1099R = '1099-R',
    _1099K = '1099-K',
    _1095B = '1095-B',
    _1042S = '1042-S',
    _1095C = '1095-C',
    _1099Int = '1099-INT'
}/**
* @export
* @enum {string}
*/
export enum Form1099RResponseTinTypeEnum {
    Ein = 'EIN',
    Ssn = 'SSN',
    Itin = 'ITIN',
    Atin = 'ATIN'
}

/**
 * Check if a given object implements the Form1099RResponse interface.
 */
export function instanceOfForm1099RResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function Form1099RResponseFromJSON(json: any): Form1099RResponse {
    return Form1099RResponseFromJSONTyped(json, false);
}

export function Form1099RResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1099RResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'grossDistribution': !exists(json, 'grossDistribution') ? undefined : json['grossDistribution'],
        'taxableAmount': !exists(json, 'taxableAmount') ? undefined : json['taxableAmount'],
        'taxableAmountNotDetermined': !exists(json, 'taxableAmountNotDetermined') ? undefined : json['taxableAmountNotDetermined'],
        'totalDistributionDetermined': !exists(json, 'totalDistributionDetermined') ? undefined : json['totalDistributionDetermined'],
        'capitalGain': !exists(json, 'capitalGain') ? undefined : json['capitalGain'],
        'federalIncomeTaxWithheld': !exists(json, 'federalIncomeTaxWithheld') ? undefined : json['federalIncomeTaxWithheld'],
        'employeeContributionsOrDesignatedRothOrInsurancePremiums': !exists(json, 'employeeContributionsOrDesignatedRothOrInsurancePremiums') ? undefined : json['employeeContributionsOrDesignatedRothOrInsurancePremiums'],
        'netUnrealizedAppreciationInEmployerSecurities': !exists(json, 'netUnrealizedAppreciationInEmployerSecurities') ? undefined : json['netUnrealizedAppreciationInEmployerSecurities'],
        'distributionCode': !exists(json, 'distributionCode') ? undefined : json['distributionCode'],
        'secondDistributionCode': !exists(json, 'secondDistributionCode') ? undefined : json['secondDistributionCode'],
        'iraSepSimple': !exists(json, 'iraSepSimple') ? undefined : json['iraSepSimple'],
        'traditionalIraSepSimpleOrRothConversionAmount': !exists(json, 'traditionalIraSepSimpleOrRothConversionAmount') ? undefined : json['traditionalIraSepSimpleOrRothConversionAmount'],
        'otherAmount': !exists(json, 'otherAmount') ? undefined : json['otherAmount'],
        'otherPercentage': !exists(json, 'otherPercentage') ? undefined : json['otherPercentage'],
        'totalDistributionPercentage': !exists(json, 'totalDistributionPercentage') ? undefined : json['totalDistributionPercentage'],
        'totalEmployeeContributions': !exists(json, 'totalEmployeeContributions') ? undefined : json['totalEmployeeContributions'],
        'amountAllocableToIrrWithin5Years': !exists(json, 'amountAllocableToIrrWithin5Years') ? undefined : json['amountAllocableToIrrWithin5Years'],
        'firstYearOfDesignatedRothContribution': !exists(json, 'firstYearOfDesignatedRothContribution') ? undefined : json['firstYearOfDesignatedRothContribution'],
        'fatcaFilingRequirement': !exists(json, 'fatcaFilingRequirement') ? undefined : json['fatcaFilingRequirement'],
        'dateOfPayment': !exists(json, 'dateOfPayment') ? undefined : (json['dateOfPayment'] === null ? null : new Date(json['dateOfPayment'])),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingResponseFromJSON(json['stateAndLocalWithholding']),
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'issuerId': !exists(json, 'issuerId') ? undefined : json['issuerId'],
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'recipientName': !exists(json, 'recipientName') ? undefined : json['recipientName'],
        'recipientTin': !exists(json, 'recipientTin') ? undefined : json['recipientTin'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'nonUsProvince': !exists(json, 'nonUsProvince') ? undefined : json['nonUsProvince'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'federalEFile': !exists(json, 'federalEFile') ? undefined : json['federalEFile'],
        'postalMail': !exists(json, 'postalMail') ? undefined : json['postalMail'],
        'stateEFile': !exists(json, 'stateEFile') ? undefined : json['stateEFile'],
        'tinMatch': !exists(json, 'tinMatch') ? undefined : json['tinMatch'],
        'noTin': !exists(json, 'noTin') ? undefined : json['noTin'],
        'secondTinNotice': !exists(json, 'secondTinNotice') ? undefined : json['secondTinNotice'],
        'addressVerification': !exists(json, 'addressVerification') ? undefined : json['addressVerification'],
        'federalEfileStatus': !exists(json, 'federalEfileStatus') ? undefined : StatusDetailFromJSON(json['federalEfileStatus']),
        'eDeliveryStatus': !exists(json, 'eDeliveryStatus') ? undefined : StatusDetailFromJSON(json['eDeliveryStatus']),
        'stateEfileStatus': !exists(json, 'stateEfileStatus') ? undefined : (json['stateEfileStatus'] === null ? null : (json['stateEfileStatus'] as Array<any>)?.map(StateEfileStatusDetailResponseFromJSON)),
        'postalMailStatus': !exists(json, 'postalMailStatus') ? undefined : StatusDetailFromJSON(json['postalMailStatus']),
        'tinMatchStatus': !exists(json, 'tinMatchStatus') ? undefined : StatusDetailFromJSON(json['tinMatchStatus']),
        'addressVerificationStatus': !exists(json, 'addressVerificationStatus') ? undefined : StatusDetailFromJSON(json['addressVerificationStatus']),
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>)?.map(ValidationErrorResponseFromJSON)),
    };
}

export function Form1099RResponseToJSON(value?: Form1099RResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'grossDistribution': value.grossDistribution,
        'taxableAmount': value.taxableAmount,
        'taxableAmountNotDetermined': value.taxableAmountNotDetermined,
        'totalDistributionDetermined': value.totalDistributionDetermined,
        'capitalGain': value.capitalGain,
        'federalIncomeTaxWithheld': value.federalIncomeTaxWithheld,
        'employeeContributionsOrDesignatedRothOrInsurancePremiums': value.employeeContributionsOrDesignatedRothOrInsurancePremiums,
        'netUnrealizedAppreciationInEmployerSecurities': value.netUnrealizedAppreciationInEmployerSecurities,
        'distributionCode': value.distributionCode,
        'secondDistributionCode': value.secondDistributionCode,
        'iraSepSimple': value.iraSepSimple,
        'traditionalIraSepSimpleOrRothConversionAmount': value.traditionalIraSepSimpleOrRothConversionAmount,
        'otherAmount': value.otherAmount,
        'otherPercentage': value.otherPercentage,
        'totalDistributionPercentage': value.totalDistributionPercentage,
        'totalEmployeeContributions': value.totalEmployeeContributions,
        'amountAllocableToIrrWithin5Years': value.amountAllocableToIrrWithin5Years,
        'firstYearOfDesignatedRothContribution': value.firstYearOfDesignatedRothContribution,
        'fatcaFilingRequirement': value.fatcaFilingRequirement,
        'dateOfPayment': value.dateOfPayment === undefined ? undefined : (value.dateOfPayment === null ? null : value.dateOfPayment.toISOString()),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'stateAndLocalWithholding': StateAndLocalWithholdingResponseToJSON(value.stateAndLocalWithholding),
        'tinType': value.tinType,
        'id': value.id,
        'issuerId': value.issuerId,
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'referenceId': value.referenceId,
        'recipientName': value.recipientName,
        'recipientTin': value.recipientTin,
        'recipientSecondName': value.recipientSecondName,
        'address': value.address,
        'address2': value.address2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'email': value.email,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'nonUsProvince': value.nonUsProvince,
        'countryCode': value.countryCode,
        'federalEFile': value.federalEFile,
        'postalMail': value.postalMail,
        'stateEFile': value.stateEFile,
        'tinMatch': value.tinMatch,
        'noTin': value.noTin,
        'secondTinNotice': value.secondTinNotice,
        'addressVerification': value.addressVerification,
        'federalEfileStatus': StatusDetailToJSON(value.federalEfileStatus),
        'eDeliveryStatus': StatusDetailToJSON(value.eDeliveryStatus),
        'stateEfileStatus': value.stateEfileStatus === undefined ? undefined : (value.stateEfileStatus === null ? null : (value.stateEfileStatus as Array<any>)?.map(StateEfileStatusDetailResponseToJSON)),
        'postalMailStatus': StatusDetailToJSON(value.postalMailStatus),
        'tinMatchStatus': StatusDetailToJSON(value.tinMatchStatus),
        'addressVerificationStatus': StatusDetailToJSON(value.addressVerificationStatus),
        'validationErrors': value.validationErrors === undefined ? undefined : (value.validationErrors === null ? null : (value.validationErrors as Array<any>)?.map(ValidationErrorResponseToJSON)),
    };
}
