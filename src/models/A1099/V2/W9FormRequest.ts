/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * 
 * @export
 * @interface W9FormRequest
 */
export interface W9FormRequest {
    /**
     * The form type (always "w9" for this model).
     * @type {string}
     * @memberof W9FormRequest
     */
    readonly type?: W9FormRequestTypeEnum;
    /**
     * The name of the individual or entity associated with the form.
     * @type {string}
     * @memberof W9FormRequest
     */
    name: string;
    /**
     * The name of the business associated with the form.
     * @type {string}
     * @memberof W9FormRequest
     */
    businessName?: string | null;
    /**
     * The classification of the business.
     * Available values:
     * - Individual: Individual/sole proprietor
     * - C Corporation: C Corporation
     * - S Corporation: S Corporation
     * - Partnership: Partnership
     * - Trust/estate: Trust/estate
     * - LLC-C: Limited liability company (C Corporation)
     * - LLC-S: Limited liability company (S Corporation)
     * - LLC-P: Limited liability company (Partnership)
     * - Other: Other (requires BusinessOther field to be populated)
     * @type {string}
     * @memberof W9FormRequest
     */
    businessClassification: W9FormRequestBusinessClassificationEnum;
    /**
     * The classification description when "businessClassification" is "Other".
     * @type {string}
     * @memberof W9FormRequest
     */
    businessOther?: string | null;
    /**
     * Indicates whether the individual is a foreign partner, owner, or beneficiary.
     * @type {boolean}
     * @memberof W9FormRequest
     */
    foreignPartnerOwnerOrBeneficiary?: boolean;
    /**
     * The exempt payee code. Allowed values (1‚Äì13):
     * - 1 ‚Äî Organization exempt under ¬ß501(a) or IRA; custodial account under ¬ß403(b)(7)
     * - 2 ‚Äî U.S. government or its agencies/instrumentalities
     * - 3 ‚Äî U.S. state, DC, U.S. territory/possession, or their political subdivisions/agencies/instrumentalities
     * - 4 ‚Äî Foreign government or its political subdivisions/agencies/instrumentalities
     * - 5 ‚Äî Corporation
     * - 6 ‚Äî Dealer in securities or commodities required to register in the U.S., DC, or U.S. territory/possession
     * - 7 ‚Äî Futures commission merchant registered with the CFTC
     * - 8 ‚Äî Real estate investment trust (REIT)
     * - 9 ‚Äî Entity registered at all times during the tax year under the Investment Company Act of 1940
     * - 10 ‚Äî Common trust fund operated by a bank under ¬ß584(a)
     * - 11 ‚Äî Financial institution (see ¬ß581)
     * - 12 ‚Äî Broker (nominee/custodian)
     * - 13 ‚Äî Trust exempt under ¬ß664 or described in ¬ß4947
     * @type {string}
     * @memberof W9FormRequest
     */
    exemptPayeeCode?: string | null;
    /**
     * The exemption from FATCA reporting code. Allowed values (A‚ÄìM):
     * - A ‚Äî Tax‚Äëexempt organization under ¬ß501(a) or IRA (¬ß7701(a)(37))
     * - B ‚Äî U.S. government or any of its agencies/instrumentalities
     * - C ‚Äî U.S. state, DC, territory/possession, or their political subdivisions/instrumentalities
     * - D ‚Äî Corporation whose stock is regularly traded on an established securities market
     * - E ‚Äî Corporation that is a member of the same expanded affiliated group as a D corporation
     * - F ‚Äî Registered dealer in securities/commodities/derivatives
     * - G ‚Äî REIT (Real Estate Investment Trust)
     * - H ‚Äî Regulated investment company (¬ß851) or entity registered all year under the Investment Company Act of 1940
     * - I ‚Äî Common trust fund (¬ß584(a))
     * - J ‚Äî Bank (¬ß581)
     * - K ‚Äî Broker
     * - L ‚Äî Charitable remainder trust (¬ß664) or trust described in ¬ß4947(a)(1)
     * - M ‚Äî Trust under ¬ß403(b) plan or ¬ß457(g) plan
     * @type {string}
     * @memberof W9FormRequest
     */
    exemptFatcaCode?: string | null;
    /**
     * Indicates whether the individual or entity is in a foreign country.
     * @type {boolean}
     * @memberof W9FormRequest
     */
    foreignCountryIndicator?: boolean;
    /**
     * The address of the individual or entity.
     * @type {string}
     * @memberof W9FormRequest
     */
    address: string;
    /**
     * The foreign address of the individual or entity.
     * @type {string}
     * @memberof W9FormRequest
     */
    foreignAddress?: string | null;
    /**
     * The city of the address.
     * @type {string}
     * @memberof W9FormRequest
     */
    city: string | null;
    /**
     * The state of the address.
     * @type {string}
     * @memberof W9FormRequest
     */
    state: W9FormRequestStateEnum;
    /**
     * The ZIP code of the address.
     * @type {string}
     * @memberof W9FormRequest
     */
    zip: string | null;
    /**
     * The account number associated with the form.
     * @type {string}
     * @memberof W9FormRequest
     */
    accountNumber?: string | null;
    /**
     * Tax Identification Number (TIN) type. SSN/ITIN (for individuals) and EIN (for businesses).
     * @type {string}
     * @memberof W9FormRequest
     */
    tinType: string;
    /**
     * The taxpayer identification number (TIN).
     * @type {string}
     * @memberof W9FormRequest
     */
    tin: string;
    /**
     * Indicates whether backup withholding applies.
     * @type {boolean}
     * @memberof W9FormRequest
     */
    backupWithholding?: boolean;
    /**
     * Indicates whether the individual or entity should be issued a 1099 form.
     * @type {boolean}
     * @memberof W9FormRequest
     */
    is1099able?: boolean;
    /**
     * The date when e-delivery was consented.
     * @type {Date}
     * @memberof W9FormRequest
     */
    eDeliveryConsentedAt?: Date | null;
    /**
     * The signature of the form.
     * @type {string}
     * @memberof W9FormRequest
     */
    signature?: string | null;
    /**
     * The ID of the associated company. Required when creating a form.
     * @type {string}
     * @memberof W9FormRequest
     */
    companyId?: string;
    /**
     * A reference identifier for the form.
     * @type {string}
     * @memberof W9FormRequest
     */
    referenceId?: string | null;
    /**
     * The email address of the individual associated with the form.
     * @type {string}
     * @memberof W9FormRequest
     */
    email?: string | null;
}

/**
* @export
* @enum {string}
*/
export enum W9FormRequestTypeEnum {
    W4 = 'W4',
    W8Ben = 'W8Ben',
    W8BenE = 'W8BenE',
    W8Imy = 'W8Imy',
    W9 = 'W9'
}/**
* @export
* @enum {string}
*/
export enum W9FormRequestBusinessClassificationEnum {
    Individual = 'Individual',
    CCorporation = 'CCorporation',
    SCorporation = 'SCorporation',
    Partnership = 'Partnership',
    TrustEstate = 'TrustEstate',
    LlcC = 'LlcC',
    LlcS = 'LlcS',
    LlcP = 'LlcP',
    Other = 'Other'
}/**
* @export
* @enum {string}
*/
export enum W9FormRequestStateEnum {
    Aa = 'AA',
    Ae = 'AE',
    Ak = 'AK',
    Al = 'AL',
    Ap = 'AP',
    Ar = 'AR',
    As = 'AS',
    Az = 'AZ',
    Ca = 'CA',
    Co = 'CO',
    Ct = 'CT',
    Dc = 'DC',
    De = 'DE',
    Fl = 'FL',
    Fm = 'FM',
    Ga = 'GA',
    Gu = 'GU',
    Hi = 'HI',
    Ia = 'IA',
    Id = 'ID',
    Il = 'IL',
    In = 'IN',
    Ks = 'KS',
    Ky = 'KY',
    La = 'LA',
    Ma = 'MA',
    Md = 'MD',
    Me = 'ME',
    Mh = 'MH',
    Mi = 'MI',
    Mn = 'MN',
    Mo = 'MO',
    Mp = 'MP',
    Ms = 'MS',
    Mt = 'MT',
    Nc = 'NC',
    Nd = 'ND',
    Ne = 'NE',
    Nh = 'NH',
    Nj = 'NJ',
    Nm = 'NM',
    Nv = 'NV',
    Ny = 'NY',
    Oh = 'OH',
    Ok = 'OK',
    Or = 'OR',
    Pa = 'PA',
    Pr = 'PR',
    Pw = 'PW',
    Ri = 'RI',
    Sc = 'SC',
    Sd = 'SD',
    Tn = 'TN',
    Tx = 'TX',
    Ut = 'UT',
    Va = 'VA',
    Vi = 'VI',
    Vt = 'VT',
    Wa = 'WA',
    Wi = 'WI',
    Wv = 'WV',
    Wy = 'WY'
}

/**
 * Check if a given object implements the W9FormRequest interface.
 */
export function instanceOfW9FormRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "businessClassification" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "zip" in value;
    isInstance = isInstance && "tinType" in value;
    isInstance = isInstance && "tin" in value;

    return isInstance;
}

export function W9FormRequestFromJSON(json: any): W9FormRequest {
    return W9FormRequestFromJSONTyped(json, false);
}

export function W9FormRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): W9FormRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'name': json['name'],
        'businessName': !exists(json, 'businessName') ? undefined : json['businessName'],
        'businessClassification': json['businessClassification'],
        'businessOther': !exists(json, 'businessOther') ? undefined : json['businessOther'],
        'foreignPartnerOwnerOrBeneficiary': !exists(json, 'foreignPartnerOwnerOrBeneficiary') ? undefined : json['foreignPartnerOwnerOrBeneficiary'],
        'exemptPayeeCode': !exists(json, 'exemptPayeeCode') ? undefined : json['exemptPayeeCode'],
        'exemptFatcaCode': !exists(json, 'exemptFatcaCode') ? undefined : json['exemptFatcaCode'],
        'foreignCountryIndicator': !exists(json, 'foreignCountryIndicator') ? undefined : json['foreignCountryIndicator'],
        'address': json['address'],
        'foreignAddress': !exists(json, 'foreignAddress') ? undefined : json['foreignAddress'],
        'city': json['city'],
        'state': json['state'],
        'zip': json['zip'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'tinType': json['tinType'],
        'tin': json['tin'],
        'backupWithholding': !exists(json, 'backupWithholding') ? undefined : json['backupWithholding'],
        'is1099able': !exists(json, 'is1099able') ? undefined : json['is1099able'],
        'eDeliveryConsentedAt': !exists(json, 'eDeliveryConsentedAt') ? undefined : (json['eDeliveryConsentedAt'] === null ? null : new Date(json['eDeliveryConsentedAt'])),
        'signature': !exists(json, 'signature') ? undefined : json['signature'],
        'companyId': !exists(json, 'companyId') ? undefined : json['companyId'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'email': !exists(json, 'email') ? undefined : json['email'],
    };
}

export function W9FormRequestToJSON(value?: W9FormRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'businessName': value.businessName,
        'businessClassification': value.businessClassification,
        'businessOther': value.businessOther,
        'foreignPartnerOwnerOrBeneficiary': value.foreignPartnerOwnerOrBeneficiary,
        'exemptPayeeCode': value.exemptPayeeCode,
        'exemptFatcaCode': value.exemptFatcaCode,
        'foreignCountryIndicator': value.foreignCountryIndicator,
        'address': value.address,
        'foreignAddress': value.foreignAddress,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'accountNumber': value.accountNumber,
        'tinType': value.tinType,
        'tin': value.tin,
        'backupWithholding': value.backupWithholding,
        'is1099able': value.is1099able,
        'eDeliveryConsentedAt': value.eDeliveryConsentedAt === undefined ? undefined : (value.eDeliveryConsentedAt === null ? null : value.eDeliveryConsentedAt.toISOString()),
        'signature': value.signature,
        'companyId': value.companyId,
        'referenceId': value.referenceId,
        'email': value.email,
    };
}
