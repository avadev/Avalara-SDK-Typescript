/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    Form1099StatusDetailResponse,
    Form1099StatusDetailResponseFromJSON,
    Form1099StatusDetailResponseFromJSONTyped,
    Form1099StatusDetailResponseToJSON,
} from './Form1099StatusDetailResponse';
import {
    StateAndLocalWithholdingResponse,
    StateAndLocalWithholdingResponseFromJSON,
    StateAndLocalWithholdingResponseFromJSONTyped,
    StateAndLocalWithholdingResponseToJSON,
} from './StateAndLocalWithholdingResponse';
import {
    StateEfileStatusDetailResponse,
    StateEfileStatusDetailResponseFromJSON,
    StateEfileStatusDetailResponseFromJSONTyped,
    StateEfileStatusDetailResponseToJSON,
} from './StateEfileStatusDetailResponse';
import {
    ValidationErrorResponse,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseFromJSONTyped,
    ValidationErrorResponseToJSON,
} from './ValidationErrorResponse';

/**
 * 
 * @export
 * @interface Form1099BaseResponse
 */
export interface Form1099BaseResponse {
    /**
     * ID of the form
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    readonly id: string;
    /**
     * Type of the form. Will be one of:
     * * 940
     * * 941
     * * 943
     * * 944
     * * 945
     * * 1042
     * * 1042-S
     * * 1095-B
     * * 1095-C
     * * 1097-BTC
     * * 1098
     * * 1098-C
     * * 1098-E
     * * 1098-Q
     * * 1098-T
     * * 3921
     * * 3922
     * * 5498
     * * 5498-ESA
     * * 5498-SA
     * * 1099-MISC
     * * 1099-A
     * * 1099-B
     * * 1099-C
     * * 1099-CAP
     * * 1099-DIV
     * * 1099-G
     * * 1099-INT
     * * 1099-K
     * * 1099-LS
     * * 1099-LTC
     * * 1099-NEC
     * * 1099-OID
     * * 1099-PATR
     * * 1099-Q
     * * 1099-R
     * * 1099-S
     * * 1099-SA
     * * T4A
     * * W-2
     * * W-2G
     * * 1099-HC
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    type: string;
    /**
     * Issuer ID
     * @type {number}
     * @memberof Form1099BaseResponse
     */
    issuerId: number;
    /**
     * Issuer Reference ID
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    issuerReferenceId?: string | null;
    /**
     * Issuer TIN
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    issuerTin?: string | null;
    /**
     * Tax year
     * @type {number}
     * @memberof Form1099BaseResponse
     */
    taxYear?: number;
    /**
     * Boolean indicating that federal e-filing has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099BaseResponse
     */
    federalEfile: boolean;
    /**
     * Federal e-file status
     * @type {Form1099StatusDetailResponse}
     * @memberof Form1099BaseResponse
     */
    readonly federalEfileStatus?: Form1099StatusDetailResponse;
    /**
     * Boolean indicating that state e-filing has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099BaseResponse
     */
    stateEfile: boolean;
    /**
     * State e-file status
     * @type {Array<StateEfileStatusDetailResponse>}
     * @memberof Form1099BaseResponse
     */
    readonly stateEfileStatus?: Array<StateEfileStatusDetailResponse> | null;
    /**
     * Boolean indicating that postal mailing to the recipient has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099BaseResponse
     */
    postalMail: boolean;
    /**
     * Postal mail to recipient status
     * @type {Form1099StatusDetailResponse}
     * @memberof Form1099BaseResponse
     */
    readonly postalMailStatus?: Form1099StatusDetailResponse | null;
    /**
     * Boolean indicating that TIN Matching has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099BaseResponse
     */
    tinMatch: boolean;
    /**
     * TIN Match status
     * @type {Form1099StatusDetailResponse}
     * @memberof Form1099BaseResponse
     */
    readonly tinMatchStatus?: Form1099StatusDetailResponse | null;
    /**
     * Boolean indicating that address verification has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099BaseResponse
     */
    addressVerification: boolean;
    /**
     * Address verification status
     * @type {Form1099StatusDetailResponse}
     * @memberof Form1099BaseResponse
     */
    readonly addressVerificationStatus?: Form1099StatusDetailResponse | null;
    /**
     * Reference ID
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    referenceId?: string | null;
    /**
     * Recipient email address
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    email?: string | null;
    /**
     * Type of TIN (Tax ID Number). Will be one of:
     * * SSN
     * * EIN
     * * ITIN
     * * ATIN
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    tinType?: string | null;
    /**
     * Recipient Tax ID Number
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    tin?: string | null;
    /**
     * Recipient name
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    recipientName?: string | null;
    /**
     * Recipient second name
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    recipientSecondName?: string | null;
    /**
     * Address
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    address?: string | null;
    /**
     * Address line 2
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    address2?: string | null;
    /**
     * City
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    city?: string | null;
    /**
     * US state
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    state?: string | null;
    /**
     * Zip/postal code
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    zip?: string | null;
    /**
     * Foreign province
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    foreignProvince?: string | null;
    /**
     * Country code, as defined at https://www.irs.gov/e-file-providers/country-codes
     * @type {string}
     * @memberof Form1099BaseResponse
     */
    countryCode?: string | null;
    /**
     * Validation errors
     * @type {Array<ValidationErrorResponse>}
     * @memberof Form1099BaseResponse
     */
    readonly validationErrors?: Array<ValidationErrorResponse> | null;
    /**
     * Creation time
     * @type {Date}
     * @memberof Form1099BaseResponse
     */
    readonly createdAt?: Date;
    /**
     * Update time
     * @type {Date}
     * @memberof Form1099BaseResponse
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {StateAndLocalWithholdingResponse}
     * @memberof Form1099BaseResponse
     */
    stateAndLocalWithholding?: StateAndLocalWithholdingResponse | null;
}



/**
 * Check if a given object implements the Form1099BaseResponse interface.
 */
export function instanceOfForm1099BaseResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "issuerId" in value;
    isInstance = isInstance && "federalEfile" in value;
    isInstance = isInstance && "stateEfile" in value;
    isInstance = isInstance && "postalMail" in value;
    isInstance = isInstance && "tinMatch" in value;
    isInstance = isInstance && "addressVerification" in value;

    return isInstance;
}

export function Form1099BaseResponseFromJSON(json: any): Form1099BaseResponse {
    return Form1099BaseResponseFromJSONTyped(json, false);
}

export function Form1099BaseResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1099BaseResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'issuerId': json['issuerId'],
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'federalEfile': json['federalEfile'],
        'federalEfileStatus': !exists(json, 'federalEfileStatus') ? undefined : Form1099StatusDetailResponseFromJSON(json['federalEfileStatus']),
        'stateEfile': json['stateEfile'],
        'stateEfileStatus': !exists(json, 'stateEfileStatus') ? undefined : (json['stateEfileStatus'] === null ? null : (json['stateEfileStatus'] as Array<any>)?.map(StateEfileStatusDetailResponseFromJSON)),
        'postalMail': json['postalMail'],
        'postalMailStatus': !exists(json, 'postalMailStatus') ? undefined : Form1099StatusDetailResponseFromJSON(json['postalMailStatus']),
        'tinMatch': json['tinMatch'],
        'tinMatchStatus': !exists(json, 'tinMatchStatus') ? undefined : Form1099StatusDetailResponseFromJSON(json['tinMatchStatus']),
        'addressVerification': json['addressVerification'],
        'addressVerificationStatus': !exists(json, 'addressVerificationStatus') ? undefined : Form1099StatusDetailResponseFromJSON(json['addressVerificationStatus']),
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'recipientName': !exists(json, 'recipientName') ? undefined : json['recipientName'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'foreignProvince': !exists(json, 'foreignProvince') ? undefined : json['foreignProvince'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>)?.map(ValidationErrorResponseFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingResponseFromJSON(json['stateAndLocalWithholding']),
    };
}

export function Form1099BaseResponseToJSON(value?: Form1099BaseResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'issuerId': value.issuerId,
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'federalEfile': value.federalEfile,
        'stateEfile': value.stateEfile,
        'postalMail': value.postalMail,
        'tinMatch': value.tinMatch,
        'addressVerification': value.addressVerification,
        'referenceId': value.referenceId,
        'email': value.email,
        'tinType': value.tinType,
        'tin': value.tin,
        'recipientName': value.recipientName,
        'recipientSecondName': value.recipientSecondName,
        'address': value.address,
        'address2': value.address2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'foreignProvince': value.foreignProvince,
        'countryCode': value.countryCode,
        'stateAndLocalWithholding': StateAndLocalWithholdingResponseToJSON(value.stateAndLocalWithholding),
    };
}
