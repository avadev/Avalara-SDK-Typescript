/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Use **username/password** or generate a **license key** from: *Avalara Portal ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    StateAndLocalWithholding,
    StateAndLocalWithholdingFromJSON,
    StateAndLocalWithholdingFromJSONTyped,
    StateAndLocalWithholdingToJSON,
} from './StateAndLocalWithholding';

/**
 * 
 * @export
 * @interface FormRequestCsvBase
 */
export interface FormRequestCsvBase {
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    issuerReferenceId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    issuerTin?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FormRequestCsvBase
     */
    taxYear?: number | null;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    issuerId?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    referenceId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    recipientName?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    recipientTin?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    tinType?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    recipientSecondName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    streetAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    streetAddressLine2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    zip?: string;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    recipientEmail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    accountNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    officeCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    recipientNonUsProvince?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FormRequestCsvBase
     */
    countryCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FormRequestCsvBase
     */
    federalEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FormRequestCsvBase
     */
    postalMail?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FormRequestCsvBase
     */
    stateEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FormRequestCsvBase
     */
    tinMatch?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FormRequestCsvBase
     */
    addressVerification?: boolean;
    /**
     * 
     * @type {StateAndLocalWithholding}
     * @memberof FormRequestCsvBase
     */
    stateAndLocalWithholding?: StateAndLocalWithholding;
}



/**
 * Check if a given object implements the FormRequestCsvBase interface.
 */
export function instanceOfFormRequestCsvBase(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FormRequestCsvBaseFromJSON(json: any): FormRequestCsvBase {
    return FormRequestCsvBaseFromJSONTyped(json, false);
}

export function FormRequestCsvBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormRequestCsvBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'issuerId': !exists(json, 'issuerId') ? undefined : json['issuerId'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'recipientName': !exists(json, 'recipientName') ? undefined : json['recipientName'],
        'recipientTin': !exists(json, 'recipientTin') ? undefined : json['recipientTin'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'streetAddress': !exists(json, 'streetAddress') ? undefined : json['streetAddress'],
        'streetAddressLine2': !exists(json, 'streetAddressLine2') ? undefined : json['streetAddressLine2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'recipientEmail': !exists(json, 'recipientEmail') ? undefined : json['recipientEmail'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'recipientNonUsProvince': !exists(json, 'recipientNonUsProvince') ? undefined : json['recipientNonUsProvince'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'federalEFile': !exists(json, 'federalEFile') ? undefined : json['federalEFile'],
        'postalMail': !exists(json, 'postalMail') ? undefined : json['postalMail'],
        'stateEFile': !exists(json, 'stateEFile') ? undefined : json['stateEFile'],
        'tinMatch': !exists(json, 'tinMatch') ? undefined : json['tinMatch'],
        'addressVerification': !exists(json, 'addressVerification') ? undefined : json['addressVerification'],
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingFromJSON(json['stateAndLocalWithholding']),
    };
}

export function FormRequestCsvBaseToJSON(value?: FormRequestCsvBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'issuerId': value.issuerId,
        'referenceId': value.referenceId,
        'recipientName': value.recipientName,
        'recipientTin': value.recipientTin,
        'tinType': value.tinType,
        'recipientSecondName': value.recipientSecondName,
        'streetAddress': value.streetAddress,
        'streetAddressLine2': value.streetAddressLine2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'recipientEmail': value.recipientEmail,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'recipientNonUsProvince': value.recipientNonUsProvince,
        'countryCode': value.countryCode,
        'federalEFile': value.federalEFile,
        'postalMail': value.postalMail,
        'stateEFile': value.stateEFile,
        'tinMatch': value.tinMatch,
        'addressVerification': value.addressVerification,
        'stateAndLocalWithholding': StateAndLocalWithholdingToJSON(value.stateAndLocalWithholding),
    };
}
