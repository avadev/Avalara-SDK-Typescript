/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    CoveredIndividual,
    CoveredIndividualFromJSON,
    CoveredIndividualFromJSONTyped,
    CoveredIndividualToJSON,
} from './CoveredIndividual';
import {
    Form1099StatusDetail,
    Form1099StatusDetailFromJSON,
    Form1099StatusDetailFromJSONTyped,
    Form1099StatusDetailToJSON,
} from './Form1099StatusDetail';
import {
    OfferAndCoverage,
    OfferAndCoverageFromJSON,
    OfferAndCoverageFromJSONTyped,
    OfferAndCoverageToJSON,
} from './OfferAndCoverage';
import {
    StateAndLocalWithholding,
    StateAndLocalWithholdingFromJSON,
    StateAndLocalWithholdingFromJSONTyped,
    StateAndLocalWithholdingToJSON,
} from './StateAndLocalWithholding';
import {
    StateEfileStatusDetail,
    StateEfileStatusDetailFromJSON,
    StateEfileStatusDetailFromJSONTyped,
    StateEfileStatusDetailToJSON,
} from './StateEfileStatusDetail';
import {
    ValidationError,
    ValidationErrorFromJSON,
    ValidationErrorFromJSONTyped,
    ValidationErrorToJSON,
} from './ValidationError';

/**
 * Form 1095-C: Employer-Provided Health Insurance Offer and Coverage
 * @export
 * @interface Form1095C
 */
export interface Form1095C {
    /**
     * Employee's first name
     * @type {string}
     * @memberof Form1095C
     */
    employeeFirstName: string | null;
    /**
     * Employee's middle name
     * @type {string}
     * @memberof Form1095C
     */
    employeeMiddleName?: string | null;
    /**
     * Employee's last name
     * @type {string}
     * @memberof Form1095C
     */
    employeeLastName: string | null;
    /**
     * Employee's name suffix
     * @type {string}
     * @memberof Form1095C
     */
    employeeNameSuffix?: string | null;
    /**
     * Recipient's date of birth
     * @type {Date}
     * @memberof Form1095C
     */
    recipientDateOfBirth?: Date | null;
    /**
     * Plan start month.
     * The calendar month during which the plan year begins of the health plan in which the employee is offered coverage (or would be offered coverage if the employee were eligible to participate in the plan).
     * Available values:
     * - 00: None
     * - 01: January
     * - 02: February
     * - 03: March
     * - 04: April
     * - 05: May
     * - 06: June
     * - 07: July
     * - 08: August
     * - 09: September
     * - 10: October
     * - 11: November
     * - 12: December
     * @type {string}
     * @memberof Form1095C
     */
    planStartMonth: Form1095CPlanStartMonthEnum;
    /**
     * Employer provided self-insured coverage
     * @type {boolean}
     * @memberof Form1095C
     */
    employerProvidedSiCoverage?: boolean | null;
    /**
     * Offer and coverage information
     * @type {Array<OfferAndCoverage>}
     * @memberof Form1095C
     */
    offerAndCoverages: Array<OfferAndCoverage>;
    /**
     * Covered individuals information
     * @type {Array<CoveredIndividual>}
     * @memberof Form1095C
     */
    coveredIndividuals?: Array<CoveredIndividual>;
    /**
     * Form type.
     * @type {string}
     * @memberof Form1095C
     */
    type: Form1095CTypeEnum;
    /**
     * Form ID. Unique identifier set when the record is created.
     * @type {string}
     * @memberof Form1095C
     */
    readonly id?: string | null;
    /**
     * Issuer ID - only required when creating forms
     * @type {string}
     * @memberof Form1095C
     */
    issuerId?: string | null;
    /**
     * Issuer Reference ID - only required when creating forms via $bulk-upsert
     * @type {string}
     * @memberof Form1095C
     */
    issuerReferenceId?: string | null;
    /**
     * Issuer TIN - readonly
     * @type {string}
     * @memberof Form1095C
     */
    issuerTin?: string | null;
    /**
     * Tax Year - only required when creating forms via $bulk-upsert
     * @type {number}
     * @memberof Form1095C
     */
    taxYear?: number | null;
    /**
     * Internal reference ID. Never shown to any agency or recipient.
     * @type {string}
     * @memberof Form1095C
     */
    referenceId?: string | null;
    /**
     * Recipient's Federal Tax Identification Number (TIN).
     * @type {string}
     * @memberof Form1095C
     */
    tin?: string | null;
    /**
     * Recipient name
     * @type {string}
     * @memberof Form1095C
     */
    recipientName: string | null;
    /**
     * Tax Identification Number (TIN) type.
     * 
     * Available values:
     * - EIN: Employer Identification Number
     * - SSN: Social Security Number
     * - ITIN: Individual Taxpayer Identification Number
     * - ATIN: Adoption Taxpayer Identification Number
     * @type {string}
     * @memberof Form1095C
     */
    tinType?: Form1095CTinTypeEnum;
    /**
     * Recipient second name
     * @type {string}
     * @memberof Form1095C
     */
    recipientSecondName?: string | null;
    /**
     * Address.
     * @type {string}
     * @memberof Form1095C
     */
    address: string | null;
    /**
     * Address line 2.
     * @type {string}
     * @memberof Form1095C
     */
    address2?: string | null;
    /**
     * City.
     * @type {string}
     * @memberof Form1095C
     */
    city: string | null;
    /**
     * Two-letter US state or Canadian province code (required for US/CA addresses).
     * @type {string}
     * @memberof Form1095C
     */
    state?: string | null;
    /**
     * ZIP/postal code.
     * @type {string}
     * @memberof Form1095C
     */
    zip?: string | null;
    /**
     * Recipient's Contact email address.
     * @type {string}
     * @memberof Form1095C
     */
    email?: string | null;
    /**
     * Account number
     * @type {string}
     * @memberof Form1095C
     */
    accountNumber?: string | null;
    /**
     * Office code
     * @type {string}
     * @memberof Form1095C
     */
    officeCode?: string | null;
    /**
     * Province or region for non-US/CA addresses.
     * @type {string}
     * @memberof Form1095C
     */
    nonUsProvince?: string | null;
    /**
     * Two-letter IRS country code (e.g., 'US', 'CA'), as defined at https://www.irs.gov/e-file-providers/country-codes.
     * @type {string}
     * @memberof Form1095C
     */
    countryCode: string | null;
    /**
     * Date when federal e-filing should be scheduled. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     * @type {Date}
     * @memberof Form1095C
     */
    federalEfileDate?: Date | null;
    /**
     * Boolean indicating that postal mailing to the recipient should be scheduled for this form
     * @type {boolean}
     * @memberof Form1095C
     */
    postalMail?: boolean | null;
    /**
     * Date when state e-filing should be scheduled. Must be on or after federalEfileDate. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     * @type {Date}
     * @memberof Form1095C
     */
    stateEfileDate?: Date | null;
    /**
     * Date when recipient e-delivery should be scheduled. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     * @type {Date}
     * @memberof Form1095C
     */
    recipientEdeliveryDate?: Date | null;
    /**
     * Boolean indicating that TIN Matching should be scheduled for this form
     * @type {boolean}
     * @memberof Form1095C
     */
    tinMatch?: boolean | null;
    /**
     * No TIN indicator
     * @type {boolean}
     * @memberof Form1095C
     */
    noTin?: boolean | null;
    /**
     * Boolean indicating that address verification should be scheduled for this form
     * @type {boolean}
     * @memberof Form1095C
     */
    addressVerification?: boolean | null;
    /**
     * State and local withholding information
     * @type {StateAndLocalWithholding}
     * @memberof Form1095C
     */
    stateAndLocalWithholding?: StateAndLocalWithholding | null;
    /**
     * Second TIN notice
     * @type {boolean}
     * @memberof Form1095C
     */
    secondTinNotice?: boolean | null;
    /**
     * Federal e-file status.
     * Available values:
     * - unscheduled: Form has not been scheduled for federal e-filing
     * - scheduled: Form is scheduled for federal e-filing
     * - airlock: Form is in process of being uploaded to the IRS (forms exist in this state for a very short period and cannot be updated while in this state)
     * - sent: Form has been sent to the IRS
     * - accepted: Form was accepted by the IRS
     * - corrected_scheduled: Correction is scheduled to be sent
     * - corrected_airlock: Correction is in process of being uploaded to the IRS (forms exist in this state for a very short period and cannot be updated while in this state)
     * - corrected: A correction has been sent to the IRS
     * - corrected_accepted: Correction was accepted by the IRS
     * - rejected: Form was rejected by the IRS
     * - corrected_rejected: Correction was rejected by the IRS
     * - held: Form is held and will not be submitted to IRS (used for certain forms submitted only to states)
     * @type {Form1099StatusDetail}
     * @memberof Form1095C
     */
    readonly federalEfileStatus?: Form1099StatusDetail | null;
    /**
     * State e-file status.
     * Available values:
     * - unscheduled: Form has not been scheduled for state e-filing
     * - scheduled: Form is scheduled for state e-filing
     * - airlocked: Form is in process of being uploaded to the state
     * - sent: Form has been sent to the state
     * - rejected: Form was rejected by the state
     * - accepted: Form was accepted by the state
     * - corrected_scheduled: Correction is scheduled to be sent
     * - corrected_airlocked: Correction is in process of being uploaded to the state
     * - corrected_sent: Correction has been sent to the state
     * - corrected_rejected: Correction was rejected by the state
     * - corrected_accepted: Correction was accepted by the state
     * @type {Array<StateEfileStatusDetail>}
     * @memberof Form1095C
     */
    readonly stateEfileStatus?: Array<StateEfileStatusDetail> | null;
    /**
     * Postal mail to recipient status.
     * Available values:
     * - unscheduled: Postal mail has not been scheduled
     * - pending: Postal mail is pending to be sent
     * - sent: Postal mail has been sent
     * - delivered: Postal mail has been delivered
     * @type {Form1099StatusDetail}
     * @memberof Form1095C
     */
    readonly postalMailStatus?: Form1099StatusDetail | null;
    /**
     * TIN Match status.
     * Available values:
     * - none: TIN matching has not been performed
     * - pending: TIN matching request is pending
     * - matched: Name/TIN combination matches IRS records
     * - unknown: TIN is missing, invalid, or request contains errors
     * - rejected: Name/TIN combination does not match IRS records or TIN not currently issued
     * @type {Form1099StatusDetail}
     * @memberof Form1095C
     */
    readonly tinMatchStatus?: Form1099StatusDetail | null;
    /**
     * Address verification status.
     * Available values:
     * - unknown: Address verification has not been checked
     * - pending: Address verification is in progress
     * - failed: Address verification failed
     * - incomplete: Address verification is incomplete
     * - unchanged: User declined address changes
     * - verified: Address has been verified and accepted
     * @type {Form1099StatusDetail}
     * @memberof Form1095C
     */
    readonly addressVerificationStatus?: Form1099StatusDetail | null;
    /**
     * EDelivery status.
     * Available values:
     * - unscheduled: E-delivery has not been scheduled
     * - scheduled: E-delivery is scheduled to be sent
     * - sent: E-delivery has been sent to recipient
     * - bounced: E-delivery bounced back (invalid email)
     * - refused: E-delivery was refused by recipient
     * - bad_verify: E-delivery failed verification
     * - accepted: E-delivery was accepted by recipient
     * - bad_verify_limit: E-delivery failed verification limit reached
     * - second_delivery: Second e-delivery attempt
     * - undelivered: E-delivery is undelivered (temporary state allowing resend)
     * @type {Form1099StatusDetail}
     * @memberof Form1095C
     */
    readonly eDeliveryStatus?: Form1099StatusDetail | null;
    /**
     * Validation errors
     * @type {Array<ValidationError>}
     * @memberof Form1095C
     */
    readonly validationErrors?: Array<ValidationError> | null;
    /**
     * Date time when the record was created.
     * @type {Date}
     * @memberof Form1095C
     */
    readonly createdAt?: Date;
    /**
     * Date time when the record was last updated.
     * @type {Date}
     * @memberof Form1095C
     */
    readonly updatedAt?: Date;
}

/**
* @export
* @enum {string}
*/
export enum Form1095CPlanStartMonthEnum {
    _00 = '00',
    _01 = '01',
    _02 = '02',
    _03 = '03',
    _04 = '04',
    _05 = '05',
    _06 = '06',
    _07 = '07',
    _08 = '08',
    _09 = '09',
    _10 = '10',
    _11 = '11',
    _12 = '12'
}/**
* @export
* @enum {string}
*/
export enum Form1095CTypeEnum {
    Form1099Nec = 'Form1099Nec',
    Form1099Misc = 'Form1099Misc',
    Form1099Div = 'Form1099Div',
    Form1099R = 'Form1099R',
    Form1099K = 'Form1099K',
    Form1095B = 'Form1095B',
    Form1042S = 'Form1042S',
    Form1095C = 'Form1095C',
    Form1099Int = 'Form1099Int'
}/**
* @export
* @enum {string}
*/
export enum Form1095CTinTypeEnum {
    Ein = 'EIN',
    Ssn = 'SSN',
    Itin = 'ITIN',
    Atin = 'ATIN'
}

/**
 * Check if a given object implements the Form1095C interface.
 */
export function instanceOfForm1095C(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "employeeFirstName" in value;
    isInstance = isInstance && "employeeLastName" in value;
    isInstance = isInstance && "planStartMonth" in value;
    isInstance = isInstance && "offerAndCoverages" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "recipientName" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "countryCode" in value;

    return isInstance;
}

export function Form1095CFromJSON(json: any): Form1095C {
    return Form1095CFromJSONTyped(json, false);
}

export function Form1095CFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1095C {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'employeeFirstName': json['employeeFirstName'],
        'employeeMiddleName': !exists(json, 'employeeMiddleName') ? undefined : json['employeeMiddleName'],
        'employeeLastName': json['employeeLastName'],
        'employeeNameSuffix': !exists(json, 'employeeNameSuffix') ? undefined : json['employeeNameSuffix'],
        'recipientDateOfBirth': !exists(json, 'recipientDateOfBirth') ? undefined : (json['recipientDateOfBirth'] === null ? null : new Date(json['recipientDateOfBirth'])),
        'planStartMonth': json['planStartMonth'],
        'employerProvidedSiCoverage': !exists(json, 'employerProvidedSiCoverage') ? undefined : json['employerProvidedSiCoverage'],
        'offerAndCoverages': ((json['offerAndCoverages'] as Array<any>)?.map(OfferAndCoverageFromJSON)),
        'coveredIndividuals': !exists(json, 'coveredIndividuals') ? undefined : ((json['coveredIndividuals'] as Array<any>)?.map(CoveredIndividualFromJSON)),
        'type': json['type'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'issuerId': !exists(json, 'issuerId') ? undefined : json['issuerId'],
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'recipientName': json['recipientName'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'address': json['address'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'nonUsProvince': !exists(json, 'nonUsProvince') ? undefined : json['nonUsProvince'],
        'countryCode': json['countryCode'],
        'federalEfileDate': !exists(json, 'federalEfileDate') ? undefined : (json['federalEfileDate'] === null ? null : new Date(json['federalEfileDate'])),
        'postalMail': !exists(json, 'postalMail') ? undefined : json['postalMail'],
        'stateEfileDate': !exists(json, 'stateEfileDate') ? undefined : (json['stateEfileDate'] === null ? null : new Date(json['stateEfileDate'])),
        'recipientEdeliveryDate': !exists(json, 'recipientEdeliveryDate') ? undefined : (json['recipientEdeliveryDate'] === null ? null : new Date(json['recipientEdeliveryDate'])),
        'tinMatch': !exists(json, 'tinMatch') ? undefined : json['tinMatch'],
        'noTin': !exists(json, 'noTin') ? undefined : json['noTin'],
        'addressVerification': !exists(json, 'addressVerification') ? undefined : json['addressVerification'],
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingFromJSON(json['stateAndLocalWithholding']),
        'secondTinNotice': !exists(json, 'secondTinNotice') ? undefined : json['secondTinNotice'],
        'federalEfileStatus': !exists(json, 'federalEfileStatus') ? undefined : Form1099StatusDetailFromJSON(json['federalEfileStatus']),
        'stateEfileStatus': !exists(json, 'stateEfileStatus') ? undefined : (json['stateEfileStatus'] === null ? null : (json['stateEfileStatus'] as Array<any>)?.map(StateEfileStatusDetailFromJSON)),
        'postalMailStatus': !exists(json, 'postalMailStatus') ? undefined : Form1099StatusDetailFromJSON(json['postalMailStatus']),
        'tinMatchStatus': !exists(json, 'tinMatchStatus') ? undefined : Form1099StatusDetailFromJSON(json['tinMatchStatus']),
        'addressVerificationStatus': !exists(json, 'addressVerificationStatus') ? undefined : Form1099StatusDetailFromJSON(json['addressVerificationStatus']),
        'eDeliveryStatus': !exists(json, 'eDeliveryStatus') ? undefined : Form1099StatusDetailFromJSON(json['eDeliveryStatus']),
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>)?.map(ValidationErrorFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function Form1095CToJSON(value?: Form1095C | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'employeeFirstName': value.employeeFirstName,
        'employeeMiddleName': value.employeeMiddleName,
        'employeeLastName': value.employeeLastName,
        'employeeNameSuffix': value.employeeNameSuffix,
        'recipientDateOfBirth': value.recipientDateOfBirth === undefined ? undefined : (value.recipientDateOfBirth === null ? null : value.recipientDateOfBirth.toISOString().substr(0,10)),
        'planStartMonth': value.planStartMonth,
        'employerProvidedSiCoverage': value.employerProvidedSiCoverage,
        'offerAndCoverages': ((value.offerAndCoverages as Array<any>)?.map(OfferAndCoverageToJSON)),
        'coveredIndividuals': value.coveredIndividuals === undefined ? undefined : ((value.coveredIndividuals as Array<any>)?.map(CoveredIndividualToJSON)),
        'type': value.type,
        'issuerId': value.issuerId,
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'referenceId': value.referenceId,
        'tin': value.tin,
        'recipientName': value.recipientName,
        'tinType': value.tinType,
        'recipientSecondName': value.recipientSecondName,
        'address': value.address,
        'address2': value.address2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'email': value.email,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'nonUsProvince': value.nonUsProvince,
        'countryCode': value.countryCode,
        'federalEfileDate': value.federalEfileDate === undefined ? undefined : (value.federalEfileDate === null ? null : value.federalEfileDate.toISOString().substr(0,10)),
        'postalMail': value.postalMail,
        'stateEfileDate': value.stateEfileDate === undefined ? undefined : (value.stateEfileDate === null ? null : value.stateEfileDate.toISOString().substr(0,10)),
        'recipientEdeliveryDate': value.recipientEdeliveryDate === undefined ? undefined : (value.recipientEdeliveryDate === null ? null : value.recipientEdeliveryDate.toISOString().substr(0,10)),
        'tinMatch': value.tinMatch,
        'noTin': value.noTin,
        'addressVerification': value.addressVerification,
        'stateAndLocalWithholding': StateAndLocalWithholdingToJSON(value.stateAndLocalWithholding),
        'secondTinNotice': value.secondTinNotice,
    };
}
