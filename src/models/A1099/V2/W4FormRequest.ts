/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * 
 * @export
 * @interface W4FormRequest
 */
export interface W4FormRequest {
    /**
     * The form type (always "w4" for this model).
     * @type {string}
     * @memberof W4FormRequest
     */
    readonly type?: W4FormRequestTypeEnum;
    /**
     * The first name of the employee.
     * @type {string}
     * @memberof W4FormRequest
     */
    employeeFirstName?: string;
    /**
     * The middle name of the employee.
     * @type {string}
     * @memberof W4FormRequest
     */
    employeeMiddleName?: string | null;
    /**
     * The last name of the employee.
     * @type {string}
     * @memberof W4FormRequest
     */
    employeeLastName?: string;
    /**
     * The name suffix of the employee.
     * @type {string}
     * @memberof W4FormRequest
     */
    employeeNameSuffix?: string | null;
    /**
     * The type of TIN provided.
     * @type {string}
     * @memberof W4FormRequest
     */
    tinType?: string;
    /**
     * The taxpayer identification number (TIN).
     * @type {string}
     * @memberof W4FormRequest
     */
    tin?: string;
    /**
     * The address of the employee.
     * @type {string}
     * @memberof W4FormRequest
     */
    address?: string | null;
    /**
     * The city of residence of the employee.
     * @type {string}
     * @memberof W4FormRequest
     */
    city?: string | null;
    /**
     * The state of residence of the employee.
     * @type {string}
     * @memberof W4FormRequest
     */
    state?: string | null;
    /**
     * The ZIP code of residence of the employee.
     * @type {string}
     * @memberof W4FormRequest
     */
    zip?: string | null;
    /**
     * The marital status of the employee.
     * @type {string}
     * @memberof W4FormRequest
     */
    maritalStatus?: string | null;
    /**
     * Indicates whether the last name differs from prior records.
     * @type {boolean}
     * @memberof W4FormRequest
     */
    lastNameDiffers?: boolean;
    /**
     * The number of allowances claimed by the employee.
     * @type {number}
     * @memberof W4FormRequest
     */
    numAllowances?: number | null;
    /**
     * The number of dependents other than allowances.
     * @type {number}
     * @memberof W4FormRequest
     */
    otherDependents?: number | null;
    /**
     * The amount of non-job income.
     * @type {number}
     * @memberof W4FormRequest
     */
    nonJobIncome?: number | null;
    /**
     * The amount of deductions claimed.
     * @type {number}
     * @memberof W4FormRequest
     */
    deductions?: number | null;
    /**
     * The additional amount withheld.
     * @type {number}
     * @memberof W4FormRequest
     */
    additionalWithheld?: number | null;
    /**
     * Indicates whether the employee is exempt from withholding.
     * @type {boolean}
     * @memberof W4FormRequest
     */
    exemptFromWithholding?: boolean;
    /**
     * The office code associated with the form.
     * @type {string}
     * @memberof W4FormRequest
     */
    officeCode?: string | null;
    /**
     * The ID of the associated company.
     * @type {string}
     * @memberof W4FormRequest
     */
    companyId?: string;
    /**
     * A reference identifier for the form.
     * @type {string}
     * @memberof W4FormRequest
     */
    referenceId?: string | null;
    /**
     * The email address of the individual associated with the form.
     * @type {string}
     * @memberof W4FormRequest
     */
    email?: string | null;
    /**
     * The date when e-delivery was consented.
     * @type {Date}
     * @memberof W4FormRequest
     */
    eDeliveryConsentedAt?: Date | null;
    /**
     * The signature of the form.
     * @type {string}
     * @memberof W4FormRequest
     */
    signature?: string | null;
}

/**
* @export
* @enum {string}
*/
export enum W4FormRequestTypeEnum {
    W4 = 'W4',
    W8Ben = 'W8Ben',
    W8BenE = 'W8BenE',
    W8Imy = 'W8Imy',
    W9 = 'W9'
}

/**
 * Check if a given object implements the W4FormRequest interface.
 */
export function instanceOfW4FormRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function W4FormRequestFromJSON(json: any): W4FormRequest {
    return W4FormRequestFromJSONTyped(json, false);
}

export function W4FormRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): W4FormRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'employeeFirstName': !exists(json, 'employeeFirstName') ? undefined : json['employeeFirstName'],
        'employeeMiddleName': !exists(json, 'employeeMiddleName') ? undefined : json['employeeMiddleName'],
        'employeeLastName': !exists(json, 'employeeLastName') ? undefined : json['employeeLastName'],
        'employeeNameSuffix': !exists(json, 'employeeNameSuffix') ? undefined : json['employeeNameSuffix'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'maritalStatus': !exists(json, 'maritalStatus') ? undefined : json['maritalStatus'],
        'lastNameDiffers': !exists(json, 'lastNameDiffers') ? undefined : json['lastNameDiffers'],
        'numAllowances': !exists(json, 'numAllowances') ? undefined : json['numAllowances'],
        'otherDependents': !exists(json, 'otherDependents') ? undefined : json['otherDependents'],
        'nonJobIncome': !exists(json, 'nonJobIncome') ? undefined : json['nonJobIncome'],
        'deductions': !exists(json, 'deductions') ? undefined : json['deductions'],
        'additionalWithheld': !exists(json, 'additionalWithheld') ? undefined : json['additionalWithheld'],
        'exemptFromWithholding': !exists(json, 'exemptFromWithholding') ? undefined : json['exemptFromWithholding'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'companyId': !exists(json, 'companyId') ? undefined : json['companyId'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'eDeliveryConsentedAt': !exists(json, 'eDeliveryConsentedAt') ? undefined : (json['eDeliveryConsentedAt'] === null ? null : new Date(json['eDeliveryConsentedAt'])),
        'signature': !exists(json, 'signature') ? undefined : json['signature'],
    };
}

export function W4FormRequestToJSON(value?: W4FormRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'employeeFirstName': value.employeeFirstName,
        'employeeMiddleName': value.employeeMiddleName,
        'employeeLastName': value.employeeLastName,
        'employeeNameSuffix': value.employeeNameSuffix,
        'tinType': value.tinType,
        'tin': value.tin,
        'address': value.address,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'maritalStatus': value.maritalStatus,
        'lastNameDiffers': value.lastNameDiffers,
        'numAllowances': value.numAllowances,
        'otherDependents': value.otherDependents,
        'nonJobIncome': value.nonJobIncome,
        'deductions': value.deductions,
        'additionalWithheld': value.additionalWithheld,
        'exemptFromWithholding': value.exemptFromWithholding,
        'officeCode': value.officeCode,
        'companyId': value.companyId,
        'referenceId': value.referenceId,
        'email': value.email,
        'eDeliveryConsentedAt': value.eDeliveryConsentedAt === undefined ? undefined : (value.eDeliveryConsentedAt === null ? null : value.eDeliveryConsentedAt.toISOString()),
        'signature': value.signature,
    };
}
