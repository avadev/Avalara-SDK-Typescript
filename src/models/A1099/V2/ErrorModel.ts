/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Use **username/password** or generate a **license key** from: *Avalara Portal ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * Error model returned in response for all API errors
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
    /**
     * HTTP error code in 4xx or 5xx.
     * @type {string}
     * @memberof ErrorModel
     */
    type?: string;
    /**
     * HTTP error code in 4xx or 5xx.
     * @type {string}
     * @memberof ErrorModel
     */
    status?: string;
    /**
     * Description of the HTTP error code.
     * @type {string}
     * @memberof ErrorModel
     */
    title?: string;
    /**
     * Detailed error message.
     * @type {string}
     * @memberof ErrorModel
     */
    detail?: string;
    /**
     * Error code.
     * @type {string}
     * @memberof ErrorModel
     */
    instance?: string;
    /**
     * Cause of error.
     * @type {any}
     * @memberof ErrorModel
     */
    source?: any | null;
}



/**
 * Check if a given object implements the ErrorModel interface.
 */
export function instanceOfErrorModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ErrorModelFromJSON(json: any): ErrorModel {
    return ErrorModelFromJSONTyped(json, false);
}

export function ErrorModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'detail': !exists(json, 'detail') ? undefined : json['detail'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
        'source': !exists(json, 'source') ? undefined : json['source'],
    };
}

export function ErrorModelToJSON(value?: ErrorModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'status': value.status,
        'title': value.title,
        'detail': value.detail,
        'instance': value.instance,
        'source': value.source,
    };
}
