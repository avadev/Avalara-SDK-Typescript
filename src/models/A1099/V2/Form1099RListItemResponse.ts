/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    StateAndLocalWithholdingResponse,
    StateAndLocalWithholdingResponseFromJSON,
    StateAndLocalWithholdingResponseFromJSONTyped,
    StateAndLocalWithholdingResponseToJSON,
} from './StateAndLocalWithholdingResponse';
import {
    StateEfileStatusDetailResponse,
    StateEfileStatusDetailResponseFromJSON,
    StateEfileStatusDetailResponseFromJSONTyped,
    StateEfileStatusDetailResponseToJSON,
} from './StateEfileStatusDetailResponse';
import {
    StatusDetail,
    StatusDetailFromJSON,
    StatusDetailFromJSONTyped,
    StatusDetailToJSON,
} from './StatusDetail';
import {
    ValidationErrorResponse,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseFromJSONTyped,
    ValidationErrorResponseToJSON,
} from './ValidationErrorResponse';

/**
 * 
 * @export
 * @interface Form1099RListItemResponse
 */
export interface Form1099RListItemResponse {
    /**
     * Gross distribution
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    grossDistributions?: number | null;
    /**
     * Taxable amount
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    taxableAmount?: number | null;
    /**
     * Taxable amount not determined
     * @type {boolean}
     * @memberof Form1099RListItemResponse
     */
    taxableAmountNotDetermined?: boolean | null;
    /**
     * Total distribution
     * @type {boolean}
     * @memberof Form1099RListItemResponse
     */
    totalDistributionIndicator?: boolean | null;
    /**
     * Capital gain (included in Box 2a)
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    capitalGain?: number | null;
    /**
     * Federal income tax withheld
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    fedIncomeTaxWithheld?: number | null;
    /**
     * Employee contributions/Designated Roth contributions or insurance premiums
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    employeeContributions?: number | null;
    /**
     * Net unrealized appreciation in employer's securities
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    netUnrealizedAppreciation?: number | null;
    /**
     * Distribution code
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    distributionCodeRequired?: string | null;
    /**
     * Second distribution code
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    distributionCodeOptional?: string | null;
    /**
     * IRA/SEP/SIMPLE
     * @type {boolean}
     * @memberof Form1099RListItemResponse
     */
    iraSepSimpleIndicator?: boolean | null;
    /**
     * Traditional IRA/SEP/SIMPLE or Roth conversion amount
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    totalIraSepSimpleDistribution?: number | null;
    /**
     * Other amount
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    other?: number | null;
    /**
     * Other percentage
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    otherPercent?: string | null;
    /**
     * Total distribution percentage
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    percentageTotalDistribution?: string | null;
    /**
     * Total employee contributions
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    totalEmployeeContributions?: number | null;
    /**
     * Amount allocable to IRR within 5 years
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    amountAllocableToIrr?: number | null;
    /**
     * First year of designated Roth contribution
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    firstYearDesignatedRothContrib?: string | null;
    /**
     * Date of payment
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    dateOfPayment?: string | null;
    /**
     * ID of the form
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    readonly id: string;
    /**
     * Type of the form. Will be one of:
     * * 940
     * * 941
     * * 943
     * * 944
     * * 945
     * * 1042
     * * 1042-S
     * * 1095-B
     * * 1095-C
     * * 1097-BTC
     * * 1098
     * * 1098-C
     * * 1098-E
     * * 1098-Q
     * * 1098-T
     * * 3921
     * * 3922
     * * 5498
     * * 5498-ESA
     * * 5498-SA
     * * 1099-MISC
     * * 1099-A
     * * 1099-B
     * * 1099-C
     * * 1099-CAP
     * * 1099-DIV
     * * 1099-G
     * * 1099-INT
     * * 1099-K
     * * 1099-LS
     * * 1099-LTC
     * * 1099-NEC
     * * 1099-OID
     * * 1099-PATR
     * * 1099-Q
     * * 1099-R
     * * 1099-S
     * * 1099-SA
     * * T4A
     * * W-2
     * * W-2G
     * * 1099-HC
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    type: string;
    /**
     * Issuer ID
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    issuerId: number;
    /**
     * Issuer Reference ID
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    issuerReferenceId?: string | null;
    /**
     * Issuer TIN
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    issuerTin?: string | null;
    /**
     * Tax year
     * @type {number}
     * @memberof Form1099RListItemResponse
     */
    taxYear?: number;
    /**
     * Boolean indicating that federal e-filing has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099RListItemResponse
     */
    federalEfile: boolean;
    /**
     * Federal e-file status
     * @type {StatusDetail}
     * @memberof Form1099RListItemResponse
     */
    readonly federalEfileStatus?: StatusDetail;
    /**
     * Boolean indicating that state e-filing has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099RListItemResponse
     */
    stateEfile: boolean;
    /**
     * State e-file status
     * @type {Array<StateEfileStatusDetailResponse>}
     * @memberof Form1099RListItemResponse
     */
    readonly stateEfileStatus?: Array<StateEfileStatusDetailResponse> | null;
    /**
     * Boolean indicating that postal mailing to the recipient has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099RListItemResponse
     */
    postalMail: boolean;
    /**
     * Postal mail to recipient status
     * @type {StatusDetail}
     * @memberof Form1099RListItemResponse
     */
    readonly postalMailStatus?: StatusDetail | null;
    /**
     * Boolean indicating that TIN Matching has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099RListItemResponse
     */
    tinMatch: boolean;
    /**
     * TIN Match status
     * @type {StatusDetail}
     * @memberof Form1099RListItemResponse
     */
    readonly tinMatchStatus?: StatusDetail | null;
    /**
     * Boolean indicating that address verification has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099RListItemResponse
     */
    addressVerification: boolean;
    /**
     * Address verification status
     * @type {StatusDetail}
     * @memberof Form1099RListItemResponse
     */
    readonly addressVerificationStatus?: StatusDetail | null;
    /**
     * EDelivery status
     * @type {StatusDetail}
     * @memberof Form1099RListItemResponse
     */
    readonly eDeliveryStatus?: StatusDetail | null;
    /**
     * Reference ID
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    referenceId?: string | null;
    /**
     * Recipient email address
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    email?: string | null;
    /**
     * Type of TIN (Tax ID Number). Will be one of:
     * * SSN
     * * EIN
     * * ITIN
     * * ATIN
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    tinType?: string | null;
    /**
     * Recipient Tax ID Number
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    tin?: string | null;
    /**
     * Indicates whether the recipient has no TIN
     * @type {boolean}
     * @memberof Form1099RListItemResponse
     */
    noTin?: boolean;
    /**
     * Second Tin Notice
     * @type {boolean}
     * @memberof Form1099RListItemResponse
     */
    secondTinNotice?: boolean | null;
    /**
     * Recipient name
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    recipientName?: string | null;
    /**
     * Recipient second name
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    recipientSecondName?: string | null;
    /**
     * Address
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    address?: string | null;
    /**
     * Address line 2
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    address2?: string | null;
    /**
     * City
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    city?: string | null;
    /**
     * US state
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    state?: string | null;
    /**
     * Zip/postal code
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    zip?: string | null;
    /**
     * Foreign province
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    nonUsProvince?: string | null;
    /**
     * Country code, as defined at https://www.irs.gov/e-file-providers/country-codes
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    countryCode?: string | null;
    /**
     * Account Number
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    accountNumber?: string | null;
    /**
     * Office Code
     * @type {string}
     * @memberof Form1099RListItemResponse
     */
    officeCode?: string | null;
    /**
     * FATCA filing requirement
     * @type {boolean}
     * @memberof Form1099RListItemResponse
     */
    fatcaFilingRequirement?: boolean | null;
    /**
     * Validation errors
     * @type {Array<ValidationErrorResponse>}
     * @memberof Form1099RListItemResponse
     */
    readonly validationErrors?: Array<ValidationErrorResponse> | null;
    /**
     * Creation time
     * @type {Date}
     * @memberof Form1099RListItemResponse
     */
    readonly createdAt?: Date;
    /**
     * Update time
     * @type {Date}
     * @memberof Form1099RListItemResponse
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {StateAndLocalWithholdingResponse}
     * @memberof Form1099RListItemResponse
     */
    stateAndLocalWithholding?: StateAndLocalWithholdingResponse | null;
}



/**
 * Check if a given object implements the Form1099RListItemResponse interface.
 */
export function instanceOfForm1099RListItemResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "issuerId" in value;
    isInstance = isInstance && "federalEfile" in value;
    isInstance = isInstance && "stateEfile" in value;
    isInstance = isInstance && "postalMail" in value;
    isInstance = isInstance && "tinMatch" in value;
    isInstance = isInstance && "addressVerification" in value;

    return isInstance;
}

export function Form1099RListItemResponseFromJSON(json: any): Form1099RListItemResponse {
    return Form1099RListItemResponseFromJSONTyped(json, false);
}

export function Form1099RListItemResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1099RListItemResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'grossDistributions': !exists(json, 'grossDistributions') ? undefined : json['grossDistributions'],
        'taxableAmount': !exists(json, 'taxableAmount') ? undefined : json['taxableAmount'],
        'taxableAmountNotDetermined': !exists(json, 'taxableAmountNotDetermined') ? undefined : json['taxableAmountNotDetermined'],
        'totalDistributionIndicator': !exists(json, 'totalDistributionIndicator') ? undefined : json['totalDistributionIndicator'],
        'capitalGain': !exists(json, 'capitalGain') ? undefined : json['capitalGain'],
        'fedIncomeTaxWithheld': !exists(json, 'fedIncomeTaxWithheld') ? undefined : json['fedIncomeTaxWithheld'],
        'employeeContributions': !exists(json, 'employeeContributions') ? undefined : json['employeeContributions'],
        'netUnrealizedAppreciation': !exists(json, 'netUnrealizedAppreciation') ? undefined : json['netUnrealizedAppreciation'],
        'distributionCodeRequired': !exists(json, 'distributionCodeRequired') ? undefined : json['distributionCodeRequired'],
        'distributionCodeOptional': !exists(json, 'distributionCodeOptional') ? undefined : json['distributionCodeOptional'],
        'iraSepSimpleIndicator': !exists(json, 'iraSepSimpleIndicator') ? undefined : json['iraSepSimpleIndicator'],
        'totalIraSepSimpleDistribution': !exists(json, 'totalIraSepSimpleDistribution') ? undefined : json['totalIraSepSimpleDistribution'],
        'other': !exists(json, 'other') ? undefined : json['other'],
        'otherPercent': !exists(json, 'otherPercent') ? undefined : json['otherPercent'],
        'percentageTotalDistribution': !exists(json, 'percentageTotalDistribution') ? undefined : json['percentageTotalDistribution'],
        'totalEmployeeContributions': !exists(json, 'totalEmployeeContributions') ? undefined : json['totalEmployeeContributions'],
        'amountAllocableToIrr': !exists(json, 'amountAllocableToIrr') ? undefined : json['amountAllocableToIrr'],
        'firstYearDesignatedRothContrib': !exists(json, 'firstYearDesignatedRothContrib') ? undefined : json['firstYearDesignatedRothContrib'],
        'dateOfPayment': !exists(json, 'dateOfPayment') ? undefined : json['dateOfPayment'],
        'id': json['id'],
        'type': json['type'],
        'issuerId': json['issuerId'],
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'federalEfile': json['federalEfile'],
        'federalEfileStatus': !exists(json, 'federalEfileStatus') ? undefined : StatusDetailFromJSON(json['federalEfileStatus']),
        'stateEfile': json['stateEfile'],
        'stateEfileStatus': !exists(json, 'stateEfileStatus') ? undefined : (json['stateEfileStatus'] === null ? null : (json['stateEfileStatus'] as Array<any>)?.map(StateEfileStatusDetailResponseFromJSON)),
        'postalMail': json['postalMail'],
        'postalMailStatus': !exists(json, 'postalMailStatus') ? undefined : StatusDetailFromJSON(json['postalMailStatus']),
        'tinMatch': json['tinMatch'],
        'tinMatchStatus': !exists(json, 'tinMatchStatus') ? undefined : StatusDetailFromJSON(json['tinMatchStatus']),
        'addressVerification': json['addressVerification'],
        'addressVerificationStatus': !exists(json, 'addressVerificationStatus') ? undefined : StatusDetailFromJSON(json['addressVerificationStatus']),
        'eDeliveryStatus': !exists(json, 'eDeliveryStatus') ? undefined : StatusDetailFromJSON(json['eDeliveryStatus']),
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'noTin': !exists(json, 'noTin') ? undefined : json['noTin'],
        'secondTinNotice': !exists(json, 'secondTinNotice') ? undefined : json['secondTinNotice'],
        'recipientName': !exists(json, 'recipientName') ? undefined : json['recipientName'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'nonUsProvince': !exists(json, 'nonUsProvince') ? undefined : json['nonUsProvince'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'fatcaFilingRequirement': !exists(json, 'fatcaFilingRequirement') ? undefined : json['fatcaFilingRequirement'],
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>)?.map(ValidationErrorResponseFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingResponseFromJSON(json['stateAndLocalWithholding']),
    };
}

export function Form1099RListItemResponseToJSON(value?: Form1099RListItemResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'grossDistributions': value.grossDistributions,
        'taxableAmount': value.taxableAmount,
        'taxableAmountNotDetermined': value.taxableAmountNotDetermined,
        'totalDistributionIndicator': value.totalDistributionIndicator,
        'capitalGain': value.capitalGain,
        'fedIncomeTaxWithheld': value.fedIncomeTaxWithheld,
        'employeeContributions': value.employeeContributions,
        'netUnrealizedAppreciation': value.netUnrealizedAppreciation,
        'distributionCodeRequired': value.distributionCodeRequired,
        'distributionCodeOptional': value.distributionCodeOptional,
        'iraSepSimpleIndicator': value.iraSepSimpleIndicator,
        'totalIraSepSimpleDistribution': value.totalIraSepSimpleDistribution,
        'other': value.other,
        'otherPercent': value.otherPercent,
        'percentageTotalDistribution': value.percentageTotalDistribution,
        'totalEmployeeContributions': value.totalEmployeeContributions,
        'amountAllocableToIrr': value.amountAllocableToIrr,
        'firstYearDesignatedRothContrib': value.firstYearDesignatedRothContrib,
        'dateOfPayment': value.dateOfPayment,
        'type': value.type,
        'issuerId': value.issuerId,
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'federalEfile': value.federalEfile,
        'stateEfile': value.stateEfile,
        'postalMail': value.postalMail,
        'tinMatch': value.tinMatch,
        'addressVerification': value.addressVerification,
        'referenceId': value.referenceId,
        'email': value.email,
        'tinType': value.tinType,
        'tin': value.tin,
        'noTin': value.noTin,
        'secondTinNotice': value.secondTinNotice,
        'recipientName': value.recipientName,
        'recipientSecondName': value.recipientSecondName,
        'address': value.address,
        'address2': value.address2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'nonUsProvince': value.nonUsProvince,
        'countryCode': value.countryCode,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'fatcaFilingRequirement': value.fatcaFilingRequirement,
        'stateAndLocalWithholding': StateAndLocalWithholdingResponseToJSON(value.stateAndLocalWithholding),
    };
}
