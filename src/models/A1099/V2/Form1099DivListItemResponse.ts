/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    StateAndLocalWithholdingResponse,
    StateAndLocalWithholdingResponseFromJSON,
    StateAndLocalWithholdingResponseFromJSONTyped,
    StateAndLocalWithholdingResponseToJSON,
} from './StateAndLocalWithholdingResponse';
import {
    StateEfileStatusDetailResponse,
    StateEfileStatusDetailResponseFromJSON,
    StateEfileStatusDetailResponseFromJSONTyped,
    StateEfileStatusDetailResponseToJSON,
} from './StateEfileStatusDetailResponse';
import {
    StatusDetail,
    StatusDetailFromJSON,
    StatusDetailFromJSONTyped,
    StatusDetailToJSON,
} from './StatusDetail';
import {
    ValidationErrorResponse,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseFromJSONTyped,
    ValidationErrorResponseToJSON,
} from './ValidationErrorResponse';

/**
 * 
 * @export
 * @interface Form1099DivListItemResponse
 */
export interface Form1099DivListItemResponse {
    /**
     * Total ordinary dividends
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    totalOrdinaryDividends?: number | null;
    /**
     * Qualified dividends
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    qualifiedDividends?: number | null;
    /**
     * Total capital gain distributions
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    totalCapitalGainDistributions?: number | null;
    /**
     * Unrecaptured Section 1250 gain
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    unrecapturedSection1250Gain?: number | null;
    /**
     * Section 1202 gain
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    section1202Gain?: number | null;
    /**
     * Collectibles (28%) gain
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    collectiblesGain?: number | null;
    /**
     * Section 897 ordinary dividends
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    section897OrdinaryDividends?: number | null;
    /**
     * Section 897 capital gain
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    section897CapitalGain?: number | null;
    /**
     * Nondividend distributions
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    nondividendDistributions?: number | null;
    /**
     * Federal income tax withheld
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    federalIncomeTaxWithheld?: number | null;
    /**
     * Section 199A dividends
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    section199ADividends?: number | null;
    /**
     * Investment expenses
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    investmentExpenses?: number | null;
    /**
     * Foreign tax paid
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    foreignTaxPaid?: number | null;
    /**
     * Foreign country or U.S. possession
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    foreignCountryOrUSPossession?: string | null;
    /**
     * Cash liquidation distributions
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    cashLiquidationDistributions?: number | null;
    /**
     * Noncash liquidation distributions
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    noncashLiquidationDistributions?: number | null;
    /**
     * Exempt-interest dividends
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    exemptInterestDividends?: number | null;
    /**
     * Specified private activity bond interest dividends
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    specifiedPrivateActivityBondInterestDividends?: number | null;
    /**
     * FATCA filing requirement
     * @type {boolean}
     * @memberof Form1099DivListItemResponse
     */
    fatcaFilingRequirement?: boolean | null;
    /**
     * ID of the form
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    readonly id: string;
    /**
     * Type of the form. Will be one of:
     * * 940
     * * 941
     * * 943
     * * 944
     * * 945
     * * 1042
     * * 1042-S
     * * 1095-B
     * * 1095-C
     * * 1097-BTC
     * * 1098
     * * 1098-C
     * * 1098-E
     * * 1098-Q
     * * 1098-T
     * * 3921
     * * 3922
     * * 5498
     * * 5498-ESA
     * * 5498-SA
     * * 1099-MISC
     * * 1099-A
     * * 1099-B
     * * 1099-C
     * * 1099-CAP
     * * 1099-DIV
     * * 1099-G
     * * 1099-INT
     * * 1099-K
     * * 1099-LS
     * * 1099-LTC
     * * 1099-NEC
     * * 1099-OID
     * * 1099-PATR
     * * 1099-Q
     * * 1099-R
     * * 1099-S
     * * 1099-SA
     * * T4A
     * * W-2
     * * W-2G
     * * 1099-HC
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    type: string;
    /**
     * Issuer ID
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    issuerId: number;
    /**
     * Issuer Reference ID
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    issuerReferenceId?: string | null;
    /**
     * Issuer TIN
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    issuerTin?: string | null;
    /**
     * Tax year
     * @type {number}
     * @memberof Form1099DivListItemResponse
     */
    taxYear?: number;
    /**
     * Boolean indicating that federal e-filing has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099DivListItemResponse
     */
    federalEfile: boolean;
    /**
     * Federal e-file status
     * @type {StatusDetail}
     * @memberof Form1099DivListItemResponse
     */
    readonly federalEfileStatus?: StatusDetail;
    /**
     * Boolean indicating that state e-filing has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099DivListItemResponse
     */
    stateEfile: boolean;
    /**
     * State e-file status
     * @type {Array<StateEfileStatusDetailResponse>}
     * @memberof Form1099DivListItemResponse
     */
    readonly stateEfileStatus?: Array<StateEfileStatusDetailResponse> | null;
    /**
     * Boolean indicating that postal mailing to the recipient has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099DivListItemResponse
     */
    postalMail: boolean;
    /**
     * Postal mail to recipient status
     * @type {StatusDetail}
     * @memberof Form1099DivListItemResponse
     */
    readonly postalMailStatus?: StatusDetail | null;
    /**
     * Boolean indicating that TIN Matching has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099DivListItemResponse
     */
    tinMatch: boolean;
    /**
     * TIN Match status
     * @type {StatusDetail}
     * @memberof Form1099DivListItemResponse
     */
    readonly tinMatchStatus?: StatusDetail | null;
    /**
     * Boolean indicating that address verification has been scheduled for this form
     * @type {boolean}
     * @memberof Form1099DivListItemResponse
     */
    addressVerification: boolean;
    /**
     * Address verification status
     * @type {StatusDetail}
     * @memberof Form1099DivListItemResponse
     */
    readonly addressVerificationStatus?: StatusDetail | null;
    /**
     * EDelivery status
     * @type {StatusDetail}
     * @memberof Form1099DivListItemResponse
     */
    readonly eDeliveryStatus?: StatusDetail | null;
    /**
     * Reference ID
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    referenceId?: string | null;
    /**
     * Recipient email address
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    email?: string | null;
    /**
     * Type of TIN (Tax ID Number). Will be one of:
     * * SSN
     * * EIN
     * * ITIN
     * * ATIN
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    tinType?: string | null;
    /**
     * Recipient Tax ID Number
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    tin?: string | null;
    /**
     * Indicates whether the recipient has no TIN
     * @type {boolean}
     * @memberof Form1099DivListItemResponse
     */
    noTin?: boolean;
    /**
     * Second Tin Notice
     * @type {boolean}
     * @memberof Form1099DivListItemResponse
     */
    secondTinNotice?: boolean | null;
    /**
     * Recipient name
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    recipientName?: string | null;
    /**
     * Recipient second name
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    recipientSecondName?: string | null;
    /**
     * Address
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    address?: string | null;
    /**
     * Address line 2
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    address2?: string | null;
    /**
     * City
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    city?: string | null;
    /**
     * US state
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    state?: string | null;
    /**
     * Zip/postal code
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    zip?: string | null;
    /**
     * Foreign province
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    nonUsProvince?: string | null;
    /**
     * Country code, as defined at https://www.irs.gov/e-file-providers/country-codes
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    countryCode?: string | null;
    /**
     * Account Number
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    accountNumber?: string | null;
    /**
     * Office Code
     * @type {string}
     * @memberof Form1099DivListItemResponse
     */
    officeCode?: string | null;
    /**
     * Validation errors
     * @type {Array<ValidationErrorResponse>}
     * @memberof Form1099DivListItemResponse
     */
    readonly validationErrors?: Array<ValidationErrorResponse> | null;
    /**
     * Creation time
     * @type {Date}
     * @memberof Form1099DivListItemResponse
     */
    readonly createdAt?: Date;
    /**
     * Update time
     * @type {Date}
     * @memberof Form1099DivListItemResponse
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {StateAndLocalWithholdingResponse}
     * @memberof Form1099DivListItemResponse
     */
    stateAndLocalWithholding?: StateAndLocalWithholdingResponse | null;
}



/**
 * Check if a given object implements the Form1099DivListItemResponse interface.
 */
export function instanceOfForm1099DivListItemResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "issuerId" in value;
    isInstance = isInstance && "federalEfile" in value;
    isInstance = isInstance && "stateEfile" in value;
    isInstance = isInstance && "postalMail" in value;
    isInstance = isInstance && "tinMatch" in value;
    isInstance = isInstance && "addressVerification" in value;

    return isInstance;
}

export function Form1099DivListItemResponseFromJSON(json: any): Form1099DivListItemResponse {
    return Form1099DivListItemResponseFromJSONTyped(json, false);
}

export function Form1099DivListItemResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1099DivListItemResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'totalOrdinaryDividends': !exists(json, 'totalOrdinaryDividends') ? undefined : json['totalOrdinaryDividends'],
        'qualifiedDividends': !exists(json, 'qualifiedDividends') ? undefined : json['qualifiedDividends'],
        'totalCapitalGainDistributions': !exists(json, 'totalCapitalGainDistributions') ? undefined : json['totalCapitalGainDistributions'],
        'unrecapturedSection1250Gain': !exists(json, 'unrecapturedSection1250Gain') ? undefined : json['unrecapturedSection1250Gain'],
        'section1202Gain': !exists(json, 'section1202Gain') ? undefined : json['section1202Gain'],
        'collectiblesGain': !exists(json, 'collectiblesGain') ? undefined : json['collectiblesGain'],
        'section897OrdinaryDividends': !exists(json, 'section897OrdinaryDividends') ? undefined : json['section897OrdinaryDividends'],
        'section897CapitalGain': !exists(json, 'section897CapitalGain') ? undefined : json['section897CapitalGain'],
        'nondividendDistributions': !exists(json, 'nondividendDistributions') ? undefined : json['nondividendDistributions'],
        'federalIncomeTaxWithheld': !exists(json, 'federalIncomeTaxWithheld') ? undefined : json['federalIncomeTaxWithheld'],
        'section199ADividends': !exists(json, 'section199ADividends') ? undefined : json['section199ADividends'],
        'investmentExpenses': !exists(json, 'investmentExpenses') ? undefined : json['investmentExpenses'],
        'foreignTaxPaid': !exists(json, 'foreignTaxPaid') ? undefined : json['foreignTaxPaid'],
        'foreignCountryOrUSPossession': !exists(json, 'foreignCountryOrUSPossession') ? undefined : json['foreignCountryOrUSPossession'],
        'cashLiquidationDistributions': !exists(json, 'cashLiquidationDistributions') ? undefined : json['cashLiquidationDistributions'],
        'noncashLiquidationDistributions': !exists(json, 'noncashLiquidationDistributions') ? undefined : json['noncashLiquidationDistributions'],
        'exemptInterestDividends': !exists(json, 'exemptInterestDividends') ? undefined : json['exemptInterestDividends'],
        'specifiedPrivateActivityBondInterestDividends': !exists(json, 'specifiedPrivateActivityBondInterestDividends') ? undefined : json['specifiedPrivateActivityBondInterestDividends'],
        'fatcaFilingRequirement': !exists(json, 'fatcaFilingRequirement') ? undefined : json['fatcaFilingRequirement'],
        'id': json['id'],
        'type': json['type'],
        'issuerId': json['issuerId'],
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'federalEfile': json['federalEfile'],
        'federalEfileStatus': !exists(json, 'federalEfileStatus') ? undefined : StatusDetailFromJSON(json['federalEfileStatus']),
        'stateEfile': json['stateEfile'],
        'stateEfileStatus': !exists(json, 'stateEfileStatus') ? undefined : (json['stateEfileStatus'] === null ? null : (json['stateEfileStatus'] as Array<any>)?.map(StateEfileStatusDetailResponseFromJSON)),
        'postalMail': json['postalMail'],
        'postalMailStatus': !exists(json, 'postalMailStatus') ? undefined : StatusDetailFromJSON(json['postalMailStatus']),
        'tinMatch': json['tinMatch'],
        'tinMatchStatus': !exists(json, 'tinMatchStatus') ? undefined : StatusDetailFromJSON(json['tinMatchStatus']),
        'addressVerification': json['addressVerification'],
        'addressVerificationStatus': !exists(json, 'addressVerificationStatus') ? undefined : StatusDetailFromJSON(json['addressVerificationStatus']),
        'eDeliveryStatus': !exists(json, 'eDeliveryStatus') ? undefined : StatusDetailFromJSON(json['eDeliveryStatus']),
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'noTin': !exists(json, 'noTin') ? undefined : json['noTin'],
        'secondTinNotice': !exists(json, 'secondTinNotice') ? undefined : json['secondTinNotice'],
        'recipientName': !exists(json, 'recipientName') ? undefined : json['recipientName'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'nonUsProvince': !exists(json, 'nonUsProvince') ? undefined : json['nonUsProvince'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>)?.map(ValidationErrorResponseFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingResponseFromJSON(json['stateAndLocalWithholding']),
    };
}

export function Form1099DivListItemResponseToJSON(value?: Form1099DivListItemResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'totalOrdinaryDividends': value.totalOrdinaryDividends,
        'qualifiedDividends': value.qualifiedDividends,
        'totalCapitalGainDistributions': value.totalCapitalGainDistributions,
        'unrecapturedSection1250Gain': value.unrecapturedSection1250Gain,
        'section1202Gain': value.section1202Gain,
        'collectiblesGain': value.collectiblesGain,
        'section897OrdinaryDividends': value.section897OrdinaryDividends,
        'section897CapitalGain': value.section897CapitalGain,
        'nondividendDistributions': value.nondividendDistributions,
        'federalIncomeTaxWithheld': value.federalIncomeTaxWithheld,
        'section199ADividends': value.section199ADividends,
        'investmentExpenses': value.investmentExpenses,
        'foreignTaxPaid': value.foreignTaxPaid,
        'foreignCountryOrUSPossession': value.foreignCountryOrUSPossession,
        'cashLiquidationDistributions': value.cashLiquidationDistributions,
        'noncashLiquidationDistributions': value.noncashLiquidationDistributions,
        'exemptInterestDividends': value.exemptInterestDividends,
        'specifiedPrivateActivityBondInterestDividends': value.specifiedPrivateActivityBondInterestDividends,
        'fatcaFilingRequirement': value.fatcaFilingRequirement,
        'type': value.type,
        'issuerId': value.issuerId,
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'federalEfile': value.federalEfile,
        'stateEfile': value.stateEfile,
        'postalMail': value.postalMail,
        'tinMatch': value.tinMatch,
        'addressVerification': value.addressVerification,
        'referenceId': value.referenceId,
        'email': value.email,
        'tinType': value.tinType,
        'tin': value.tin,
        'noTin': value.noTin,
        'secondTinNotice': value.secondTinNotice,
        'recipientName': value.recipientName,
        'recipientSecondName': value.recipientSecondName,
        'address': value.address,
        'address2': value.address2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'nonUsProvince': value.nonUsProvince,
        'countryCode': value.countryCode,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'stateAndLocalWithholding': StateAndLocalWithholdingResponseToJSON(value.stateAndLocalWithholding),
    };
}
