/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Use **username/password** or generate a **license key** from: *Avalara Portal ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * 
 * @export
 * @interface StateAndLocalWithholding
 */
export interface StateAndLocalWithholding {
    /**
     * 
     * @type {number}
     * @memberof StateAndLocalWithholding
     */
    stateTaxWithheld?: number | null;
    /**
     * 
     * @type {string}
     * @memberof StateAndLocalWithholding
     */
    state?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateAndLocalWithholding
     */
    stateIdNumber?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StateAndLocalWithholding
     */
    stateIncome?: number | null;
    /**
     * 
     * @type {number}
     * @memberof StateAndLocalWithholding
     */
    localTaxWithheld?: number | null;
    /**
     * 
     * @type {string}
     * @memberof StateAndLocalWithholding
     */
    locality?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateAndLocalWithholding
     */
    localityIdNumber?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StateAndLocalWithholding
     */
    localIncome?: number | null;
}



/**
 * Check if a given object implements the StateAndLocalWithholding interface.
 */
export function instanceOfStateAndLocalWithholding(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StateAndLocalWithholdingFromJSON(json: any): StateAndLocalWithholding {
    return StateAndLocalWithholdingFromJSONTyped(json, false);
}

export function StateAndLocalWithholdingFromJSONTyped(json: any, ignoreDiscriminator: boolean): StateAndLocalWithholding {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stateTaxWithheld': !exists(json, 'stateTaxWithheld') ? undefined : json['stateTaxWithheld'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'stateIdNumber': !exists(json, 'stateIdNumber') ? undefined : json['stateIdNumber'],
        'stateIncome': !exists(json, 'stateIncome') ? undefined : json['stateIncome'],
        'localTaxWithheld': !exists(json, 'localTaxWithheld') ? undefined : json['localTaxWithheld'],
        'locality': !exists(json, 'locality') ? undefined : json['locality'],
        'localityIdNumber': !exists(json, 'localityIdNumber') ? undefined : json['localityIdNumber'],
        'localIncome': !exists(json, 'localIncome') ? undefined : json['localIncome'],
    };
}

export function StateAndLocalWithholdingToJSON(value?: StateAndLocalWithholding | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stateTaxWithheld': value.stateTaxWithheld,
        'state': value.state,
        'stateIdNumber': value.stateIdNumber,
        'stateIncome': value.stateIncome,
        'localTaxWithheld': value.localTaxWithheld,
        'locality': value.locality,
        'localityIdNumber': value.localityIdNumber,
        'localIncome': value.localIncome,
    };
}
