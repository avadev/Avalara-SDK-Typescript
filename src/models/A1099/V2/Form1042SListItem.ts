/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    IntermediaryOrFlowThrough,
    IntermediaryOrFlowThroughFromJSON,
    IntermediaryOrFlowThroughFromJSONTyped,
    IntermediaryOrFlowThroughToJSON,
} from './IntermediaryOrFlowThrough';
import {
    PrimaryWithholdingAgent,
    PrimaryWithholdingAgentFromJSON,
    PrimaryWithholdingAgentFromJSONTyped,
    PrimaryWithholdingAgentToJSON,
} from './PrimaryWithholdingAgent';
import {
    StateAndLocalWithholdingRequest,
    StateAndLocalWithholdingRequestFromJSON,
    StateAndLocalWithholdingRequestFromJSONTyped,
    StateAndLocalWithholdingRequestToJSON,
} from './StateAndLocalWithholdingRequest';

/**
 * 
 * @export
 * @interface Form1042SListItem
 */
export interface Form1042SListItem {
    /**
     * Unique form identifier
     * @type {string}
     * @memberof Form1042SListItem
     */
    uniqueFormId?: string;
    /**
     * No TIN indicator
     * @type {boolean}
     * @memberof Form1042SListItem
     */
    noTin?: boolean | null;
    /**
     * Recipient's date of birth
     * @type {Date}
     * @memberof Form1042SListItem
     */
    recipientDateOfBirth?: Date | null;
    /**
     * Recipient's GIIN (Global Intermediary Identification Number)
     * @type {string}
     * @memberof Form1042SListItem
     */
    recipientGiin?: string | null;
    /**
     * Recipient's foreign TIN
     * @type {string}
     * @memberof Form1042SListItem
     */
    recipientForeignTin?: string | null;
    /**
     * Limitation on benefits code
     * @type {string}
     * @memberof Form1042SListItem
     */
    lobCode?: Form1042SListItemLobCodeEnum;
    /**
     * Income code
     * @type {string}
     * @memberof Form1042SListItem
     */
    incomeCode?: string;
    /**
     * Gross income
     * @type {number}
     * @memberof Form1042SListItem
     */
    grossIncome?: number;
    /**
     * Withholding indicator
     * @type {string}
     * @memberof Form1042SListItem
     */
    withholdingIndicator?: string;
    /**
     * Country code
     * @type {string}
     * @memberof Form1042SListItem
     */
    taxCountryCode?: string;
    /**
     * Exemption code (Chapter 3)
     * @type {string}
     * @memberof Form1042SListItem
     */
    exemptionCodeChap3?: Form1042SListItemExemptionCodeChap3Enum;
    /**
     * Exemption code (Chapter 4)
     * @type {string}
     * @memberof Form1042SListItem
     */
    exemptionCodeChap4?: Form1042SListItemExemptionCodeChap4Enum;
    /**
     * Tax rate (Chapter 3)
     * @type {string}
     * @memberof Form1042SListItem
     */
    taxRateChap3?: string | null;
    /**
     * Withholding allowance
     * @type {number}
     * @memberof Form1042SListItem
     */
    withholdingAllowance?: number | null;
    /**
     * Federal tax withheld
     * @type {number}
     * @memberof Form1042SListItem
     */
    federalTaxWithheld?: number | null;
    /**
     * Tax not deposited indicator
     * @type {boolean}
     * @memberof Form1042SListItem
     */
    taxNotDepositedIndicator?: boolean | null;
    /**
     * Academic indicator
     * @type {boolean}
     * @memberof Form1042SListItem
     */
    academicIndicator?: boolean | null;
    /**
     * Tax withheld by other agents
     * @type {number}
     * @memberof Form1042SListItem
     */
    taxWithheldOtherAgents?: number | null;
    /**
     * Amount repaid to recipient
     * @type {number}
     * @memberof Form1042SListItem
     */
    amountRepaid?: number | null;
    /**
     * Tax paid by withholding agent
     * @type {number}
     * @memberof Form1042SListItem
     */
    taxPaidAgent?: number | null;
    /**
     * Chapter 3 status code
     * @type {string}
     * @memberof Form1042SListItem
     */
    chap3StatusCode?: Form1042SListItemChap3StatusCodeEnum;
    /**
     * Chapter 4 status code
     * @type {string}
     * @memberof Form1042SListItem
     */
    chap4StatusCode?: Form1042SListItemChap4StatusCodeEnum;
    /**
     * Primary withholding agent information
     * @type {PrimaryWithholdingAgent}
     * @memberof Form1042SListItem
     */
    primaryWithholdingAgent?: PrimaryWithholdingAgent;
    /**
     * Intermediary or flow-through entity information
     * @type {IntermediaryOrFlowThrough}
     * @memberof Form1042SListItem
     */
    intermediaryOrFlowThrough?: IntermediaryOrFlowThrough;
    /**
     * Issuer ID
     * @type {string}
     * @memberof Form1042SListItem
     */
    issuerId?: string | null;
    /**
     * Reference ID
     * @type {string}
     * @memberof Form1042SListItem
     */
    referenceId?: string | null;
    /**
     * Recipient Tax ID Number
     * @type {string}
     * @memberof Form1042SListItem
     */
    recipientTin?: string;
    /**
     * Recipient name
     * @type {string}
     * @memberof Form1042SListItem
     */
    recipientName?: string | null;
    /**
     * Type of TIN (Tax ID Number). Will be one of:
     * * SSN
     * * EIN
     * * ITIN
     * * ATIN
     * @type {string}
     * @memberof Form1042SListItem
     */
    tinType?: Form1042SListItemTinTypeEnum;
    /**
     * Recipient second name
     * @type {string}
     * @memberof Form1042SListItem
     */
    recipientSecondName?: string | null;
    /**
     * Address
     * @type {string}
     * @memberof Form1042SListItem
     */
    address: string;
    /**
     * Address line 2
     * @type {string}
     * @memberof Form1042SListItem
     */
    address2?: string | null;
    /**
     * City
     * @type {string}
     * @memberof Form1042SListItem
     */
    city: string;
    /**
     * US state. Required if CountryCode is "US".
     * @type {string}
     * @memberof Form1042SListItem
     */
    state?: string;
    /**
     * Zip/postal code
     * @type {string}
     * @memberof Form1042SListItem
     */
    zip?: string;
    /**
     * Recipient email address
     * @type {string}
     * @memberof Form1042SListItem
     */
    email?: string | null;
    /**
     * Account number
     * @type {string}
     * @memberof Form1042SListItem
     */
    accountNumber?: string | null;
    /**
     * Office code
     * @type {string}
     * @memberof Form1042SListItem
     */
    officeCode?: string | null;
    /**
     * Foreign province
     * @type {string}
     * @memberof Form1042SListItem
     */
    nonUsProvince?: string | null;
    /**
     * Country code, as defined at https://www.irs.gov/e-file-providers/country-codes
     * @type {string}
     * @memberof Form1042SListItem
     */
    countryCode: string;
    /**
     * Boolean indicating that federal e-filing should be scheduled for this form
     * @type {boolean}
     * @memberof Form1042SListItem
     */
    federalEFile?: boolean;
    /**
     * Boolean indicating that postal mailing to the recipient should be scheduled for this form
     * @type {boolean}
     * @memberof Form1042SListItem
     */
    postalMail?: boolean;
    /**
     * Boolean indicating that state e-filing should be scheduled for this form
     * @type {boolean}
     * @memberof Form1042SListItem
     */
    stateEFile?: boolean;
    /**
     * Boolean indicating that TIN Matching should be scheduled for this form
     * @type {boolean}
     * @memberof Form1042SListItem
     */
    tinMatch?: boolean;
    /**
     * Second TIN notice in three years
     * @type {boolean}
     * @memberof Form1042SListItem
     */
    secondTinNotice?: boolean | null;
    /**
     * Boolean indicating that address verification should be scheduled for this form
     * @type {boolean}
     * @memberof Form1042SListItem
     */
    addressVerification?: boolean;
    /**
     * State and local withholding information
     * @type {StateAndLocalWithholdingRequest}
     * @memberof Form1042SListItem
     */
    stateAndLocalWithholding?: StateAndLocalWithholdingRequest | null;
}

/**
* @export
* @enum {string}
*/
export enum Form1042SListItemLobCodeEnum {
    Individual = 'Individual',
    GovernmentContractingState = 'GovernmentContractingState',
    TaxExemptPensionTrust = 'TaxExemptPensionTrust',
    TaxExemptCharitableOrganization = 'TaxExemptCharitableOrganization',
    PubliclyTradedCorporation = 'PubliclyTradedCorporation',
    SubsidiaryOfPubliclyTradedCorporation = 'SubsidiaryOfPubliclyTradedCorporation',
    CompanyOwnershipBaseErosionTest = 'CompanyOwnershipBaseErosionTest',
    CompanyDerivativeBenefitsTest = 'CompanyDerivativeBenefitsTest',
    CompanyActiveTradeOrBusinessTest = 'CompanyActiveTradeOrBusinessTest',
    DiscretionaryDetermination = 'DiscretionaryDetermination',
    Other = 'Other',
    NoLobArticleInTreaty = 'NoLobArticleInTreaty'
}/**
* @export
* @enum {string}
*/
export enum Form1042SListItemExemptionCodeChap3Enum {
    TaxRateDueToBackupWithholding = 'TaxRateDueToBackupWithholding',
    EffectivelyConnectedIncome = 'EffectivelyConnectedIncome',
    ExemptUnderIrc = 'ExemptUnderIrc',
    IncomeNotFromUsSources = 'IncomeNotFromUsSources',
    ExemptUnderTaxTreaty = 'ExemptUnderTaxTreaty',
    PortfolioInterestExemptUnderIrc = 'PortfolioInterestExemptUnderIrc',
    QiThatAssumesPrimaryWithholdingResponsibility = 'QiThatAssumesPrimaryWithholdingResponsibility',
    WfPorWft = 'WfPorWft',
    UsBranchTreatedAsUsPerson = 'UsBranchTreatedAsUsPerson',
    TerritoryFiTreatedAsUsPerson = 'TerritoryFiTreatedAsUsPerson',
    QiRepresentsIncomeExempt = 'QiRepresentsIncomeExempt',
    QslThatAssumesPrimaryWithholdingResponsibility = 'QslThatAssumesPrimaryWithholdingResponsibility',
    PayeeSubjectedToChapter4Withholding = 'PayeeSubjectedToChapter4Withholding',
    QddThatAssumesPrimaryWithholdingResponsibility = 'QddThatAssumesPrimaryWithholdingResponsibility',
    ExemptUnderSection897L = 'ExemptUnderSection897L',
    ExemptUnderSection892 = 'ExemptUnderSection892'
}/**
* @export
* @enum {string}
*/
export enum Form1042SListItemExemptionCodeChap4Enum {
    NotExempt = 'NotExempt',
    GrandfatheredPayment = 'GrandfatheredPayment',
    EffectivelyConnectedIncome = 'EffectivelyConnectedIncome',
    PayeeNotSubjectToChapter4Withholding = 'PayeeNotSubjectToChapter4Withholding',
    ExcludedNonfinancialPayment = 'ExcludedNonfinancialPayment',
    ForeignEntityThatAssumesPrimaryWithholdingResponsibility = 'ForeignEntityThatAssumesPrimaryWithholdingResponsibility',
    UsPayeesOfParticipatingFfi = 'UsPayeesOfParticipatingFfi',
    ExemptFromWithholdingUnderIga = 'ExemptFromWithholdingUnderIga',
    DormantAccount = 'DormantAccount',
    OtherPaymentNotSubjectToChapter4Withholding = 'OtherPaymentNotSubjectToChapter4Withholding'
}/**
* @export
* @enum {string}
*/
export enum Form1042SListItemChap3StatusCodeEnum {
    UsWithholdingAgentFi = 'USWithholdingAgentFI',
    UsWithholdingAgentOther = 'USWithholdingAgentOther',
    TerritoryFiTreatedAsUsPerson = 'TerritoryFITreatedAsUSPerson',
    TerritoryFiNotTreatedAsUsPerson = 'TerritoryFINotTreatedAsUSPerson',
    UsBranchTreatedAsUsPerson = 'USBranchTreatedAsUSPerson',
    UsBranchNotTreatedAsUsPerson = 'USBranchNotTreatedAsUSPerson',
    UsBranchEciPresumptionApplied = 'USBranchECIPresumptionApplied',
    PartnershipOtherThanWithholdingForeignPartnership = 'PartnershipOtherThanWithholdingForeignPartnership',
    WithholdingForeignPartnership = 'WithholdingForeignPartnership',
    TrustOtherThanWithholdingForeignTrust = 'TrustOtherThanWithholdingForeignTrust',
    WithholdingForeignTrust = 'WithholdingForeignTrust',
    QualifiedIntermediary = 'QualifiedIntermediary',
    QualifiedSecuritiesLenderQualifiedIntermediary = 'QualifiedSecuritiesLenderQualifiedIntermediary',
    QualifiedSecuritiesLenderOther = 'QualifiedSecuritiesLenderOther',
    Corporation = 'Corporation',
    Individual = 'Individual',
    Estate = 'Estate',
    PrivateFoundation = 'PrivateFoundation',
    GovernmentOrInternationalOrganization = 'GovernmentOrInternationalOrganization',
    TaxExemptOrganizationSection501cEntities = 'TaxExemptOrganizationSection501cEntities',
    UnknownRecipient = 'UnknownRecipient',
    ArtistOrAthlete = 'ArtistOrAthlete',
    Pension = 'Pension',
    ForeignCentralBankOfIssue = 'ForeignCentralBankOfIssue',
    NonqualifiedIntermediary = 'NonqualifiedIntermediary',
    HybridEntityMakingTreatyClaim = 'HybridEntityMakingTreatyClaim',
    WithholdingRatePoolGeneral = 'WithholdingRatePoolGeneral',
    WithholdingRatePoolExemptOrganization = 'WithholdingRatePoolExemptOrganization',
    PaiWithholdingRatePoolGeneral = 'PAIWithholdingRatePoolGeneral',
    PaiWithholdingRatePoolExemptOrganization = 'PAIWithholdingRatePoolExemptOrganization',
    AgencyWithholdingRatePoolGeneral = 'AgencyWithholdingRatePoolGeneral',
    AgencyWithholdingRatePoolExemptOrganization = 'AgencyWithholdingRatePoolExemptOrganization',
    UsWithholdingAgentForeignBranchOfFi = 'USWithholdingAgentForeignBranchOfFI',
    QualifiedDerivativesDealer = 'QualifiedDerivativesDealer',
    ForeignGovernmentIntegralPart = 'ForeignGovernmentIntegralPart',
    ForeignGovernmentControlledEntity = 'ForeignGovernmentControlledEntity',
    PubliclyTradedPartnership = 'PubliclyTradedPartnership',
    DisclosingQualifiedIntermediary = 'DisclosingQualifiedIntermediary'
}/**
* @export
* @enum {string}
*/
export enum Form1042SListItemChap4StatusCodeEnum {
    UsWithholdingAgentFi = 'UsWithholdingAgentFi',
    UsWithholdingAgentOther = 'UsWithholdingAgentOther',
    TerritoryFiNotTreatedAsUsPerson = 'TerritoryFiNotTreatedAsUsPerson',
    TerritoryFiTreatedAsUsPerson = 'TerritoryFiTreatedAsUsPerson',
    ParticipatingFfiOther = 'ParticipatingFfiOther',
    ParticipatingFfiReportingModel2Ffi = 'ParticipatingFfiReportingModel2Ffi',
    RegisteredDeemedCompliantFfiReportingModel1Ffi = 'RegisteredDeemedCompliantFfiReportingModel1Ffi',
    RegisteredDeemedCompliantFfiSponsoredEntity = 'RegisteredDeemedCompliantFfiSponsoredEntity',
    RegisteredDeemedCompliantFfiOther = 'RegisteredDeemedCompliantFfiOther',
    CertifiedDeemedCompliantFfiOther = 'CertifiedDeemedCompliantFfiOther',
    CertifiedDeemedCompliantFfiffiWithLowValueAccounts = 'CertifiedDeemedCompliantFfiffiWithLowValueAccounts',
    CertifiedDeemedCompliantFfiNonRegisteringLocalBank = 'CertifiedDeemedCompliantFfiNonRegisteringLocalBank',
    CertifiedDeemedCompliantFfiSponsoredEntity = 'CertifiedDeemedCompliantFfiSponsoredEntity',
    CertifiedDeemedCompliantFfiInvestmentAdvisorOrManager = 'CertifiedDeemedCompliantFfiInvestmentAdvisorOrManager',
    NonparticipatingFfi = 'NonparticipatingFfi',
    OwnerDocumentedFfi = 'OwnerDocumentedFfi',
    UsBranchTreatedAsUsPerson = 'UsBranchTreatedAsUsPerson',
    UsBranchNotTreatedAsUsPerson = 'UsBranchNotTreatedAsUsPerson',
    PassiveNffeIdentifyingSubstantialUsOwners = 'PassiveNffeIdentifyingSubstantialUsOwners',
    PassiveNffeWithNoSubstantialUsOwners = 'PassiveNffeWithNoSubstantialUsOwners',
    PubliclyTradedNffeOrAffiliate = 'PubliclyTradedNffeOrAffiliate',
    ActiveNffe = 'ActiveNffe',
    Individual = 'Individual',
    Section501CEntities = 'Section501CEntities',
    ExceptedTerritoryNffe = 'ExceptedTerritoryNffe',
    ExceptedNffeOther = 'ExceptedNffeOther',
    ExemptBeneficialOwner = 'ExemptBeneficialOwner',
    EntityWhollyOwnedByExemptBeneficialOwners = 'EntityWhollyOwnedByExemptBeneficialOwners',
    UnknownRecipient = 'UnknownRecipient',
    RecalcitrantAccountHolder = 'RecalcitrantAccountHolder',
    NonreportingIgafii = 'NonreportingIgafii',
    DirectReportingNffe = 'DirectReportingNffe',
    UsReportableAccount = 'UsReportableAccount',
    NonConsentingUsAccount = 'NonConsentingUsAccount',
    SponsoredDirectReportingNffe = 'SponsoredDirectReportingNffe',
    ExceptedInterAffiliateFfi = 'ExceptedInterAffiliateFfi',
    UndocumentedPreexistingObligation = 'UndocumentedPreexistingObligation',
    UsBranchEciPresumptionApplied = 'UsBranchEciPresumptionApplied',
    AccountHolderOfExcludedFinancialAccount = 'AccountHolderOfExcludedFinancialAccount',
    PassiveNffeReportedByFfi = 'PassiveNffeReportedByFfi',
    NffeSubjectTo1472Withholding = 'NffeSubjectTo1472Withholding',
    RecalcitrantPoolNoUsIndicia = 'RecalcitrantPoolNoUsIndicia',
    RecalcitrantPoolUsIndicia = 'RecalcitrantPoolUsIndicia',
    RecalcitrantPoolDormantAccount = 'RecalcitrantPoolDormantAccount',
    RecalcitrantPoolUsPersons = 'RecalcitrantPoolUsPersons',
    RecalcitrantPoolPassiveNffEs = 'RecalcitrantPoolPassiveNffEs',
    NonparticipatingFfiPool = 'NonparticipatingFfiPool',
    UsPayeesPool = 'UsPayeesPool',
    QiRecalcitrantPoolGeneral = 'QiRecalcitrantPoolGeneral',
    UsWithholdingAgentForeignBranchOfFi = 'UsWithholdingAgentForeignBranchOfFi'
}/**
* @export
* @enum {string}
*/
export enum Form1042SListItemTinTypeEnum {
    Ein = 'EIN',
    Ssn = 'SSN',
    Itin = 'ITIN',
    Atin = 'ATIN'
}

/**
 * Check if a given object implements the Form1042SListItem interface.
 */
export function instanceOfForm1042SListItem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "countryCode" in value;

    return isInstance;
}

export function Form1042SListItemFromJSON(json: any): Form1042SListItem {
    return Form1042SListItemFromJSONTyped(json, false);
}

export function Form1042SListItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1042SListItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uniqueFormId': !exists(json, 'uniqueFormId') ? undefined : json['uniqueFormId'],
        'noTin': !exists(json, 'noTin') ? undefined : json['noTin'],
        'recipientDateOfBirth': !exists(json, 'recipientDateOfBirth') ? undefined : (json['recipientDateOfBirth'] === null ? null : new Date(json['recipientDateOfBirth'])),
        'recipientGiin': !exists(json, 'recipientGiin') ? undefined : json['recipientGiin'],
        'recipientForeignTin': !exists(json, 'recipientForeignTin') ? undefined : json['recipientForeignTin'],
        'lobCode': !exists(json, 'lobCode') ? undefined : json['lobCode'],
        'incomeCode': !exists(json, 'incomeCode') ? undefined : json['incomeCode'],
        'grossIncome': !exists(json, 'grossIncome') ? undefined : json['grossIncome'],
        'withholdingIndicator': !exists(json, 'withholdingIndicator') ? undefined : json['withholdingIndicator'],
        'taxCountryCode': !exists(json, 'taxCountryCode') ? undefined : json['taxCountryCode'],
        'exemptionCodeChap3': !exists(json, 'exemptionCodeChap3') ? undefined : json['exemptionCodeChap3'],
        'exemptionCodeChap4': !exists(json, 'exemptionCodeChap4') ? undefined : json['exemptionCodeChap4'],
        'taxRateChap3': !exists(json, 'taxRateChap3') ? undefined : json['taxRateChap3'],
        'withholdingAllowance': !exists(json, 'withholdingAllowance') ? undefined : json['withholdingAllowance'],
        'federalTaxWithheld': !exists(json, 'federalTaxWithheld') ? undefined : json['federalTaxWithheld'],
        'taxNotDepositedIndicator': !exists(json, 'taxNotDepositedIndicator') ? undefined : json['taxNotDepositedIndicator'],
        'academicIndicator': !exists(json, 'academicIndicator') ? undefined : json['academicIndicator'],
        'taxWithheldOtherAgents': !exists(json, 'taxWithheldOtherAgents') ? undefined : json['taxWithheldOtherAgents'],
        'amountRepaid': !exists(json, 'amountRepaid') ? undefined : json['amountRepaid'],
        'taxPaidAgent': !exists(json, 'taxPaidAgent') ? undefined : json['taxPaidAgent'],
        'chap3StatusCode': !exists(json, 'chap3StatusCode') ? undefined : json['chap3StatusCode'],
        'chap4StatusCode': !exists(json, 'chap4StatusCode') ? undefined : json['chap4StatusCode'],
        'primaryWithholdingAgent': !exists(json, 'primaryWithholdingAgent') ? undefined : PrimaryWithholdingAgentFromJSON(json['primaryWithholdingAgent']),
        'intermediaryOrFlowThrough': !exists(json, 'intermediaryOrFlowThrough') ? undefined : IntermediaryOrFlowThroughFromJSON(json['intermediaryOrFlowThrough']),
        'issuerId': !exists(json, 'issuerId') ? undefined : json['issuerId'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'recipientTin': !exists(json, 'recipientTin') ? undefined : json['recipientTin'],
        'recipientName': !exists(json, 'recipientName') ? undefined : json['recipientName'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'address': json['address'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'nonUsProvince': !exists(json, 'nonUsProvince') ? undefined : json['nonUsProvince'],
        'countryCode': json['countryCode'],
        'federalEFile': !exists(json, 'federalEFile') ? undefined : json['federalEFile'],
        'postalMail': !exists(json, 'postalMail') ? undefined : json['postalMail'],
        'stateEFile': !exists(json, 'stateEFile') ? undefined : json['stateEFile'],
        'tinMatch': !exists(json, 'tinMatch') ? undefined : json['tinMatch'],
        'secondTinNotice': !exists(json, 'secondTinNotice') ? undefined : json['secondTinNotice'],
        'addressVerification': !exists(json, 'addressVerification') ? undefined : json['addressVerification'],
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingRequestFromJSON(json['stateAndLocalWithholding']),
    };
}

export function Form1042SListItemToJSON(value?: Form1042SListItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uniqueFormId': value.uniqueFormId,
        'noTin': value.noTin,
        'recipientDateOfBirth': value.recipientDateOfBirth === undefined ? undefined : (value.recipientDateOfBirth === null ? null : value.recipientDateOfBirth.toISOString()),
        'recipientGiin': value.recipientGiin,
        'recipientForeignTin': value.recipientForeignTin,
        'lobCode': value.lobCode,
        'incomeCode': value.incomeCode,
        'grossIncome': value.grossIncome,
        'withholdingIndicator': value.withholdingIndicator,
        'taxCountryCode': value.taxCountryCode,
        'exemptionCodeChap3': value.exemptionCodeChap3,
        'exemptionCodeChap4': value.exemptionCodeChap4,
        'taxRateChap3': value.taxRateChap3,
        'withholdingAllowance': value.withholdingAllowance,
        'federalTaxWithheld': value.federalTaxWithheld,
        'taxNotDepositedIndicator': value.taxNotDepositedIndicator,
        'academicIndicator': value.academicIndicator,
        'taxWithheldOtherAgents': value.taxWithheldOtherAgents,
        'amountRepaid': value.amountRepaid,
        'taxPaidAgent': value.taxPaidAgent,
        'chap3StatusCode': value.chap3StatusCode,
        'chap4StatusCode': value.chap4StatusCode,
        'primaryWithholdingAgent': PrimaryWithholdingAgentToJSON(value.primaryWithholdingAgent),
        'intermediaryOrFlowThrough': IntermediaryOrFlowThroughToJSON(value.intermediaryOrFlowThrough),
        'issuerId': value.issuerId,
        'referenceId': value.referenceId,
        'recipientTin': value.recipientTin,
        'recipientName': value.recipientName,
        'tinType': value.tinType,
        'recipientSecondName': value.recipientSecondName,
        'address': value.address,
        'address2': value.address2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'email': value.email,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'nonUsProvince': value.nonUsProvince,
        'countryCode': value.countryCode,
        'federalEFile': value.federalEFile,
        'postalMail': value.postalMail,
        'stateEFile': value.stateEFile,
        'tinMatch': value.tinMatch,
        'secondTinNotice': value.secondTinNotice,
        'addressVerification': value.addressVerification,
        'stateAndLocalWithholding': StateAndLocalWithholdingRequestToJSON(value.stateAndLocalWithholding),
    };
}
