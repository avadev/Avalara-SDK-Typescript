/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    StateAndLocalWithholdingResponse,
    StateAndLocalWithholdingResponseFromJSON,
    StateAndLocalWithholdingResponseFromJSONTyped,
    StateAndLocalWithholdingResponseToJSON,
} from './StateAndLocalWithholdingResponse';
import {
    StateEfileStatusDetailResponse,
    StateEfileStatusDetailResponseFromJSON,
    StateEfileStatusDetailResponseFromJSONTyped,
    StateEfileStatusDetailResponseToJSON,
} from './StateEfileStatusDetailResponse';
import {
    StatusDetail,
    StatusDetailFromJSON,
    StatusDetailFromJSONTyped,
    StatusDetailToJSON,
} from './StatusDetail';
import {
    ValidationErrorResponse,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseFromJSONTyped,
    ValidationErrorResponseToJSON,
} from './ValidationErrorResponse';

/**
 * 
 * @export
 * @interface Form1099MiscResponse
 */
export interface Form1099MiscResponse {
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    rents?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    royalties?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    otherIncome?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    fedIncomeTaxWithheld?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    fishingBoatProceeds?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    medicalAndHealthCarePayments?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscResponse
     */
    directSalesIndicator?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    substitutePayments?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    cropInsuranceProceeds?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    grossProceedsPaidToAttorney?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    fishPurchasedForResale?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    section409ADeferrals?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscResponse
     */
    fatcaFilingRequirement?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    excessGoldenParachutePayments?: number;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    nonqualifiedDeferredCompensation?: number;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    readonly type?: Form1099MiscResponseTypeEnum;
    /**
     * 
     * @type {Date}
     * @memberof Form1099MiscResponse
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Form1099MiscResponse
     */
    updatedAt?: Date;
    /**
     * 
     * @type {StateAndLocalWithholdingResponse}
     * @memberof Form1099MiscResponse
     */
    stateAndLocalWithholding?: StateAndLocalWithholdingResponse;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    tinType?: Form1099MiscResponseTinTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    issuerId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    issuerReferenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    issuerTin?: string;
    /**
     * 
     * @type {number}
     * @memberof Form1099MiscResponse
     */
    taxYear?: number;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    referenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    recipientName?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    recipientTin?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    recipientSecondName?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    address2?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    zip?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    accountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    officeCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    nonUsProvince?: string;
    /**
     * 
     * @type {string}
     * @memberof Form1099MiscResponse
     */
    countryCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscResponse
     */
    federalEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscResponse
     */
    postalMail?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscResponse
     */
    stateEFile?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscResponse
     */
    tinMatch?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscResponse
     */
    noTin?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscResponse
     */
    secondTinNotice?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Form1099MiscResponse
     */
    addressVerification?: boolean;
    /**
     * 
     * @type {StatusDetail}
     * @memberof Form1099MiscResponse
     */
    federalEfileStatus?: StatusDetail | null;
    /**
     * 
     * @type {StatusDetail}
     * @memberof Form1099MiscResponse
     */
    eDeliveryStatus?: StatusDetail | null;
    /**
     * 
     * @type {Array<StateEfileStatusDetailResponse>}
     * @memberof Form1099MiscResponse
     */
    stateEfileStatus?: Array<StateEfileStatusDetailResponse> | null;
    /**
     * 
     * @type {StatusDetail}
     * @memberof Form1099MiscResponse
     */
    postalMailStatus?: StatusDetail | null;
    /**
     * 
     * @type {StatusDetail}
     * @memberof Form1099MiscResponse
     */
    tinMatchStatus?: StatusDetail | null;
    /**
     * 
     * @type {StatusDetail}
     * @memberof Form1099MiscResponse
     */
    addressVerificationStatus?: StatusDetail | null;
    /**
     * 
     * @type {Array<ValidationErrorResponse>}
     * @memberof Form1099MiscResponse
     */
    validationErrors?: Array<ValidationErrorResponse> | null;
}

/**
* @export
* @enum {string}
*/
export enum Form1099MiscResponseTypeEnum {
    _1099Nec = '1099-NEC',
    _1099Misc = '1099-MISC',
    _1099Div = '1099-DIV',
    _1099R = '1099-R',
    _1099K = '1099-K',
    _1095B = '1095-B',
    _1042S = '1042-S',
    _1095C = '1095-C'
}/**
* @export
* @enum {string}
*/
export enum Form1099MiscResponseTinTypeEnum {
    Ein = 'EIN',
    Ssn = 'SSN',
    Itin = 'ITIN',
    Atin = 'ATIN'
}

/**
 * Check if a given object implements the Form1099MiscResponse interface.
 */
export function instanceOfForm1099MiscResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function Form1099MiscResponseFromJSON(json: any): Form1099MiscResponse {
    return Form1099MiscResponseFromJSONTyped(json, false);
}

export function Form1099MiscResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1099MiscResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rents': !exists(json, 'rents') ? undefined : json['rents'],
        'royalties': !exists(json, 'royalties') ? undefined : json['royalties'],
        'otherIncome': !exists(json, 'otherIncome') ? undefined : json['otherIncome'],
        'fedIncomeTaxWithheld': !exists(json, 'fedIncomeTaxWithheld') ? undefined : json['fedIncomeTaxWithheld'],
        'fishingBoatProceeds': !exists(json, 'fishingBoatProceeds') ? undefined : json['fishingBoatProceeds'],
        'medicalAndHealthCarePayments': !exists(json, 'medicalAndHealthCarePayments') ? undefined : json['medicalAndHealthCarePayments'],
        'directSalesIndicator': !exists(json, 'directSalesIndicator') ? undefined : json['directSalesIndicator'],
        'substitutePayments': !exists(json, 'substitutePayments') ? undefined : json['substitutePayments'],
        'cropInsuranceProceeds': !exists(json, 'cropInsuranceProceeds') ? undefined : json['cropInsuranceProceeds'],
        'grossProceedsPaidToAttorney': !exists(json, 'grossProceedsPaidToAttorney') ? undefined : json['grossProceedsPaidToAttorney'],
        'fishPurchasedForResale': !exists(json, 'fishPurchasedForResale') ? undefined : json['fishPurchasedForResale'],
        'section409ADeferrals': !exists(json, 'section409ADeferrals') ? undefined : json['section409ADeferrals'],
        'fatcaFilingRequirement': !exists(json, 'fatcaFilingRequirement') ? undefined : json['fatcaFilingRequirement'],
        'excessGoldenParachutePayments': !exists(json, 'excessGoldenParachutePayments') ? undefined : json['excessGoldenParachutePayments'],
        'nonqualifiedDeferredCompensation': !exists(json, 'nonqualifiedDeferredCompensation') ? undefined : json['nonqualifiedDeferredCompensation'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingResponseFromJSON(json['stateAndLocalWithholding']),
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'issuerId': !exists(json, 'issuerId') ? undefined : json['issuerId'],
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'recipientName': !exists(json, 'recipientName') ? undefined : json['recipientName'],
        'recipientTin': !exists(json, 'recipientTin') ? undefined : json['recipientTin'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'nonUsProvince': !exists(json, 'nonUsProvince') ? undefined : json['nonUsProvince'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'federalEFile': !exists(json, 'federalEFile') ? undefined : json['federalEFile'],
        'postalMail': !exists(json, 'postalMail') ? undefined : json['postalMail'],
        'stateEFile': !exists(json, 'stateEFile') ? undefined : json['stateEFile'],
        'tinMatch': !exists(json, 'tinMatch') ? undefined : json['tinMatch'],
        'noTin': !exists(json, 'noTin') ? undefined : json['noTin'],
        'secondTinNotice': !exists(json, 'secondTinNotice') ? undefined : json['secondTinNotice'],
        'addressVerification': !exists(json, 'addressVerification') ? undefined : json['addressVerification'],
        'federalEfileStatus': !exists(json, 'federalEfileStatus') ? undefined : StatusDetailFromJSON(json['federalEfileStatus']),
        'eDeliveryStatus': !exists(json, 'eDeliveryStatus') ? undefined : StatusDetailFromJSON(json['eDeliveryStatus']),
        'stateEfileStatus': !exists(json, 'stateEfileStatus') ? undefined : (json['stateEfileStatus'] === null ? null : (json['stateEfileStatus'] as Array<any>)?.map(StateEfileStatusDetailResponseFromJSON)),
        'postalMailStatus': !exists(json, 'postalMailStatus') ? undefined : StatusDetailFromJSON(json['postalMailStatus']),
        'tinMatchStatus': !exists(json, 'tinMatchStatus') ? undefined : StatusDetailFromJSON(json['tinMatchStatus']),
        'addressVerificationStatus': !exists(json, 'addressVerificationStatus') ? undefined : StatusDetailFromJSON(json['addressVerificationStatus']),
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>)?.map(ValidationErrorResponseFromJSON)),
    };
}

export function Form1099MiscResponseToJSON(value?: Form1099MiscResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rents': value.rents,
        'royalties': value.royalties,
        'otherIncome': value.otherIncome,
        'fedIncomeTaxWithheld': value.fedIncomeTaxWithheld,
        'fishingBoatProceeds': value.fishingBoatProceeds,
        'medicalAndHealthCarePayments': value.medicalAndHealthCarePayments,
        'directSalesIndicator': value.directSalesIndicator,
        'substitutePayments': value.substitutePayments,
        'cropInsuranceProceeds': value.cropInsuranceProceeds,
        'grossProceedsPaidToAttorney': value.grossProceedsPaidToAttorney,
        'fishPurchasedForResale': value.fishPurchasedForResale,
        'section409ADeferrals': value.section409ADeferrals,
        'fatcaFilingRequirement': value.fatcaFilingRequirement,
        'excessGoldenParachutePayments': value.excessGoldenParachutePayments,
        'nonqualifiedDeferredCompensation': value.nonqualifiedDeferredCompensation,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'stateAndLocalWithholding': StateAndLocalWithholdingResponseToJSON(value.stateAndLocalWithholding),
        'tinType': value.tinType,
        'id': value.id,
        'issuerId': value.issuerId,
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'referenceId': value.referenceId,
        'recipientName': value.recipientName,
        'recipientTin': value.recipientTin,
        'recipientSecondName': value.recipientSecondName,
        'address': value.address,
        'address2': value.address2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'email': value.email,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'nonUsProvince': value.nonUsProvince,
        'countryCode': value.countryCode,
        'federalEFile': value.federalEFile,
        'postalMail': value.postalMail,
        'stateEFile': value.stateEFile,
        'tinMatch': value.tinMatch,
        'noTin': value.noTin,
        'secondTinNotice': value.secondTinNotice,
        'addressVerification': value.addressVerification,
        'federalEfileStatus': StatusDetailToJSON(value.federalEfileStatus),
        'eDeliveryStatus': StatusDetailToJSON(value.eDeliveryStatus),
        'stateEfileStatus': value.stateEfileStatus === undefined ? undefined : (value.stateEfileStatus === null ? null : (value.stateEfileStatus as Array<any>)?.map(StateEfileStatusDetailResponseToJSON)),
        'postalMailStatus': StatusDetailToJSON(value.postalMailStatus),
        'tinMatchStatus': StatusDetailToJSON(value.tinMatchStatus),
        'addressVerificationStatus': StatusDetailToJSON(value.addressVerificationStatus),
        'validationErrors': value.validationErrors === undefined ? undefined : (value.validationErrors === null ? null : (value.validationErrors as Array<any>)?.map(ValidationErrorResponseToJSON)),
    };
}
