/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Generate a **license key** from: *[Avalara Portal](https://www.avalara.com/us/en/signin.html) ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    Form1099StatusDetail,
    Form1099StatusDetailFromJSON,
    Form1099StatusDetailFromJSONTyped,
    Form1099StatusDetailToJSON,
} from './Form1099StatusDetail';
import {
    StateAndLocalWithholding,
    StateAndLocalWithholdingFromJSON,
    StateAndLocalWithholdingFromJSONTyped,
    StateAndLocalWithholdingToJSON,
} from './StateAndLocalWithholding';
import {
    StateEfileStatusDetail,
    StateEfileStatusDetailFromJSON,
    StateEfileStatusDetailFromJSONTyped,
    StateEfileStatusDetailToJSON,
} from './StateEfileStatusDetail';
import {
    ValidationError,
    ValidationErrorFromJSON,
    ValidationErrorFromJSONTyped,
    ValidationErrorToJSON,
} from './ValidationError';

/**
 * Form 1099-K: Payment Card and Third Party Network Transactions
 * @export
 * @interface Form1099K
 */
export interface Form1099K {
    /**
     * Filer type for tax reporting purposes.
     * Available values:
     * - PSE: Payment Settlement Entity
     * - EPF: Electronic Payment Facilitator or other third party
     * @type {string}
     * @memberof Form1099K
     */
    filerType: Form1099KFilerTypeEnum;
    /**
     * Payment type for transaction classification.
     * Available values:
     * - PaymentCard: Payment card transactions
     * - ThirdPartyNetwork: Third party network transactions
     * @type {string}
     * @memberof Form1099K
     */
    paymentType: Form1099KPaymentTypeEnum;
    /**
     * Payment settlement entity name and phone number, if different from Filer's
     * @type {string}
     * @memberof Form1099K
     */
    paymentSettlementEntityNamePhoneNumber?: string | null;
    /**
     * Gross amount of payment card/third party network transactions. This value must equal the total of all monthly payment amounts (January through December).
     * @type {number}
     * @memberof Form1099K
     */
    grossAmountPaymentCard: number | null;
    /**
     * Card not present transactions
     * @type {number}
     * @memberof Form1099K
     */
    cardNotPresentTransactions?: number | null;
    /**
     * Merchant category code (4 numbers)
     * @type {string}
     * @memberof Form1099K
     */
    merchantCategoryCode?: string | null;
    /**
     * Number of payment transactions
     * @type {number}
     * @memberof Form1099K
     */
    paymentTransactionNumber: number | null;
    /**
     * Federal income tax withheld
     * @type {number}
     * @memberof Form1099K
     */
    federalIncomeTaxWithheld?: number | null;
    /**
     * January gross payments
     * @type {number}
     * @memberof Form1099K
     */
    january?: number | null;
    /**
     * February gross payments
     * @type {number}
     * @memberof Form1099K
     */
    february?: number | null;
    /**
     * March gross payments
     * @type {number}
     * @memberof Form1099K
     */
    march?: number | null;
    /**
     * April gross payments
     * @type {number}
     * @memberof Form1099K
     */
    april?: number | null;
    /**
     * May gross payments
     * @type {number}
     * @memberof Form1099K
     */
    may?: number | null;
    /**
     * June gross payments
     * @type {number}
     * @memberof Form1099K
     */
    june?: number | null;
    /**
     * July gross payments
     * @type {number}
     * @memberof Form1099K
     */
    july?: number | null;
    /**
     * August gross payments
     * @type {number}
     * @memberof Form1099K
     */
    august?: number | null;
    /**
     * September gross payments
     * @type {number}
     * @memberof Form1099K
     */
    september?: number | null;
    /**
     * October gross payments
     * @type {number}
     * @memberof Form1099K
     */
    october?: number | null;
    /**
     * November gross payments
     * @type {number}
     * @memberof Form1099K
     */
    november?: number | null;
    /**
     * December gross payments
     * @type {number}
     * @memberof Form1099K
     */
    december?: number | null;
    /**
     * Form type.
     * @type {string}
     * @memberof Form1099K
     */
    type: Form1099KTypeEnum;
    /**
     * Form ID. Unique identifier set when the record is created.
     * @type {string}
     * @memberof Form1099K
     */
    readonly id?: string | null;
    /**
     * Issuer ID - only required when creating forms
     * @type {string}
     * @memberof Form1099K
     */
    issuerId?: string | null;
    /**
     * Issuer Reference ID - only required when creating forms via $bulk-upsert
     * @type {string}
     * @memberof Form1099K
     */
    issuerReferenceId?: string | null;
    /**
     * Issuer TIN - readonly
     * @type {string}
     * @memberof Form1099K
     */
    issuerTin?: string | null;
    /**
     * Tax Year - only required when creating forms via $bulk-upsert
     * @type {number}
     * @memberof Form1099K
     */
    taxYear?: number | null;
    /**
     * Internal reference ID. Never shown to any agency or recipient.
     * @type {string}
     * @memberof Form1099K
     */
    referenceId?: string | null;
    /**
     * Recipient's Federal Tax Identification Number (TIN).
     * @type {string}
     * @memberof Form1099K
     */
    tin?: string | null;
    /**
     * Recipient name
     * @type {string}
     * @memberof Form1099K
     */
    recipientName: string | null;
    /**
     * Tax Identification Number (TIN) type.
     * 
     * Available values:
     * - EIN: Employer Identification Number
     * - SSN: Social Security Number
     * - ITIN: Individual Taxpayer Identification Number
     * - ATIN: Adoption Taxpayer Identification Number
     * @type {string}
     * @memberof Form1099K
     */
    tinType?: Form1099KTinTypeEnum;
    /**
     * Recipient second name
     * @type {string}
     * @memberof Form1099K
     */
    recipientSecondName?: string | null;
    /**
     * Address.
     * @type {string}
     * @memberof Form1099K
     */
    address: string | null;
    /**
     * Address line 2.
     * @type {string}
     * @memberof Form1099K
     */
    address2?: string | null;
    /**
     * City.
     * @type {string}
     * @memberof Form1099K
     */
    city: string | null;
    /**
     * Two-letter US state or Canadian province code (required for US/CA addresses).
     * @type {string}
     * @memberof Form1099K
     */
    state?: string | null;
    /**
     * ZIP/postal code.
     * @type {string}
     * @memberof Form1099K
     */
    zip?: string | null;
    /**
     * Recipient's Contact email address.
     * @type {string}
     * @memberof Form1099K
     */
    email?: string | null;
    /**
     * Account number
     * @type {string}
     * @memberof Form1099K
     */
    accountNumber?: string | null;
    /**
     * Office code
     * @type {string}
     * @memberof Form1099K
     */
    officeCode?: string | null;
    /**
     * Province or region for non-US/CA addresses.
     * @type {string}
     * @memberof Form1099K
     */
    nonUsProvince?: string | null;
    /**
     * Two-letter IRS country code (e.g., 'US', 'CA'), as defined at https://www.irs.gov/e-file-providers/country-codes.
     * @type {string}
     * @memberof Form1099K
     */
    countryCode: string | null;
    /**
     * Date when federal e-filing should be scheduled. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     * @type {Date}
     * @memberof Form1099K
     */
    federalEfileDate?: Date | null;
    /**
     * Boolean indicating that postal mailing to the recipient should be scheduled for this form
     * @type {boolean}
     * @memberof Form1099K
     */
    postalMail?: boolean | null;
    /**
     * Date when state e-filing should be scheduled. Must be on or after federalEfileDate. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     * @type {Date}
     * @memberof Form1099K
     */
    stateEfileDate?: Date | null;
    /**
     * Date when recipient e-delivery should be scheduled. If set between current date and beginning of blackout period, scheduled to that date. If in the past or blackout period, scheduled to next available date. For blackout period information, see https://www.track1099.com/info/IRS_info. Set to null to leave unscheduled.
     * @type {Date}
     * @memberof Form1099K
     */
    recipientEdeliveryDate?: Date | null;
    /**
     * Boolean indicating that TIN Matching should be scheduled for this form
     * @type {boolean}
     * @memberof Form1099K
     */
    tinMatch?: boolean | null;
    /**
     * No TIN indicator
     * @type {boolean}
     * @memberof Form1099K
     */
    noTin?: boolean | null;
    /**
     * Boolean indicating that address verification should be scheduled for this form
     * @type {boolean}
     * @memberof Form1099K
     */
    addressVerification?: boolean | null;
    /**
     * State and local withholding information
     * @type {StateAndLocalWithholding}
     * @memberof Form1099K
     */
    stateAndLocalWithholding?: StateAndLocalWithholding | null;
    /**
     * Second TIN notice
     * @type {boolean}
     * @memberof Form1099K
     */
    secondTinNotice?: boolean | null;
    /**
     * Federal e-file status.
     * Available values:
     * - unscheduled: Form has not been scheduled for federal e-filing
     * - scheduled: Form is scheduled for federal e-filing
     * - airlock: Form is in process of being uploaded to the IRS (forms exist in this state for a very short period and cannot be updated while in this state)
     * - sent: Form has been sent to the IRS
     * - accepted: Form was accepted by the IRS
     * - corrected_scheduled: Correction is scheduled to be sent
     * - corrected_airlock: Correction is in process of being uploaded to the IRS (forms exist in this state for a very short period and cannot be updated while in this state)
     * - corrected: A correction has been sent to the IRS
     * - corrected_accepted: Correction was accepted by the IRS
     * - rejected: Form was rejected by the IRS
     * - corrected_rejected: Correction was rejected by the IRS
     * - held: Form is held and will not be submitted to IRS (used for certain forms submitted only to states)
     * @type {Form1099StatusDetail}
     * @memberof Form1099K
     */
    readonly federalEfileStatus?: Form1099StatusDetail | null;
    /**
     * State e-file status.
     * Available values:
     * - unscheduled: Form has not been scheduled for state e-filing
     * - scheduled: Form is scheduled for state e-filing
     * - airlocked: Form is in process of being uploaded to the state
     * - sent: Form has been sent to the state
     * - rejected: Form was rejected by the state
     * - accepted: Form was accepted by the state
     * - corrected_scheduled: Correction is scheduled to be sent
     * - corrected_airlocked: Correction is in process of being uploaded to the state
     * - corrected_sent: Correction has been sent to the state
     * - corrected_rejected: Correction was rejected by the state
     * - corrected_accepted: Correction was accepted by the state
     * @type {Array<StateEfileStatusDetail>}
     * @memberof Form1099K
     */
    readonly stateEfileStatus?: Array<StateEfileStatusDetail> | null;
    /**
     * Postal mail to recipient status.
     * Available values:
     * - unscheduled: Postal mail has not been scheduled
     * - pending: Postal mail is pending to be sent
     * - sent: Postal mail has been sent
     * - delivered: Postal mail has been delivered
     * @type {Form1099StatusDetail}
     * @memberof Form1099K
     */
    readonly postalMailStatus?: Form1099StatusDetail | null;
    /**
     * TIN Match status.
     * Available values:
     * - none: TIN matching has not been performed
     * - pending: TIN matching request is pending
     * - matched: Name/TIN combination matches IRS records
     * - unknown: TIN is missing, invalid, or request contains errors
     * - rejected: Name/TIN combination does not match IRS records or TIN not currently issued
     * @type {Form1099StatusDetail}
     * @memberof Form1099K
     */
    readonly tinMatchStatus?: Form1099StatusDetail | null;
    /**
     * Address verification status.
     * Available values:
     * - unknown: Address verification has not been checked
     * - pending: Address verification is in progress
     * - failed: Address verification failed
     * - incomplete: Address verification is incomplete
     * - unchanged: User declined address changes
     * - verified: Address has been verified and accepted
     * @type {Form1099StatusDetail}
     * @memberof Form1099K
     */
    readonly addressVerificationStatus?: Form1099StatusDetail | null;
    /**
     * EDelivery status.
     * Available values:
     * - unscheduled: E-delivery has not been scheduled
     * - scheduled: E-delivery is scheduled to be sent
     * - sent: E-delivery has been sent to recipient
     * - bounced: E-delivery bounced back (invalid email)
     * - refused: E-delivery was refused by recipient
     * - bad_verify: E-delivery failed verification
     * - accepted: E-delivery was accepted by recipient
     * - bad_verify_limit: E-delivery failed verification limit reached
     * - second_delivery: Second e-delivery attempt
     * - undelivered: E-delivery is undelivered (temporary state allowing resend)
     * @type {Form1099StatusDetail}
     * @memberof Form1099K
     */
    readonly eDeliveryStatus?: Form1099StatusDetail | null;
    /**
     * Validation errors
     * @type {Array<ValidationError>}
     * @memberof Form1099K
     */
    readonly validationErrors?: Array<ValidationError> | null;
    /**
     * Date time when the record was created.
     * @type {Date}
     * @memberof Form1099K
     */
    readonly createdAt?: Date;
    /**
     * Date time when the record was last updated.
     * @type {Date}
     * @memberof Form1099K
     */
    readonly updatedAt?: Date;
}

/**
* @export
* @enum {string}
*/
export enum Form1099KFilerTypeEnum {
    Pse = 'PSE',
    Epf = 'EPF'
}/**
* @export
* @enum {string}
*/
export enum Form1099KPaymentTypeEnum {
    PaymentCard = 'PaymentCard',
    ThirdPartyNetwork = 'ThirdPartyNetwork'
}/**
* @export
* @enum {string}
*/
export enum Form1099KTypeEnum {
    Form1099Nec = 'Form1099Nec',
    Form1099Misc = 'Form1099Misc',
    Form1099Div = 'Form1099Div',
    Form1099R = 'Form1099R',
    Form1099K = 'Form1099K',
    Form1095B = 'Form1095B',
    Form1042S = 'Form1042S',
    Form1095C = 'Form1095C',
    Form1099Int = 'Form1099Int'
}/**
* @export
* @enum {string}
*/
export enum Form1099KTinTypeEnum {
    Ein = 'EIN',
    Ssn = 'SSN',
    Itin = 'ITIN',
    Atin = 'ATIN'
}

/**
 * Check if a given object implements the Form1099K interface.
 */
export function instanceOfForm1099K(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "filerType" in value;
    isInstance = isInstance && "paymentType" in value;
    isInstance = isInstance && "grossAmountPaymentCard" in value;
    isInstance = isInstance && "paymentTransactionNumber" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "recipientName" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "city" in value;
    isInstance = isInstance && "countryCode" in value;

    return isInstance;
}

export function Form1099KFromJSON(json: any): Form1099K {
    return Form1099KFromJSONTyped(json, false);
}

export function Form1099KFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form1099K {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'filerType': json['filerType'],
        'paymentType': json['paymentType'],
        'paymentSettlementEntityNamePhoneNumber': !exists(json, 'paymentSettlementEntityNamePhoneNumber') ? undefined : json['paymentSettlementEntityNamePhoneNumber'],
        'grossAmountPaymentCard': json['grossAmountPaymentCard'],
        'cardNotPresentTransactions': !exists(json, 'cardNotPresentTransactions') ? undefined : json['cardNotPresentTransactions'],
        'merchantCategoryCode': !exists(json, 'merchantCategoryCode') ? undefined : json['merchantCategoryCode'],
        'paymentTransactionNumber': json['paymentTransactionNumber'],
        'federalIncomeTaxWithheld': !exists(json, 'federalIncomeTaxWithheld') ? undefined : json['federalIncomeTaxWithheld'],
        'january': !exists(json, 'january') ? undefined : json['january'],
        'february': !exists(json, 'february') ? undefined : json['february'],
        'march': !exists(json, 'march') ? undefined : json['march'],
        'april': !exists(json, 'april') ? undefined : json['april'],
        'may': !exists(json, 'may') ? undefined : json['may'],
        'june': !exists(json, 'june') ? undefined : json['june'],
        'july': !exists(json, 'july') ? undefined : json['july'],
        'august': !exists(json, 'august') ? undefined : json['august'],
        'september': !exists(json, 'september') ? undefined : json['september'],
        'october': !exists(json, 'october') ? undefined : json['october'],
        'november': !exists(json, 'november') ? undefined : json['november'],
        'december': !exists(json, 'december') ? undefined : json['december'],
        'type': json['type'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'issuerId': !exists(json, 'issuerId') ? undefined : json['issuerId'],
        'issuerReferenceId': !exists(json, 'issuerReferenceId') ? undefined : json['issuerReferenceId'],
        'issuerTin': !exists(json, 'issuerTin') ? undefined : json['issuerTin'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'recipientName': json['recipientName'],
        'tinType': !exists(json, 'tinType') ? undefined : json['tinType'],
        'recipientSecondName': !exists(json, 'recipientSecondName') ? undefined : json['recipientSecondName'],
        'address': json['address'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'officeCode': !exists(json, 'officeCode') ? undefined : json['officeCode'],
        'nonUsProvince': !exists(json, 'nonUsProvince') ? undefined : json['nonUsProvince'],
        'countryCode': json['countryCode'],
        'federalEfileDate': !exists(json, 'federalEfileDate') ? undefined : (json['federalEfileDate'] === null ? null : new Date(json['federalEfileDate'])),
        'postalMail': !exists(json, 'postalMail') ? undefined : json['postalMail'],
        'stateEfileDate': !exists(json, 'stateEfileDate') ? undefined : (json['stateEfileDate'] === null ? null : new Date(json['stateEfileDate'])),
        'recipientEdeliveryDate': !exists(json, 'recipientEdeliveryDate') ? undefined : (json['recipientEdeliveryDate'] === null ? null : new Date(json['recipientEdeliveryDate'])),
        'tinMatch': !exists(json, 'tinMatch') ? undefined : json['tinMatch'],
        'noTin': !exists(json, 'noTin') ? undefined : json['noTin'],
        'addressVerification': !exists(json, 'addressVerification') ? undefined : json['addressVerification'],
        'stateAndLocalWithholding': !exists(json, 'stateAndLocalWithholding') ? undefined : StateAndLocalWithholdingFromJSON(json['stateAndLocalWithholding']),
        'secondTinNotice': !exists(json, 'secondTinNotice') ? undefined : json['secondTinNotice'],
        'federalEfileStatus': !exists(json, 'federalEfileStatus') ? undefined : Form1099StatusDetailFromJSON(json['federalEfileStatus']),
        'stateEfileStatus': !exists(json, 'stateEfileStatus') ? undefined : (json['stateEfileStatus'] === null ? null : (json['stateEfileStatus'] as Array<any>)?.map(StateEfileStatusDetailFromJSON)),
        'postalMailStatus': !exists(json, 'postalMailStatus') ? undefined : Form1099StatusDetailFromJSON(json['postalMailStatus']),
        'tinMatchStatus': !exists(json, 'tinMatchStatus') ? undefined : Form1099StatusDetailFromJSON(json['tinMatchStatus']),
        'addressVerificationStatus': !exists(json, 'addressVerificationStatus') ? undefined : Form1099StatusDetailFromJSON(json['addressVerificationStatus']),
        'eDeliveryStatus': !exists(json, 'eDeliveryStatus') ? undefined : Form1099StatusDetailFromJSON(json['eDeliveryStatus']),
        'validationErrors': !exists(json, 'validationErrors') ? undefined : (json['validationErrors'] === null ? null : (json['validationErrors'] as Array<any>)?.map(ValidationErrorFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function Form1099KToJSON(value?: Form1099K | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'filerType': value.filerType,
        'paymentType': value.paymentType,
        'paymentSettlementEntityNamePhoneNumber': value.paymentSettlementEntityNamePhoneNumber,
        'grossAmountPaymentCard': value.grossAmountPaymentCard,
        'cardNotPresentTransactions': value.cardNotPresentTransactions,
        'merchantCategoryCode': value.merchantCategoryCode,
        'paymentTransactionNumber': value.paymentTransactionNumber,
        'federalIncomeTaxWithheld': value.federalIncomeTaxWithheld,
        'january': value.january,
        'february': value.february,
        'march': value.march,
        'april': value.april,
        'may': value.may,
        'june': value.june,
        'july': value.july,
        'august': value.august,
        'september': value.september,
        'october': value.october,
        'november': value.november,
        'december': value.december,
        'type': value.type,
        'issuerId': value.issuerId,
        'issuerReferenceId': value.issuerReferenceId,
        'issuerTin': value.issuerTin,
        'taxYear': value.taxYear,
        'referenceId': value.referenceId,
        'tin': value.tin,
        'recipientName': value.recipientName,
        'tinType': value.tinType,
        'recipientSecondName': value.recipientSecondName,
        'address': value.address,
        'address2': value.address2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'email': value.email,
        'accountNumber': value.accountNumber,
        'officeCode': value.officeCode,
        'nonUsProvince': value.nonUsProvince,
        'countryCode': value.countryCode,
        'federalEfileDate': value.federalEfileDate === undefined ? undefined : (value.federalEfileDate === null ? null : value.federalEfileDate.toISOString().substr(0,10)),
        'postalMail': value.postalMail,
        'stateEfileDate': value.stateEfileDate === undefined ? undefined : (value.stateEfileDate === null ? null : value.stateEfileDate.toISOString().substr(0,10)),
        'recipientEdeliveryDate': value.recipientEdeliveryDate === undefined ? undefined : (value.recipientEdeliveryDate === null ? null : value.recipientEdeliveryDate.toISOString().substr(0,10)),
        'tinMatch': value.tinMatch,
        'noTin': value.noTin,
        'addressVerification': value.addressVerification,
        'stateAndLocalWithholding': StateAndLocalWithholdingToJSON(value.stateAndLocalWithholding),
        'secondTinNotice': value.secondTinNotice,
    };
}
