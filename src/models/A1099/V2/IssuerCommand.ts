/* tslint:disable */
/* eslint-disable */
/**
 * Avalara 1099 & W-9 API Definition
 * ## üîê Authentication  Use **username/password** or generate a **license key** from: *Avalara Portal ‚Üí Settings ‚Üí License and API Keys*.  [More on authentication methods](https://developer.avalara.com/avatax-dm-combined-erp/common-setup/authentication/authentication-methods/)  [Test your credentials](https://developer.avalara.com/avatax/test-credentials/)  ## üìò API & SDK Documentation  [Avalara SDK (.NET) on GitHub](https://github.com/avadev/Avalara-SDK-DotNet#avalarasdk--the-unified-c-library-for-next-gen-avalara-services)  [Code Examples ‚Äì 1099 API](https://github.com/avadev/Avalara-SDK-DotNet/blob/main/docs/A1099/V2/Class1099IssuersApi.md#call1099issuersget)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@avalara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * 
 * @export
 * @interface IssuerCommand
 */
export interface IssuerCommand {
    /**
     * Legal name, not DBA
     * @type {string}
     * @memberof IssuerCommand
     */
    name?: string;
    /**
     * Optional DBA name or continuation of a long legal name
     * @type {string}
     * @memberof IssuerCommand
     */
    nameDba?: string | null;
    /**
     * Tax identification number
     * @type {string}
     * @memberof IssuerCommand
     */
    tin?: string | null;
    /**
     * Optional identifier for your reference, never shown to any agency or recipient.
     * We will also prefix download filenames with this value, if present.
     * Can only include letters, numbers, dashes, underscores and spaces.
     * @type {string}
     * @memberof IssuerCommand
     */
    referenceId?: string | null;
    /**
     * Telephone number
     * @type {string}
     * @memberof IssuerCommand
     */
    telephone?: string | null;
    /**
     * Tax year
     * @type {number}
     * @memberof IssuerCommand
     */
    taxYear?: number;
    /**
     * If there is a transfer agent, use the shipping address of the transfer agent.
     * @type {string}
     * @memberof IssuerCommand
     */
    countryCode?: string | null;
    /**
     * Email address
     * @type {string}
     * @memberof IssuerCommand
     */
    email?: string | null;
    /**
     * Address
     * @type {string}
     * @memberof IssuerCommand
     */
    address?: string | null;
    /**
     * City
     * @type {string}
     * @memberof IssuerCommand
     */
    city?: string | null;
    /**
     * State
     * @type {string}
     * @memberof IssuerCommand
     */
    state?: string | null;
    /**
     * Zip code
     * @type {string}
     * @memberof IssuerCommand
     */
    zip?: string | null;
    /**
     * Foreign province
     * @type {string}
     * @memberof IssuerCommand
     */
    foreignProvince?: string | null;
    /**
     * Transfer Agent's Name
     * @type {string}
     * @memberof IssuerCommand
     */
    transferAgentName?: string | null;
    /**
     * Last year of filing for this payer
     * @type {boolean}
     * @memberof IssuerCommand
     */
    lastFiling?: boolean | null;
}



/**
 * Check if a given object implements the IssuerCommand interface.
 */
export function instanceOfIssuerCommand(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IssuerCommandFromJSON(json: any): IssuerCommand {
    return IssuerCommandFromJSONTyped(json, false);
}

export function IssuerCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): IssuerCommand {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nameDba': !exists(json, 'nameDba') ? undefined : json['nameDba'],
        'tin': !exists(json, 'tin') ? undefined : json['tin'],
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'telephone': !exists(json, 'telephone') ? undefined : json['telephone'],
        'taxYear': !exists(json, 'taxYear') ? undefined : json['taxYear'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'foreignProvince': !exists(json, 'foreignProvince') ? undefined : json['foreignProvince'],
        'transferAgentName': !exists(json, 'transferAgentName') ? undefined : json['transferAgentName'],
        'lastFiling': !exists(json, 'lastFiling') ? undefined : json['lastFiling'],
    };
}

export function IssuerCommandToJSON(value?: IssuerCommand | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'nameDba': value.nameDba,
        'tin': value.tin,
        'referenceId': value.referenceId,
        'telephone': value.telephone,
        'taxYear': value.taxYear,
        'countryCode': value.countryCode,
        'email': value.email,
        'address': value.address,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'foreignProvince': value.foreignProvince,
        'transferAgentName': value.transferAgentName,
        'lastFiling': value.lastFiling,
    };
}
