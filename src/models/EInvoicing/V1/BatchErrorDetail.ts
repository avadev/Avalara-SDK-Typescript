/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    ValidationError,
    ValidationErrorFromJSON,
    ValidationErrorFromJSONTyped,
    ValidationErrorToJSON,
} from './ValidationError';

/**
 * Represents detailed error information for an individual entry in a batch request. Includes the index of the failed item and associated validation errors.
 * @export
 * @interface BatchErrorDetail
 */
export interface BatchErrorDetail {
    /**
     * The index of the request that caused the error in the batch.
     * @type {number}
     * @memberof BatchErrorDetail
     */
    index?: number;
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof BatchErrorDetail
     */
    validationErrors?: Array<ValidationError>;
}



/**
 * Check if a given object implements the BatchErrorDetail interface.
 */
export function instanceOfBatchErrorDetail(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BatchErrorDetailFromJSON(json: any): BatchErrorDetail {
    return BatchErrorDetailFromJSONTyped(json, false);
}

export function BatchErrorDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): BatchErrorDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'index': !exists(json, 'index') ? undefined : json['index'],
        'validationErrors': !exists(json, 'validationErrors') ? undefined : ((json['validationErrors'] as Array<any>)?.map(ValidationErrorFromJSON)),
    };
}

export function BatchErrorDetailToJSON(value?: BatchErrorDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'index': value.index,
        'validationErrors': value.validationErrors === undefined ? undefined : ((value.validationErrors as Array<any>)?.map(ValidationErrorToJSON)),
    };
}
