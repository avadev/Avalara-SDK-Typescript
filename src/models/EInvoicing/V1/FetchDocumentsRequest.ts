/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    FetchDocumentsRequestDataInner,
    FetchDocumentsRequestDataInnerFromJSON,
    FetchDocumentsRequestDataInnerFromJSONTyped,
    FetchDocumentsRequestDataInnerToJSON,
} from './FetchDocumentsRequestDataInner';
import {
    FetchDocumentsRequestMetadata,
    FetchDocumentsRequestMetadataFromJSON,
    FetchDocumentsRequestMetadataFromJSONTyped,
    FetchDocumentsRequestMetadataToJSON,
} from './FetchDocumentsRequestMetadata';

/**
 * 
 * @export
 * @interface FetchDocumentsRequest
 */
export interface FetchDocumentsRequest {
    /**
     * Array of key-value pairs used to retrieve inbound documents from the Tax Authority
     * @type {Array<FetchDocumentsRequestDataInner>}
     * @memberof FetchDocumentsRequest
     */
    data?: Array<FetchDocumentsRequestDataInner>;
    /**
     * 
     * @type {FetchDocumentsRequestMetadata}
     * @memberof FetchDocumentsRequest
     */
    metadata?: FetchDocumentsRequestMetadata;
}



/**
 * Check if a given object implements the FetchDocumentsRequest interface.
 */
export function instanceOfFetchDocumentsRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FetchDocumentsRequestFromJSON(json: any): FetchDocumentsRequest {
    return FetchDocumentsRequestFromJSONTyped(json, false);
}

export function FetchDocumentsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): FetchDocumentsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(FetchDocumentsRequestDataInnerFromJSON)),
        'metadata': !exists(json, 'metadata') ? undefined : FetchDocumentsRequestMetadataFromJSON(json['metadata']),
    };
}

export function FetchDocumentsRequestToJSON(value?: FetchDocumentsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(FetchDocumentsRequestDataInnerToJSON)),
        'metadata': FetchDocumentsRequestMetadataToJSON(value.metadata),
    };
}
