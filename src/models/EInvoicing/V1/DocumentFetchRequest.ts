/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    DocumentFetchRequestDataInner,
    DocumentFetchRequestDataInnerFromJSON,
    DocumentFetchRequestDataInnerFromJSONTyped,
    DocumentFetchRequestDataInnerToJSON,
} from './DocumentFetchRequestDataInner';
import {
    DocumentFetchRequestMetadata,
    DocumentFetchRequestMetadataFromJSON,
    DocumentFetchRequestMetadataFromJSONTyped,
    DocumentFetchRequestMetadataToJSON,
} from './DocumentFetchRequestMetadata';

/**
 * 
 * @export
 * @interface DocumentFetchRequest
 */
export interface DocumentFetchRequest {
    /**
     * Array of key-value pairs used to retrieve inbound documents from the Tax Authority
     * @type {Array<DocumentFetchRequestDataInner>}
     * @memberof DocumentFetchRequest
     */
    data?: Array<DocumentFetchRequestDataInner>;
    /**
     * 
     * @type {DocumentFetchRequestMetadata}
     * @memberof DocumentFetchRequest
     */
    metadata?: DocumentFetchRequestMetadata;
}



/**
 * Check if a given object implements the DocumentFetchRequest interface.
 */
export function instanceOfDocumentFetchRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DocumentFetchRequestFromJSON(json: any): DocumentFetchRequest {
    return DocumentFetchRequestFromJSONTyped(json, false);
}

export function DocumentFetchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentFetchRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(DocumentFetchRequestDataInnerFromJSON)),
        'metadata': !exists(json, 'metadata') ? undefined : DocumentFetchRequestMetadataFromJSON(json['metadata']),
    };
}

export function DocumentFetchRequestToJSON(value?: DocumentFetchRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(DocumentFetchRequestDataInnerToJSON)),
        'metadata': DocumentFetchRequestMetadataToJSON(value.metadata),
    };
}
