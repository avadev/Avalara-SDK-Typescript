/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    EventSubscription,
    EventSubscriptionFromJSON,
    EventSubscriptionFromJSONTyped,
    EventSubscriptionToJSON,
} from './EventSubscription';
import {
    SignatureSignature,
    SignatureSignatureFromJSON,
    SignatureSignatureFromJSONTyped,
    SignatureSignatureToJSON,
} from './SignatureSignature';

/**
 * 
 * @export
 * @interface SubscriptionDetail
 */
export interface SubscriptionDetail {
    /**
     * Unique identifier of this specific resource.
     * @type {string}
     * @memberof SubscriptionDetail
     */
    id: string;
    /**
     * Description of the subscription
     * @type {string}
     * @memberof SubscriptionDetail
     */
    description?: string;
    /**
     * The URL of the webhook endpoint to which event messages will be delivered
     * @type {string}
     * @memberof SubscriptionDetail
     */
    notificationUrl: string;
    /**
     * 
     * @type {SignatureSignature}
     * @memberof SubscriptionDetail
     */
    signature: SignatureSignature;
    /**
     * 
     * @type {Array<EventSubscription>}
     * @memberof SubscriptionDetail
     */
    events: Array<EventSubscription>;
}



/**
 * Check if a given object implements the SubscriptionDetail interface.
 */
export function instanceOfSubscriptionDetail(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "notificationUrl" in value;
    isInstance = isInstance && "signature" in value;
    isInstance = isInstance && "events" in value;

    return isInstance;
}

export function SubscriptionDetailFromJSON(json: any): SubscriptionDetail {
    return SubscriptionDetailFromJSONTyped(json, false);
}

export function SubscriptionDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubscriptionDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'notificationUrl': json['notificationUrl'],
        'signature': SignatureSignatureFromJSON(json['signature']),
        'events': ((json['events'] as Array<any>)?.map(EventSubscriptionFromJSON)),
    };
}

export function SubscriptionDetailToJSON(value?: SubscriptionDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'description': value.description,
        'notificationUrl': value.notificationUrl,
        'signature': SignatureSignatureToJSON(value.signature),
        'events': ((value.events as Array<any>)?.map(EventSubscriptionToJSON)),
    };
}
