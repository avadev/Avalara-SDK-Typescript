/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    InputDataFormats,
    InputDataFormatsFromJSON,
    InputDataFormatsFromJSONTyped,
    InputDataFormatsToJSON,
} from './InputDataFormats';
import {
    OutputDataFormats,
    OutputDataFormatsFromJSON,
    OutputDataFormatsFromJSONTyped,
    OutputDataFormatsToJSON,
} from './OutputDataFormats';
import {
    WorkflowIds,
    WorkflowIdsFromJSON,
    WorkflowIdsFromJSONTyped,
    WorkflowIdsToJSON,
} from './WorkflowIds';

/**
 * An object representing the country mandate
 * @export
 * @interface Mandate
 */
export interface Mandate {
    /**
     * The `mandateId` is comprised of the country code, mandate type, and the network or regulation type (for example, AU-B2G-PEPPOL). Keep in mind the following when specifying a `mandateId`.
     * - A country can have multiple mandate types (B2C, B2B, B2G).
     * - A entity/company can opt in for multiple mandates.
     * - A `mandateId` is the combination of country + mandate type + network/regulation.
     * @type {string}
     * @memberof Mandate
     */
    mandateId?: string;
    /**
     * **[LEGACY]** This field is retained for backward compatibility. It is recommended to use `mandateId` instead.
     * The `countryMandate` similar to the `mandateId` is comprised of the country code, mandate type, and the network or regulation type (for example, AU-B2G-PEPPOL). 
     * @type {string}
     * @memberof Mandate
     */
    countryMandate?: string;
    /**
     * Country code
     * @type {string}
     * @memberof Mandate
     */
    countryCode?: string;
    /**
     * Mandate description
     * @type {string}
     * @memberof Mandate
     */
    description?: string;
    /**
     * Indicates whether this mandate supported by the ELR API
     * @type {boolean}
     * @memberof Mandate
     */
    supportedByELRAPI?: boolean;
    /**
     * Mandate format
     * @type {string}
     * @memberof Mandate
     */
    mandateFormat?: string;
    /**
     * The type of e-invoicing flow for this mandate
     * @type {string}
     * @memberof Mandate
     */
    eInvoicingFlow?: string;
    /**
     * Link to the documentation for this mandate's e-invoicing flow
     * @type {string}
     * @memberof Mandate
     */
    eInvoicingFlowDocumentationLink?: string;
    /**
     * List of available media types for downloading invoices for this mandate
     * @type {Array<string>}
     * @memberof Mandate
     */
    getInvoiceAvailableMediaType?: Array<string>;
    /**
     * Indicates whether this mandate supports inbound digital documents
     * @type {string}
     * @memberof Mandate
     */
    supportsInboundDigitalDocument?: string;
    /**
     * Format and version used when inputting the data
     * @type {Array<InputDataFormats>}
     * @memberof Mandate
     */
    inputDataFormats?: Array<InputDataFormats>;
    /**
     * Lists the supported output document formats for the country mandate. For countries where specifying an output document format is required (e.g., France), this array will contain the applicable formats. For other countries where output format selection is not necessary, the array will be empty.
     * @type {Array<OutputDataFormats>}
     * @memberof Mandate
     */
    outputDataFormats?: Array<OutputDataFormats>;
    /**
     * Workflow ID list
     * @type {Array<WorkflowIds>}
     * @memberof Mandate
     */
    workflowIds?: Array<WorkflowIds>;
}



/**
 * Check if a given object implements the Mandate interface.
 */
export function instanceOfMandate(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MandateFromJSON(json: any): Mandate {
    return MandateFromJSONTyped(json, false);
}

export function MandateFromJSONTyped(json: any, ignoreDiscriminator: boolean): Mandate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mandateId': !exists(json, 'mandateId') ? undefined : json['mandateId'],
        'countryMandate': !exists(json, 'countryMandate') ? undefined : json['countryMandate'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'supportedByELRAPI': !exists(json, 'supportedByELRAPI') ? undefined : json['supportedByELRAPI'],
        'mandateFormat': !exists(json, 'mandateFormat') ? undefined : json['mandateFormat'],
        'eInvoicingFlow': !exists(json, 'eInvoicingFlow') ? undefined : json['eInvoicingFlow'],
        'eInvoicingFlowDocumentationLink': !exists(json, 'eInvoicingFlowDocumentationLink') ? undefined : json['eInvoicingFlowDocumentationLink'],
        'getInvoiceAvailableMediaType': !exists(json, 'getInvoiceAvailableMediaType') ? undefined : json['getInvoiceAvailableMediaType'],
        'supportsInboundDigitalDocument': !exists(json, 'supportsInboundDigitalDocument') ? undefined : json['supportsInboundDigitalDocument'],
        'inputDataFormats': !exists(json, 'inputDataFormats') ? undefined : ((json['inputDataFormats'] as Array<any>)?.map(InputDataFormatsFromJSON)),
        'outputDataFormats': !exists(json, 'outputDataFormats') ? undefined : ((json['outputDataFormats'] as Array<any>)?.map(OutputDataFormatsFromJSON)),
        'workflowIds': !exists(json, 'workflowIds') ? undefined : ((json['workflowIds'] as Array<any>)?.map(WorkflowIdsFromJSON)),
    };
}

export function MandateToJSON(value?: Mandate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mandateId': value.mandateId,
        'countryMandate': value.countryMandate,
        'countryCode': value.countryCode,
        'description': value.description,
        'supportedByELRAPI': value.supportedByELRAPI,
        'mandateFormat': value.mandateFormat,
        'eInvoicingFlow': value.eInvoicingFlow,
        'eInvoicingFlowDocumentationLink': value.eInvoicingFlowDocumentationLink,
        'getInvoiceAvailableMediaType': value.getInvoiceAvailableMediaType,
        'supportsInboundDigitalDocument': value.supportsInboundDigitalDocument,
        'inputDataFormats': value.inputDataFormats === undefined ? undefined : ((value.inputDataFormats as Array<any>)?.map(InputDataFormatsToJSON)),
        'outputDataFormats': value.outputDataFormats === undefined ? undefined : ((value.outputDataFormats as Array<any>)?.map(OutputDataFormatsToJSON)),
        'workflowIds': value.workflowIds === undefined ? undefined : ((value.workflowIds as Array<any>)?.map(WorkflowIdsToJSON)),
    };
}
