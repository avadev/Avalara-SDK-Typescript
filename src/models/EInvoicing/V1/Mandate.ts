/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    InputDataFormats,
    InputDataFormatsFromJSON,
    InputDataFormatsFromJSONTyped,
    InputDataFormatsToJSON,
} from './InputDataFormats';
import {
    WorkflowIds,
    WorkflowIdsFromJSON,
    WorkflowIdsFromJSONTyped,
    WorkflowIdsToJSON,
} from './WorkflowIds';

/**
 * 
 * @export
 * @interface Mandate
 */
export interface Mandate {
    /**
     * Mandate UUID
     * @type {string}
     * @memberof Mandate
     */
    mandateId?: string;
    /**
     * Country mandate name
     * @type {string}
     * @memberof Mandate
     */
    countryMandate?: string;
    /**
     * Country code
     * @type {string}
     * @memberof Mandate
     */
    countryCode?: string;
    /**
     * Mandate description
     * @type {string}
     * @memberof Mandate
     */
    description?: string;
    /**
     * Indicates whether this mandate supported by the partner API
     * @type {boolean}
     * @memberof Mandate
     */
    supportedByPartnerAPI?: boolean;
    /**
     * Mandate format
     * @type {string}
     * @memberof Mandate
     */
    mandateFormat?: string;
    /**
     * Format and version used when inputting the data
     * @type {Array<InputDataFormats>}
     * @memberof Mandate
     */
    inputDataFormats?: Array<InputDataFormats>;
    /**
     * Workflow ID list
     * @type {Array<WorkflowIds>}
     * @memberof Mandate
     */
    workflowIds?: Array<WorkflowIds>;
}



/**
 * Check if a given object implements the Mandate interface.
 */
export function instanceOfMandate(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MandateFromJSON(json: any): Mandate {
    return MandateFromJSONTyped(json, false);
}

export function MandateFromJSONTyped(json: any, ignoreDiscriminator: boolean): Mandate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mandateId': !exists(json, 'mandateId') ? undefined : json['mandateId'],
        'countryMandate': !exists(json, 'countryMandate') ? undefined : json['countryMandate'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'supportedByPartnerAPI': !exists(json, 'supportedByPartnerAPI') ? undefined : json['supportedByPartnerAPI'],
        'mandateFormat': !exists(json, 'mandateFormat') ? undefined : json['mandateFormat'],
        'inputDataFormats': !exists(json, 'inputDataFormats') ? undefined : ((json['inputDataFormats'] as Array<any>).map(InputDataFormatsFromJSON)),
        'workflowIds': !exists(json, 'workflowIds') ? undefined : ((json['workflowIds'] as Array<any>).map(WorkflowIdsFromJSON)),
    };
}

export function MandateToJSON(value?: Mandate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mandateId': value.mandateId,
        'countryMandate': value.countryMandate,
        'countryCode': value.countryCode,
        'description': value.description,
        'supportedByPartnerAPI': value.supportedByPartnerAPI,
        'mandateFormat': value.mandateFormat,
        'inputDataFormats': value.inputDataFormats === undefined ? undefined : ((value.inputDataFormats as Array<any>).map(InputDataFormatsToJSON)),
        'workflowIds': value.workflowIds === undefined ? undefined : ((value.workflowIds as Array<any>).map(WorkflowIdsToJSON)),
    };
}
