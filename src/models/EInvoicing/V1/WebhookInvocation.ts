/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    EventMessage,
    EventMessageFromJSON,
    EventMessageFromJSONTyped,
    EventMessageToJSON,
} from './EventMessage';

/**
 * 
 * @export
 * @interface WebhookInvocation
 */
export interface WebhookInvocation {
    /**
     * Unique identifier of this specific resource.
     * @type {string}
     * @memberof WebhookInvocation
     */
    id: string;
    /**
     * The number of invocation attempts.
     * @type {number}
     * @memberof WebhookInvocation
     */
    retryCount?: number;
    /**
     * The maximum retries that may be attempted in total.
     * @type {number}
     * @memberof WebhookInvocation
     */
    retryMax?: number;
    /**
     * Initial timestamp of the first invocation attempt.
     * @type {Date}
     * @memberof WebhookInvocation
     */
    invocationTimestamp: Date;
    /**
     * Timestamp of this invocation attempt.
     * @type {Date}
     * @memberof WebhookInvocation
     */
    retryTimestamp?: Date;
    /**
     * Array of events being delivered in the webhook
     * @type {Array<EventMessage>}
     * @memberof WebhookInvocation
     */
    items: Array<EventMessage>;
}



/**
 * Check if a given object implements the WebhookInvocation interface.
 */
export function instanceOfWebhookInvocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "invocationTimestamp" in value;
    isInstance = isInstance && "items" in value;

    return isInstance;
}

export function WebhookInvocationFromJSON(json: any): WebhookInvocation {
    return WebhookInvocationFromJSONTyped(json, false);
}

export function WebhookInvocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookInvocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'retryCount': !exists(json, 'retryCount') ? undefined : json['retryCount'],
        'retryMax': !exists(json, 'retryMax') ? undefined : json['retryMax'],
        'invocationTimestamp': (new Date(json['invocationTimestamp'])),
        'retryTimestamp': !exists(json, 'retryTimestamp') ? undefined : (new Date(json['retryTimestamp'])),
        'items': ((json['items'] as Array<any>)?.map(EventMessageFromJSON)),
    };
}

export function WebhookInvocationToJSON(value?: WebhookInvocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'retryCount': value.retryCount,
        'retryMax': value.retryMax,
        'invocationTimestamp': (value.invocationTimestamp.toISOString()),
        'retryTimestamp': value.retryTimestamp === undefined ? undefined : (value.retryTimestamp.toISOString()),
        'items': ((value.items as Array<any>)?.map(EventMessageToJSON)),
    };
}
