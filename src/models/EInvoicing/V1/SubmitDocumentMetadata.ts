/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
/**
 * Key value pairs of metadata for a document submission. dataFormat can be ubl-invoice or ubl-creditnote:  <br><pre>{  "workflowId": "partner-einvoicing", "dataFormat": "ubl-invoice", "dataFormatVersion": "2.1", "countryCode": "SA", "countryMandate": "SA-Phase1-B2B" }</pre> <br> 
 * @export
 * @interface SubmitDocumentMetadata
 */
export interface SubmitDocumentMetadata {
    /**
     * Specifies a unique ID for this workflow.
     * @type {string}
     * @memberof SubmitDocumentMetadata
     */
    workflowId: string;
    /**
     * Specifies the data format for this workflow.
     * @type {string}
     * @memberof SubmitDocumentMetadata
     */
    dataFormat: string;
    /**
     * Specifies the data format version number.
     * @type {string}
     * @memberof SubmitDocumentMetadata
     */
    dataFormatVersion: string;
    /**
     * The two-letter ISO-3166 country code for the country where the e-invoice is being submitted
     * @type {string}
     * @memberof SubmitDocumentMetadata
     */
    countryCode: string;
    /**
     * The e-invoicing mandate for the specified country.
     * @type {string}
     * @memberof SubmitDocumentMetadata
     */
    countryMandate: string;
}



/**
 * Check if a given object implements the SubmitDocumentMetadata interface.
 */
export function instanceOfSubmitDocumentMetadata(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "workflowId" in value;
    isInstance = isInstance && "dataFormat" in value;
    isInstance = isInstance && "dataFormatVersion" in value;
    isInstance = isInstance && "countryCode" in value;
    isInstance = isInstance && "countryMandate" in value;

    return isInstance;
}

export function SubmitDocumentMetadataFromJSON(json: any): SubmitDocumentMetadata {
    return SubmitDocumentMetadataFromJSONTyped(json, false);
}

export function SubmitDocumentMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubmitDocumentMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'workflowId': json['workflowId'],
        'dataFormat': json['dataFormat'],
        'dataFormatVersion': json['dataFormatVersion'],
        'countryCode': json['countryCode'],
        'countryMandate': json['countryMandate'],
    };
}

export function SubmitDocumentMetadataToJSON(value?: SubmitDocumentMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'workflowId': value.workflowId,
        'dataFormat': value.dataFormat,
        'dataFormatVersion': value.dataFormatVersion,
        'countryCode': value.countryCode,
        'countryMandate': value.countryMandate,
    };
}
