/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseFromJSONTyped,
    ErrorResponseToJSON,
} from './ErrorResponse';

/**
 * Represents a single batch search operation
 * @export
 * @interface BatchSearch
 */
export interface BatchSearch {
    /**
     * ID of the batch search
     * @type {string}
     * @memberof BatchSearch
     */
    id?: string;
    /**
     * Name of the batch report
     * @type {string}
     * @memberof BatchSearch
     */
    name?: string;
    /**
     * Email of the user who created the batch search
     * @type {string}
     * @memberof BatchSearch
     */
    createdBy?: string;
    /**
     * Timestamp when the batch search was created
     * @type {Date}
     * @memberof BatchSearch
     */
    created?: Date;
    /**
     * Timestamp when the batch search was created
     * @type {Date}
     * @memberof BatchSearch
     */
    lastModified?: Date;
    /**
     * Status of the batch search
     * @type {string}
     * @memberof BatchSearch
     */
    status?: BatchSearchStatusEnum;
    /**
     * 
     * @type {ErrorResponse}
     * @memberof BatchSearch
     */
    error?: ErrorResponse;
}

/**
* @export
* @enum {string}
*/
export enum BatchSearchStatusEnum {
    Accepted = 'Accepted',
    Running = 'Running',
    Completed = 'Completed',
    Failed = 'Failed'
}

/**
 * Check if a given object implements the BatchSearch interface.
 */
export function instanceOfBatchSearch(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BatchSearchFromJSON(json: any): BatchSearch {
    return BatchSearchFromJSONTyped(json, false);
}

export function BatchSearchFromJSONTyped(json: any, ignoreDiscriminator: boolean): BatchSearch {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'lastModified': !exists(json, 'lastModified') ? undefined : (new Date(json['lastModified'])),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'error': !exists(json, 'error') ? undefined : ErrorResponseFromJSON(json['error']),
    };
}

export function BatchSearchToJSON(value?: BatchSearch | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'createdBy': value.createdBy,
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
        'lastModified': value.lastModified === undefined ? undefined : (value.lastModified.toISOString()),
        'status': value.status,
        'error': ErrorResponseToJSON(value.error),
    };
}
