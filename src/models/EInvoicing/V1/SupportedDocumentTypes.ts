/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    Extension,
    ExtensionFromJSON,
    ExtensionFromJSONTyped,
    ExtensionToJSON,
} from './Extension';

/**
 * 
 * @export
 * @interface SupportedDocumentTypes
 */
export interface SupportedDocumentTypes {
    /**
     * Document type name.
     * @type {string}
     * @memberof SupportedDocumentTypes
     */
    name?: string;
    /**
     * Document type value.
     * @type {string}
     * @memberof SupportedDocumentTypes
     */
    value: string;
    /**
     * Does trading partner support receiving this document type.
     * @type {boolean}
     * @memberof SupportedDocumentTypes
     */
    supportedByTradingPartner: boolean;
    /**
     * Does avalara support exchanging this document type.
     * @type {boolean}
     * @memberof SupportedDocumentTypes
     */
    supportedByAvalara?: boolean;
    /**
     * Optional array used to carry additional metadata or configuration values that may be required by specific document types. When creating or updating a trading partner, the keys provided in the 'extensions' attribute must be selected from a predefined list of supported extensions. Using any unsupported keys will result in a validation error.
     * @type {Array<Extension>}
     * @memberof SupportedDocumentTypes
     */
    extensions?: Array<Extension>;
}



/**
 * Check if a given object implements the SupportedDocumentTypes interface.
 */
export function instanceOfSupportedDocumentTypes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "supportedByTradingPartner" in value;

    return isInstance;
}

export function SupportedDocumentTypesFromJSON(json: any): SupportedDocumentTypes {
    return SupportedDocumentTypesFromJSONTyped(json, false);
}

export function SupportedDocumentTypesFromJSONTyped(json: any, ignoreDiscriminator: boolean): SupportedDocumentTypes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'value': json['value'],
        'supportedByTradingPartner': json['supportedByTradingPartner'],
        'supportedByAvalara': !exists(json, 'supportedByAvalara') ? undefined : json['supportedByAvalara'],
        'extensions': !exists(json, 'extensions') ? undefined : ((json['extensions'] as Array<any>)?.map(ExtensionFromJSON)),
    };
}

export function SupportedDocumentTypesToJSON(value?: SupportedDocumentTypes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'value': value.value,
        'supportedByTradingPartner': value.supportedByTradingPartner,
        'supportedByAvalara': value.supportedByAvalara,
        'extensions': value.extensions === undefined ? undefined : ((value.extensions as Array<any>)?.map(ExtensionToJSON)),
    };
}
