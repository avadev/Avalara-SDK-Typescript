/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    ConditionalForField,
    ConditionalForFieldFromJSON,
    ConditionalForFieldFromJSONTyped,
    ConditionalForFieldToJSON,
} from './ConditionalForField';
import {
    DataInputFieldNotUsedFor,
    DataInputFieldNotUsedForFromJSON,
    DataInputFieldNotUsedForFromJSONTyped,
    DataInputFieldNotUsedForToJSON,
} from './DataInputFieldNotUsedFor';
import {
    DataInputFieldOptionalFor,
    DataInputFieldOptionalForFromJSON,
    DataInputFieldOptionalForFromJSONTyped,
    DataInputFieldOptionalForToJSON,
} from './DataInputFieldOptionalFor';
import {
    DataInputFieldRequiredFor,
    DataInputFieldRequiredForFromJSON,
    DataInputFieldRequiredForFromJSONTyped,
    DataInputFieldRequiredForToJSON,
} from './DataInputFieldRequiredFor';

/**
 * The Data Input Field
 * @export
 * @interface DataInputField
 */
export interface DataInputField {
    /**
     * Field UUID
     * @type {string}
     * @memberof DataInputField
     */
    id?: string;
    /**
     * Field ID
     * @type {string}
     * @memberof DataInputField
     */
    fieldId?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof DataInputField
     */
    applicableDocumentRoots?: Array<object>;
    /**
     * Path to this field
     * @type {string}
     * @memberof DataInputField
     */
    path?: string;
    /**
     * Namespace of this field
     * @type {string}
     * @memberof DataInputField
     */
    namespace?: string;
    /**
     * Field name
     * @type {string}
     * @memberof DataInputField
     */
    fieldName?: string;
    /**
     * An example of the content for this field
     * @type {string}
     * @memberof DataInputField
     */
    exampleOrFixedValue?: string;
    /**
     * An object representing the acceptable values for this field
     * @type {object}
     * @memberof DataInputField
     */
    acceptedValues?: object;
    /**
     * An example of the content for this field
     * @type {string}
     * @memberof DataInputField
     */
    documentationLink?: string;
    /**
     * A description of this field
     * @type {string}
     * @memberof DataInputField
     */
    description?: string;
    /**
     * Is this a segment of the schema
     * @type {boolean}
     * @memberof DataInputField
     */
    isSegment?: boolean;
    /**
     * 
     * @type {DataInputFieldRequiredFor}
     * @memberof DataInputField
     */
    requiredFor?: DataInputFieldRequiredFor;
    /**
     * 
     * @type {Array<ConditionalForField>}
     * @memberof DataInputField
     */
    conditionalFor?: Array<ConditionalForField>;
    /**
     * 
     * @type {DataInputFieldNotUsedFor}
     * @memberof DataInputField
     */
    notUsedFor?: DataInputFieldNotUsedFor;
    /**
     * 
     * @type {DataInputFieldOptionalFor}
     * @memberof DataInputField
     */
    optionalFor?: DataInputFieldOptionalFor;
}



/**
 * Check if a given object implements the DataInputField interface.
 */
export function instanceOfDataInputField(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DataInputFieldFromJSON(json: any): DataInputField {
    return DataInputFieldFromJSONTyped(json, false);
}

export function DataInputFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataInputField {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'fieldId': !exists(json, 'fieldId') ? undefined : json['fieldId'],
        'applicableDocumentRoots': !exists(json, 'applicableDocumentRoots') ? undefined : json['applicableDocumentRoots'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'fieldName': !exists(json, 'fieldName') ? undefined : json['fieldName'],
        'exampleOrFixedValue': !exists(json, 'exampleOrFixedValue') ? undefined : json['exampleOrFixedValue'],
        'acceptedValues': !exists(json, 'acceptedValues') ? undefined : json['acceptedValues'],
        'documentationLink': !exists(json, 'documentationLink') ? undefined : json['documentationLink'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'isSegment': !exists(json, 'isSegment') ? undefined : json['isSegment'],
        'requiredFor': !exists(json, 'requiredFor') ? undefined : DataInputFieldRequiredForFromJSON(json['requiredFor']),
        'conditionalFor': !exists(json, 'conditionalFor') ? undefined : ((json['conditionalFor'] as Array<any>)?.map(ConditionalForFieldFromJSON)),
        'notUsedFor': !exists(json, 'notUsedFor') ? undefined : DataInputFieldNotUsedForFromJSON(json['notUsedFor']),
        'optionalFor': !exists(json, 'optionalFor') ? undefined : DataInputFieldOptionalForFromJSON(json['optionalFor']),
    };
}

export function DataInputFieldToJSON(value?: DataInputField | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'fieldId': value.fieldId,
        'applicableDocumentRoots': value.applicableDocumentRoots,
        'path': value.path,
        'namespace': value.namespace,
        'fieldName': value.fieldName,
        'exampleOrFixedValue': value.exampleOrFixedValue,
        'acceptedValues': value.acceptedValues,
        'documentationLink': value.documentationLink,
        'description': value.description,
        'isSegment': value.isSegment,
        'requiredFor': DataInputFieldRequiredForToJSON(value.requiredFor),
        'conditionalFor': value.conditionalFor === undefined ? undefined : ((value.conditionalFor as Array<any>)?.map(ConditionalForFieldToJSON)),
        'notUsedFor': DataInputFieldNotUsedForToJSON(value.notUsedFor),
        'optionalFor': DataInputFieldOptionalForToJSON(value.optionalFor),
    };
}
