/* tslint:disable */
/* eslint-disable */
/**
 * Avalara E-Invoicing API
 * An API that supports sending data for an E-Invoicing compliance use-case.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../../../runtime';
import {
    SignatureValueSignature,
    SignatureValueSignatureFromJSON,
    SignatureValueSignatureFromJSONTyped,
    SignatureValueSignatureToJSON,
} from './SignatureValueSignature';

/**
 * 
 * @export
 * @interface EventMessage
 */
export interface EventMessage {
    /**
     * Event-specific information
     * @type {object}
     * @memberof EventMessage
     */
    message: object;
    /**
     * 
     * @type {SignatureValueSignature}
     * @memberof EventMessage
     */
    signature: SignatureValueSignature;
    /**
     * Tenant ID of the event
     * @type {string}
     * @memberof EventMessage
     */
    tenantId: string;
    /**
     * The correlation ID used by Avalara to aid in tracing through to provenance of this event massage.
     * @type {string}
     * @memberof EventMessage
     */
    correlationId?: string;
    /**
     * The Avalara registered code for the system. See <a href="https://avalara.atlassian.net/wiki/spaces/AIM/pages/637250338966/Taxonomy+Avalara+Systems">Taxonomy&#58; Avalara Systems</a>
     * @type {string}
     * @memberof EventMessage
     */
    systemCode: string;
    /**
     * Type of the event
     * @type {string}
     * @memberof EventMessage
     */
    eventName: string;
    /**
     * Version of the included payload.
     * @type {string}
     * @memberof EventMessage
     */
    eventVersion?: string;
    /**
     * Timestamp when the event was received by the dispatch service.
     * @type {Date}
     * @memberof EventMessage
     */
    receiptTimestamp?: Date;
}



/**
 * Check if a given object implements the EventMessage interface.
 */
export function instanceOfEventMessage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "signature" in value;
    isInstance = isInstance && "tenantId" in value;
    isInstance = isInstance && "systemCode" in value;
    isInstance = isInstance && "eventName" in value;

    return isInstance;
}

export function EventMessageFromJSON(json: any): EventMessage {
    return EventMessageFromJSONTyped(json, false);
}

export function EventMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'message': json['message'],
        'signature': SignatureValueSignatureFromJSON(json['signature']),
        'tenantId': json['tenantId'],
        'correlationId': !exists(json, 'correlationId') ? undefined : json['correlationId'],
        'systemCode': json['systemCode'],
        'eventName': json['eventName'],
        'eventVersion': !exists(json, 'eventVersion') ? undefined : json['eventVersion'],
        'receiptTimestamp': !exists(json, 'receiptTimestamp') ? undefined : (new Date(json['receiptTimestamp'])),
    };
}

export function EventMessageToJSON(value?: EventMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'message': value.message,
        'signature': SignatureValueSignatureToJSON(value.signature),
        'tenantId': value.tenantId,
        'correlationId': value.correlationId,
        'systemCode': value.systemCode,
        'eventName': value.eventName,
        'eventVersion': value.eventVersion,
        'receiptTimestamp': value.receiptTimestamp === undefined ? undefined : (value.receiptTimestamp.toISOString()),
    };
}
